!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APP_SRC	Makefile	/^APP_SRC = src\/$/;"	m
ARDUINOJSON_DEFAULT_NESTING_LIMIT	ArduinoJson/Configuration.hpp	130;"	d
ARDUINOJSON_DEFAULT_NESTING_LIMIT	ArduinoJson/Configuration.hpp	70;"	d
ARDUINOJSON_ENABLE_ALIGNMENT	ArduinoJson/Configuration.hpp	125;"	d
ARDUINOJSON_ENABLE_ALIGNMENT	ArduinoJson/Configuration.hpp	61;"	d
ARDUINOJSON_ENABLE_ALIGNMENT	ArduinoJson/Configuration.hpp	64;"	d
ARDUINOJSON_ENABLE_ARDUINO_STREAM	ArduinoJson/Configuration.hpp	120;"	d
ARDUINOJSON_ENABLE_ARDUINO_STREAM	ArduinoJson/Configuration.hpp	36;"	d
ARDUINOJSON_ENABLE_ARDUINO_STRING	ArduinoJson/Configuration.hpp	105;"	d
ARDUINOJSON_ENABLE_ARDUINO_STRING	ArduinoJson/Configuration.hpp	32;"	d
ARDUINOJSON_ENABLE_DEPRECATED	ArduinoJson/Configuration.hpp	12;"	d
ARDUINOJSON_ENABLE_PROGMEM	ArduinoJson/Configuration.hpp	110;"	d
ARDUINOJSON_ENABLE_PROGMEM	ArduinoJson/Configuration.hpp	42;"	d
ARDUINOJSON_ENABLE_PROGMEM	ArduinoJson/Configuration.hpp	44;"	d
ARDUINOJSON_ENABLE_STD_STREAM	ArduinoJson/Configuration.hpp	115;"	d
ARDUINOJSON_ENABLE_STD_STREAM	ArduinoJson/Configuration.hpp	55;"	d
ARDUINOJSON_ENABLE_STD_STRING	ArduinoJson/Configuration.hpp	100;"	d
ARDUINOJSON_ENABLE_STD_STRING	ArduinoJson/Configuration.hpp	50;"	d
ARDUINOJSON_USE_DOUBLE	ArduinoJson/Configuration.hpp	19;"	d
ARDUINOJSON_USE_DOUBLE	ArduinoJson/Configuration.hpp	77;"	d
ARDUINOJSON_USE_INT64	ArduinoJson/Configuration.hpp	27;"	d
ARDUINOJSON_USE_INT64	ArduinoJson/Configuration.hpp	92;"	d
ARDUINOJSON_USE_INT64	ArduinoJson/Configuration.hpp	94;"	d
ARDUINOJSON_USE_LONG_LONG	ArduinoJson/Configuration.hpp	24;"	d
ARDUINOJSON_USE_LONG_LONG	ArduinoJson/Configuration.hpp	83;"	d
ARDUINOJSON_USE_LONG_LONG	ArduinoJson/Configuration.hpp	85;"	d
A_BLOCK_LINK	FreeRTOS/portable/MemMang/heap_2.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	FreeRTOS/portable/MemMang/heap_4.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	FreeRTOS/portable/MemMang/heap_5.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
ArduinoJson	ArduinoJson/Data/Encoding.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonBufferAllocated.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonFloat.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonInteger.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonVariantAs.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonVariantComparer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonVariantContent.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonVariantDefault.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/JsonVariantType.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/List.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/ListConstIterator.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/ListIterator.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/ListNode.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/ReferenceType.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Data/ValueSetter.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Deserialization/Comments.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Deserialization/JsonParser.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Deserialization/StringWriter.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/DynamicJsonBuffer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonArray.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonArrayImpl.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonArraySubscript.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonBuffer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonBufferBase.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonObject.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonObjectImpl.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonObjectSubscript.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonPair.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonVariant.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonVariantBase.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonVariantComparisons.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/JsonVariantImpl.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/ctype.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/isFloat.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/isInteger.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/math.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/normalize.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/parseFloat.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Polyfills/parseInteger.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/RawJson.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/DummyPrint.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/IndentedPrint.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/JsonPrintable.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/JsonSerializer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/JsonWriter.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/Prettyfier.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StaticJsonBuffer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/ArduinoStream.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/CharPointer.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/FlashString.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/StdStream.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/StdString.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/StringTraits/StringTraits.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/EnableIf.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/FloatTraits.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsArray.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsChar.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsConst.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsFloatingPoint.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsIntegral.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsSame.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsSignedIntegral.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/IsUnsignedIntegral.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/RemoveConst.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoJson	ArduinoJson/TypeTraits/RemoveReference.hpp	/^namespace ArduinoJson {$/;"	n
ArduinoStreamTraits	ArduinoJson/StringTraits/ArduinoStream.hpp	/^struct ArduinoStreamTraits {$/;"	s	namespace:ArduinoJson::Internals
BaseType_t	FreeRTOS/include/portmacro.h	/^typedef long BaseType_t;$/;"	t
Block	ArduinoJson/DynamicJsonBuffer.hpp	/^  struct Block : EmptyBlock {$/;"	s	class:ArduinoJson::DynamicJsonBufferBase
BlockLink_t	FreeRTOS/portable/MemMang/heap_2.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	FreeRTOS/portable/MemMang/heap_4.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	FreeRTOS/portable/MemMang/heap_5.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
CO_ROUTINE_H	FreeRTOS/include/croutine.h	71;"	d
CRCB_t	FreeRTOS/include/croutine.h	/^} CRCB_t; \/* Co-routine control block.  Note must be identical in size down to uxPriority with TCB_t. *\/$/;"	t	typeref:struct:corCoRoutineControlBlock
CallbackParameters_t	FreeRTOS/timers.c	/^} CallbackParameters_t;$/;"	t	typeref:struct:tmrCallbackParameters	file:
CharPointerTraits	ArduinoJson/StringTraits/CharPointer.hpp	/^struct CharPointerTraits {$/;"	s	namespace:ArduinoJson::Internals
CoRoutineHandle_t	FreeRTOS/include/croutine.h	/^typedef void * CoRoutineHandle_t;$/;"	t
DEPRECATED	ArduinoJson/Polyfills/attributes.hpp	13;"	d
DEPRECATED	ArduinoJson/Polyfills/attributes.hpp	18;"	d
DEPRECATED	ArduinoJson/Polyfills/attributes.hpp	20;"	d
DEPRECATED_DEFINITIONS_H	FreeRTOS/include/deprecated_definitions.h	71;"	d
DaemonTaskMessage_t	FreeRTOS/timers.c	/^} DaemonTaskMessage_t;$/;"	t	typeref:struct:tmrTimerQueueMessage	file:
DefaultAllocator	ArduinoJson/DynamicJsonBuffer.hpp	/^class DefaultAllocator {$/;"	c	namespace:ArduinoJson
DummyPrint	ArduinoJson/Serialization/DummyPrint.hpp	/^class DummyPrint {$/;"	c	namespace:ArduinoJson::Internals
DynamicJsonBuffer	ArduinoJson/DynamicJsonBuffer.hpp	/^typedef DynamicJsonBufferBase<DefaultAllocator> DynamicJsonBuffer;$/;"	t	namespace:ArduinoJson
DynamicJsonBufferBase	ArduinoJson/DynamicJsonBuffer.hpp	/^  DynamicJsonBufferBase(size_t initialSize = 256)$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
DynamicJsonBufferBase	ArduinoJson/DynamicJsonBuffer.hpp	/^class DynamicJsonBufferBase$/;"	c	namespace:ArduinoJson
DynamicStringBuilder	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^  DynamicStringBuilder(TString &str) : _str(str) {}$/;"	f	class:ArduinoJson::Internals::DynamicStringBuilder
DynamicStringBuilder	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^class DynamicStringBuilder {$/;"	c	namespace:ArduinoJson::Internals
EVENT_GROUPS_H	FreeRTOS/include/event_groups.h	71;"	d
EmptyBlock	ArduinoJson/DynamicJsonBuffer.hpp	/^  struct EmptyBlock {$/;"	s	class:ArduinoJson::DynamicJsonBufferBase
EnableIf	ArduinoJson/TypeTraits/EnableIf.hpp	/^struct EnableIf {};$/;"	s	namespace:ArduinoJson::TypeTraits
EnableIf	ArduinoJson/TypeTraits/EnableIf.hpp	/^struct EnableIf<true, T> {$/;"	s	namespace:ArduinoJson::TypeTraits
Encoding	ArduinoJson/Data/Encoding.hpp	/^class Encoding {$/;"	c	namespace:ArduinoJson::Internals
EventBits_t	FreeRTOS/include/event_groups.h	/^typedef TickType_t EventBits_t;$/;"	t
EventGroupHandle_t	FreeRTOS/include/event_groups.h	/^typedef void * EventGroupHandle_t;$/;"	t
EventGroup_t	FreeRTOS/event_groups.c	/^} EventGroup_t;$/;"	t	typeref:struct:xEventGroupDefinition	file:
FORCE_INLINE	ArduinoJson/Polyfills/attributes.hpp	11;"	d
FORCE_INLINE	ArduinoJson/Polyfills/attributes.hpp	15;"	d
FREERTOS_CONFIG_H	src/FreeRTOSConfig.h	72;"	d
FREERTOS_CONFIG_H	src/FreeRTOSConfig_m3.h	72;"	d
FREERTOS_MEMMANG_SRC	Makefile	/^FREERTOS_MEMMANG_SRC = $(FREERTOS_SRC)portable\/MemMang\/$/;"	m
FREERTOS_PORT_SRC	Makefile	/^FREERTOS_PORT_SRC = $(FREERTOS_SRC)portable\/GCC\/ARM_CM3\/$/;"	m
FREERTOS_SRC	Makefile	/^FREERTOS_SRC = FreeRTOS\/$/;"	m
FloatTraits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^struct FloatTraits {};$/;"	s	namespace:ArduinoJson::TypeTraits
FloatTraits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^struct FloatTraits<T, 4 \/*32bits*\/> {$/;"	s	namespace:ArduinoJson::TypeTraits
FloatTraits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^struct FloatTraits<T, 8 \/*64bits*\/> {$/;"	s	namespace:ArduinoJson::TypeTraits
HeapRegion	FreeRTOS/include/portable.h	/^typedef struct HeapRegion$/;"	s
HeapRegion_t	FreeRTOS/include/portable.h	/^} HeapRegion_t;$/;"	t	typeref:struct:HeapRegion
INCLUDEFLAG	Makefile	/^INCLUDEFLAG = -I$/;"	m
INCLUDE_eTaskGetState	FreeRTOS/include/FreeRTOS.h	202;"	d
INCLUDE_eTaskGetState	src/FreeRTOSConfig.h	137;"	d
INCLUDE_eTaskGetState	src/FreeRTOSConfig_m3.h	137;"	d
INCLUDE_uxTaskGetStackHighWaterMark	FreeRTOS/include/FreeRTOS.h	198;"	d
INCLUDE_uxTaskPriorityGet	FreeRTOS/include/FreeRTOS.h	158;"	d
INCLUDE_uxTaskPriorityGet	src/FreeRTOSConfig.h	131;"	d
INCLUDE_uxTaskPriorityGet	src/FreeRTOSConfig_m3.h	131;"	d
INCLUDE_vTaskCleanUpResources	src/FreeRTOSConfig.h	133;"	d
INCLUDE_vTaskCleanUpResources	src/FreeRTOSConfig_m3.h	133;"	d
INCLUDE_vTaskDelay	FreeRTOS/include/FreeRTOS.h	174;"	d
INCLUDE_vTaskDelay	src/FreeRTOSConfig.h	136;"	d
INCLUDE_vTaskDelay	src/FreeRTOSConfig_m3.h	136;"	d
INCLUDE_vTaskDelayUntil	FreeRTOS/include/FreeRTOS.h	170;"	d
INCLUDE_vTaskDelayUntil	src/FreeRTOSConfig.h	135;"	d
INCLUDE_vTaskDelayUntil	src/FreeRTOSConfig_m3.h	135;"	d
INCLUDE_vTaskDelete	FreeRTOS/include/FreeRTOS.h	162;"	d
INCLUDE_vTaskDelete	src/FreeRTOSConfig.h	132;"	d
INCLUDE_vTaskDelete	src/FreeRTOSConfig_m3.h	132;"	d
INCLUDE_vTaskPrioritySet	FreeRTOS/include/FreeRTOS.h	154;"	d
INCLUDE_vTaskPrioritySet	src/FreeRTOSConfig.h	130;"	d
INCLUDE_vTaskPrioritySet	src/FreeRTOSConfig_m3.h	130;"	d
INCLUDE_vTaskSuspend	FreeRTOS/include/FreeRTOS.h	166;"	d
INCLUDE_vTaskSuspend	src/FreeRTOSConfig.h	134;"	d
INCLUDE_vTaskSuspend	src/FreeRTOSConfig_m3.h	134;"	d
INCLUDE_xQueueGetMutexHolder	FreeRTOS/include/FreeRTOS.h	186;"	d
INCLUDE_xSemaphoreGetMutexHolder	FreeRTOS/include/FreeRTOS.h	190;"	d
INCLUDE_xTaskAbortDelay	FreeRTOS/include/FreeRTOS.h	182;"	d
INCLUDE_xTaskGetCurrentTaskHandle	FreeRTOS/include/FreeRTOS.h	218;"	d
INCLUDE_xTaskGetHandle	FreeRTOS/include/FreeRTOS.h	194;"	d
INCLUDE_xTaskGetIdleTaskHandle	FreeRTOS/include/FreeRTOS.h	178;"	d
INCLUDE_xTaskGetSchedulerState	FreeRTOS/include/FreeRTOS.h	214;"	d
INCLUDE_xTaskResumeFromISR	FreeRTOS/include/FreeRTOS.h	206;"	d
INCLUDE_xTimerPendFunctionCall	FreeRTOS/include/FreeRTOS.h	210;"	d
INC_FLAGS	Makefile	/^INC_FLAGS = $(INCLUDEFLAG)$(INC_FREERTOS) $(INCLUDEFLAG)$(FREERTOS_PORT_SRC) $(INCLUDEFLAG)$(APP_SRC)$/;"	m
INC_FREERTOS	Makefile	/^INC_FREERTOS = $(FREERTOS_SRC)include\/$/;"	m
INC_FREERTOS_H	FreeRTOS/include/FreeRTOS.h	71;"	d
INC_TASK_H	FreeRTOS/include/task.h	72;"	d
IndentedPrint	ArduinoJson/Serialization/IndentedPrint.hpp	/^  explicit IndentedPrint(Print &p) : sink(&p) {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
IndentedPrint	ArduinoJson/Serialization/IndentedPrint.hpp	/^class IndentedPrint {$/;"	c	namespace:ArduinoJson::Internals
InputReader	ArduinoJson/Deserialization/JsonParser.hpp	/^  typedef typename Internals::StringTraits<TString>::Reader InputReader;$/;"	t	struct:ArduinoJson::Internals::JsonParserBuilder
Internals	ArduinoJson/Data/Encoding.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonBufferAllocated.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonFloat.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonInteger.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonVariantAs.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonVariantComparer.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonVariantContent.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonVariantDefault.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/JsonVariantType.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/List.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/ListConstIterator.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/ListIterator.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/ListNode.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/ReferenceType.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Data/ValueSetter.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Deserialization/Comments.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Deserialization/JsonParser.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Deserialization/StringWriter.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/JsonArray.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/JsonObject.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/DummyPrint.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/IndentedPrint.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/JsonPrintable.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/JsonSerializer.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/JsonWriter.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/Prettyfier.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/ArduinoStream.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/CharPointer.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/FlashString.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/StdStream.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/StdString.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
Internals	ArduinoJson/StringTraits/StringTraits.hpp	/^namespace Internals {$/;"	n	namespace:ArduinoJson
IsArray	ArduinoJson/TypeTraits/IsArray.hpp	/^struct IsArray {$/;"	s	namespace:ArduinoJson::TypeTraits
IsArray	ArduinoJson/TypeTraits/IsArray.hpp	/^struct IsArray<T[N]> {$/;"	s	namespace:ArduinoJson::TypeTraits
IsArray	ArduinoJson/TypeTraits/IsArray.hpp	/^struct IsArray<T[]> {$/;"	s	namespace:ArduinoJson::TypeTraits
IsBaseOf	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^class IsBaseOf {$/;"	c	namespace:ArduinoJson::TypeTraits
IsChar	ArduinoJson/TypeTraits/IsChar.hpp	/^struct IsChar {$/;"	s	namespace:ArduinoJson::TypeTraits
IsChar	ArduinoJson/TypeTraits/IsChar.hpp	/^struct IsChar<const T> : IsChar<T> {};$/;"	s	namespace:ArduinoJson::TypeTraits
IsConst	ArduinoJson/TypeTraits/IsConst.hpp	/^struct IsConst {$/;"	s	namespace:ArduinoJson::TypeTraits
IsConst	ArduinoJson/TypeTraits/IsConst.hpp	/^struct IsConst<const T> {$/;"	s	namespace:ArduinoJson::TypeTraits
IsFloatingPoint	ArduinoJson/TypeTraits/IsFloatingPoint.hpp	/^struct IsFloatingPoint {$/;"	s	namespace:ArduinoJson::TypeTraits
IsIntegral	ArduinoJson/TypeTraits/IsIntegral.hpp	/^struct IsIntegral {$/;"	s	namespace:ArduinoJson::TypeTraits
IsIntegral	ArduinoJson/TypeTraits/IsIntegral.hpp	/^struct IsIntegral<const T> : IsIntegral<T> {};$/;"	s	namespace:ArduinoJson::TypeTraits
IsSame	ArduinoJson/TypeTraits/IsSame.hpp	/^struct IsSame {$/;"	s	namespace:ArduinoJson::TypeTraits
IsSame	ArduinoJson/TypeTraits/IsSame.hpp	/^struct IsSame<T, T> {$/;"	s	namespace:ArduinoJson::TypeTraits
IsSignedIntegral	ArduinoJson/TypeTraits/IsSignedIntegral.hpp	/^struct IsSignedIntegral {$/;"	s	namespace:ArduinoJson::TypeTraits
IsString	ArduinoJson/StringTraits/StringTraits.hpp	/^struct IsString {$/;"	s	namespace:ArduinoJson::TypeTraits
IsString	ArduinoJson/StringTraits/StringTraits.hpp	/^struct IsString<T, typename TypeTraits::EnableIf<$/;"	s	namespace:ArduinoJson::TypeTraits
IsUnsignedIntegral	ArduinoJson/TypeTraits/IsUnsignedIntegral.hpp	/^struct IsUnsignedIntegral {$/;"	s	namespace:ArduinoJson::TypeTraits
IsVariant	ArduinoJson/JsonVariantBase.hpp	/^struct IsVariant : IsBaseOf<JsonVariantBase<T>, T> {};$/;"	s	namespace:ArduinoJson::TypeTraits
JSON_ARRAY	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_ARRAY,             \/\/ JsonVariant stores a pointer to a JsonArray$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_ARRAY_SIZE	ArduinoJson/JsonArray.hpp	24;"	d
JSON_BOOLEAN	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_BOOLEAN,           \/\/ JsonVariant stores a bool$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_FLOAT_0_DECIMALS	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_FLOAT_0_DECIMALS$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_NEGATIVE_INTEGER	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_NEGATIVE_INTEGER,  \/\/ JsonVariant stores an unsigned long that must be$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_OBJECT	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_OBJECT,            \/\/ JsonVariant stores a pointer to a JsonObject$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_OBJECT_SIZE	ArduinoJson/JsonObject.hpp	24;"	d
JSON_POSITIVE_INTEGER	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_POSITIVE_INTEGER,  \/\/ JsonVariant stores an unsigned long$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_STRING	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_STRING,            \/\/ JsonVariant stores a const char*$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_UNDEFINED	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_UNDEFINED,         \/\/ JsonVariant has not been initialized$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JSON_UNPARSED	ArduinoJson/Data/JsonVariantType.hpp	/^  JSON_UNPARSED,          \/\/ JsonVariant contains an unparsed string$/;"	e	enum:ArduinoJson::Internals::JsonVariantType
JsonArray	ArduinoJson/JsonArray.hpp	/^  explicit JsonArray(JsonBuffer *buffer)$/;"	f	class:ArduinoJson::JsonArray
JsonArray	ArduinoJson/JsonArray.hpp	/^class JsonArray : public Internals::JsonPrintable<JsonArray>,$/;"	c	namespace:ArduinoJson
JsonArraySubscript	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE JsonArraySubscript(JsonArray& array, size_t index)$/;"	f	class:ArduinoJson::JsonArraySubscript
JsonArraySubscript	ArduinoJson/JsonArraySubscript.hpp	/^class JsonArraySubscript : public JsonVariantBase<JsonArraySubscript> {$/;"	c	namespace:ArduinoJson
JsonBuffer	ArduinoJson/JsonBuffer.hpp	/^class JsonBuffer {$/;"	c	namespace:ArduinoJson
JsonBufferAllocated	ArduinoJson/Data/JsonBufferAllocated.hpp	/^class JsonBufferAllocated {$/;"	c	namespace:ArduinoJson::Internals
JsonBufferBase	ArduinoJson/JsonBufferBase.hpp	/^class JsonBufferBase : public JsonBuffer {$/;"	c	namespace:ArduinoJson
JsonFloat	ArduinoJson/Data/JsonFloat.hpp	/^typedef double JsonFloat;$/;"	t	namespace:ArduinoJson::Internals
JsonInteger	ArduinoJson/Data/JsonInteger.hpp	/^typedef long long JsonInteger;$/;"	t	namespace:ArduinoJson::Internals
JsonObject	ArduinoJson/JsonObject.hpp	/^  explicit JsonObject(JsonBuffer* buffer) : Internals::List<JsonPair>(buffer) {}$/;"	f	class:ArduinoJson::JsonObject
JsonObject	ArduinoJson/JsonObject.hpp	/^class JsonObject : public Internals::JsonPrintable<JsonObject>,$/;"	c	namespace:ArduinoJson
JsonObjectSubscript	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE JsonObjectSubscript(JsonObject& object, TStringRef key)$/;"	f	class:ArduinoJson::JsonObjectSubscript
JsonObjectSubscript	ArduinoJson/JsonObjectSubscript.hpp	/^class JsonObjectSubscript$/;"	c	namespace:ArduinoJson
JsonPair	ArduinoJson/JsonPair.hpp	/^struct JsonPair {$/;"	s	namespace:ArduinoJson
JsonParser	ArduinoJson/Deserialization/JsonParser.hpp	/^  JsonParser(JsonBuffer *buffer, TReader reader, TWriter writer,$/;"	f	class:ArduinoJson::Internals::JsonParser
JsonParser	ArduinoJson/Deserialization/JsonParser.hpp	/^class JsonParser {$/;"	c	namespace:ArduinoJson::Internals
JsonParserBuilder	ArduinoJson/Deserialization/JsonParser.hpp	/^struct JsonParserBuilder {$/;"	s	namespace:ArduinoJson::Internals
JsonParserBuilder	ArduinoJson/Deserialization/JsonParser.hpp	/^struct JsonParserBuilder<$/;"	s	namespace:ArduinoJson::Internals
JsonPrintable	ArduinoJson/Serialization/JsonPrintable.hpp	/^class JsonPrintable {$/;"	c	namespace:ArduinoJson::Internals
JsonSerializer	ArduinoJson/Serialization/JsonSerializer.hpp	/^class JsonSerializer {$/;"	c	namespace:ArduinoJson::Internals
JsonUInt	ArduinoJson/Data/JsonInteger.hpp	/^typedef unsigned long long JsonUInt;$/;"	t	namespace:ArduinoJson::Internals
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant($/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant(RawJson value) {$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant(T value, typename TypeTraits::EnableIf<$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant(T value, uint8_t decimals = 2,$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant(T value,$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^  JsonVariant(bool value) {$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariant.hpp	/^class JsonVariant : public JsonVariantBase<JsonVariant> {$/;"	c	namespace:ArduinoJson
JsonVariant	ArduinoJson/JsonVariantImpl.hpp	/^inline JsonVariant::JsonVariant(const JsonArray &array) {$/;"	f	class:ArduinoJson::JsonVariant
JsonVariant	ArduinoJson/JsonVariantImpl.hpp	/^inline JsonVariant::JsonVariant(const JsonObject &object) {$/;"	f	class:ArduinoJson::JsonVariant
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs<JsonArray> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs<JsonObject> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs<char*> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs<const JsonArray> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantAs	ArduinoJson/Data/JsonVariantAs.hpp	/^struct JsonVariantAs<const JsonObject> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantBase	ArduinoJson/JsonVariantBase.hpp	/^class JsonVariantBase : public Internals::JsonPrintable<TImpl> {$/;"	c	namespace:ArduinoJson
JsonVariantComparer	ArduinoJson/Data/JsonVariantComparer.hpp	/^struct JsonVariantComparer {};$/;"	s	namespace:ArduinoJson::Internals
JsonVariantComparer	ArduinoJson/Data/JsonVariantComparer.hpp	/^struct JsonVariantComparer<$/;"	s	namespace:ArduinoJson::Internals
JsonVariantComparer	ArduinoJson/Data/JsonVariantComparer.hpp	/^struct JsonVariantComparer<TVariant2,$/;"	s	namespace:ArduinoJson::Internals
JsonVariantContent	ArduinoJson/Data/JsonVariantContent.hpp	/^union JsonVariantContent {$/;"	u	namespace:ArduinoJson::Internals
JsonVariantDefault	ArduinoJson/Data/JsonVariantDefault.hpp	/^struct JsonVariantDefault {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantDefault	ArduinoJson/Data/JsonVariantDefault.hpp	/^struct JsonVariantDefault<T&> : JsonVariantDefault<T> {};$/;"	s	namespace:ArduinoJson::Internals
JsonVariantDefault	ArduinoJson/Data/JsonVariantDefault.hpp	/^struct JsonVariantDefault<const T> : JsonVariantDefault<T> {};$/;"	s	namespace:ArduinoJson::Internals
JsonVariantDefault	ArduinoJson/JsonArray.hpp	/^struct JsonVariantDefault<JsonArray> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantDefault	ArduinoJson/JsonObject.hpp	/^struct JsonVariantDefault<JsonObject> {$/;"	s	namespace:ArduinoJson::Internals
JsonVariantType	ArduinoJson/Data/JsonVariantType.hpp	/^enum JsonVariantType {$/;"	g	namespace:ArduinoJson::Internals
JsonWriter	ArduinoJson/Serialization/JsonWriter.hpp	/^  explicit JsonWriter(Print &sink) : _sink(sink), _length(0) {}$/;"	f	class:ArduinoJson::Internals::JsonWriter
JsonWriter	ArduinoJson/Serialization/JsonWriter.hpp	/^class JsonWriter {$/;"	c	namespace:ArduinoJson::Internals
LIST_H	FreeRTOS/include/list.h	103;"	d
List	ArduinoJson/Data/List.hpp	/^  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}$/;"	f	class:ArduinoJson::Internals::List
List	ArduinoJson/Data/List.hpp	/^class List {$/;"	c	namespace:ArduinoJson::Internals
ListConstIterator	ArduinoJson/Data/ListConstIterator.hpp	/^  explicit ListConstIterator(const ListNode<T> *node = NULL) : _node(node) {}$/;"	f	class:ArduinoJson::Internals::ListConstIterator
ListConstIterator	ArduinoJson/Data/ListConstIterator.hpp	/^class ListConstIterator {$/;"	c	namespace:ArduinoJson::Internals
ListItem_t	FreeRTOS/include/list.h	/^typedef struct xLIST_ITEM ListItem_t;					\/* For some reason lint wants this as two separate definitions. *\/$/;"	t	typeref:struct:xLIST_ITEM
ListIterator	ArduinoJson/Data/ListIterator.hpp	/^  explicit ListIterator(ListNode<T> *node = NULL) : _node(node) {}$/;"	f	class:ArduinoJson::Internals::ListIterator
ListIterator	ArduinoJson/Data/ListIterator.hpp	/^class ListIterator {$/;"	c	namespace:ArduinoJson::Internals
ListNode	ArduinoJson/Data/ListNode.hpp	/^  ListNode() : next(NULL) {}$/;"	f	struct:ArduinoJson::Internals::ListNode
ListNode	ArduinoJson/Data/ListNode.hpp	/^struct ListNode : public Internals::JsonBufferAllocated {$/;"	s	namespace:ArduinoJson::Internals
List_t	FreeRTOS/include/list.h	/^} List_t;$/;"	t	typeref:struct:xLIST
MAX_LEVEL	ArduinoJson/Serialization/IndentedPrint.hpp	/^  static const int MAX_LEVEL = 15;    \/\/ because it's only 4 bits$/;"	m	class:ArduinoJson::Internals::IndentedPrint
MAX_TAB_SIZE	ArduinoJson/Serialization/IndentedPrint.hpp	/^  static const int MAX_TAB_SIZE = 7;  \/\/ because it's only 3 bits$/;"	m	class:ArduinoJson::Internals::IndentedPrint
MPU_PROTOTYPES_H	FreeRTOS/include/mpu_prototypes.h	80;"	d
MPU_WRAPPERS_H	FreeRTOS/include/mpu_wrappers.h	71;"	d
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/event_groups.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/event_groups.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_1.c	83;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_1.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_2.c	84;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_2.c	89;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_3.c	87;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_3.c	92;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_4.c	83;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_4.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_5.c	117;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/portable/MemMang/heap_5.c	122;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/queue.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/queue.c	90;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/tasks.c	77;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/tasks.c	89;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/timers.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/timers.c	91;"	d	file:
MemoryRegion_t	FreeRTOS/include/task.h	/^} MemoryRegion_t;$/;"	t	typeref:struct:xMEMORY_REGION
MiniListItem_t	FreeRTOS/include/list.h	/^typedef struct xMINI_LIST_ITEM MiniListItem_t;$/;"	t	typeref:struct:xMINI_LIST_ITEM
NO_INLINE	ArduinoJson/Polyfills/attributes.hpp	12;"	d
NO_INLINE	ArduinoJson/Polyfills/attributes.hpp	16;"	d
No	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^  typedef char No[2];$/;"	t	class:ArduinoJson::TypeTraits::IsBaseOf
PORTABLE_H	FreeRTOS/include/portable.h	75;"	d
PORTMACRO_H	FreeRTOS/include/portmacro.h	72;"	d
PORTMACRO_H	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	68;"	d
PRIVILEGED_DATA	FreeRTOS/include/mpu_wrappers.h	187;"	d
PRIVILEGED_DATA	FreeRTOS/include/mpu_wrappers.h	194;"	d
PRIVILEGED_FUNCTION	FreeRTOS/include/mpu_wrappers.h	181;"	d
PRIVILEGED_FUNCTION	FreeRTOS/include/mpu_wrappers.h	186;"	d
PRIVILEGED_FUNCTION	FreeRTOS/include/mpu_wrappers.h	193;"	d
PROJDEFS_H	FreeRTOS/include/projdefs.h	71;"	d
PendedFunction_t	FreeRTOS/include/timers.h	/^typedef void (*PendedFunction_t)( void *, uint32_t );$/;"	t
Polyfills	ArduinoJson/Polyfills/ctype.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/isFloat.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/isInteger.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/math.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/normalize.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/parseFloat.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Polyfills	ArduinoJson/Polyfills/parseInteger.hpp	/^namespace Polyfills {$/;"	n	namespace:ArduinoJson
Prettyfier	ArduinoJson/Serialization/Prettyfier.hpp	/^  explicit Prettyfier(IndentedPrint<Print>& p) : _sink(p) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
Prettyfier	ArduinoJson/Serialization/Prettyfier.hpp	/^class Prettyfier {$/;"	c	namespace:ArduinoJson::Internals
QEMU_SRC	Makefile	/^QEMU_SRC = qemu\/$/;"	m
QUEUE_H	FreeRTOS/include/queue.h	72;"	d
QUEUE_REGISTRY_ITEM	FreeRTOS/queue.c	/^	typedef struct QUEUE_REGISTRY_ITEM$/;"	s	file:
QueueDefinition	FreeRTOS/queue.c	/^typedef struct QueueDefinition$/;"	s	file:
QueueHandle_t	FreeRTOS/include/queue.h	/^typedef void * QueueHandle_t;$/;"	t
QueueRegistryItem_t	FreeRTOS/queue.c	/^	typedef xQueueRegistryItem QueueRegistryItem_t;$/;"	t	file:
QueueSetHandle_t	FreeRTOS/include/queue.h	/^typedef void * QueueSetHandle_t;$/;"	t
QueueSetMemberHandle_t	FreeRTOS/include/queue.h	/^typedef void * QueueSetMemberHandle_t;$/;"	t
Queue_t	FreeRTOS/queue.c	/^typedef xQUEUE Queue_t;$/;"	t	file:
RawJson	ArduinoJson/RawJson.hpp	/^  explicit RawJson(const char* str) : _str(str) {}$/;"	f	class:ArduinoJson::RawJson
RawJson	ArduinoJson/RawJson.hpp	/^class RawJson {$/;"	c	namespace:ArduinoJson
Reader	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    Reader(Stream& stream) : _stream(stream), _current(0), _next(0) {}$/;"	f	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
Reader	ArduinoJson/StringTraits/ArduinoStream.hpp	/^  class Reader {$/;"	c	struct:ArduinoJson::Internals::ArduinoStreamTraits
Reader	ArduinoJson/StringTraits/CharPointer.hpp	/^    Reader(const TChar* ptr)$/;"	f	class:ArduinoJson::Internals::CharPointerTraits::Reader
Reader	ArduinoJson/StringTraits/CharPointer.hpp	/^  class Reader {$/;"	c	struct:ArduinoJson::Internals::CharPointerTraits
Reader	ArduinoJson/StringTraits/FlashString.hpp	/^    Reader(const __FlashStringHelper* ptr)$/;"	f	class:ArduinoJson::Internals::StringTraits::Reader
Reader	ArduinoJson/StringTraits/FlashString.hpp	/^  class Reader {$/;"	c	struct:ArduinoJson::Internals::StringTraits
Reader	ArduinoJson/StringTraits/StdStream.hpp	/^    Reader(std::istream& stream) : _stream(stream), _current(0), _next(0) {}$/;"	f	class:ArduinoJson::Internals::StdStreamTraits::Reader
Reader	ArduinoJson/StringTraits/StdStream.hpp	/^  class Reader {$/;"	c	struct:ArduinoJson::Internals::StdStreamTraits
Reader	ArduinoJson/StringTraits/StdString.hpp	/^    Reader(const TString& str) : CharPointerTraits<char>::Reader(str.c_str()) {}$/;"	f	struct:ArduinoJson::Internals::StdStringTraits::Reader
Reader	ArduinoJson/StringTraits/StdString.hpp	/^  struct Reader : CharPointerTraits<char>::Reader {$/;"	s	struct:ArduinoJson::Internals::StdStringTraits
ReferenceType	ArduinoJson/Data/ReferenceType.hpp	/^  ReferenceType() {}$/;"	f	class:ArduinoJson::Internals::ReferenceType
ReferenceType	ArduinoJson/Data/ReferenceType.hpp	/^class ReferenceType {$/;"	c	namespace:ArduinoJson::Internals
RemoveConst	ArduinoJson/TypeTraits/RemoveConst.hpp	/^struct RemoveConst {$/;"	s	namespace:ArduinoJson::TypeTraits
RemoveConst	ArduinoJson/TypeTraits/RemoveConst.hpp	/^struct RemoveConst<const T> {$/;"	s	namespace:ArduinoJson::TypeTraits
RemoveReference	ArduinoJson/TypeTraits/RemoveReference.hpp	/^struct RemoveReference {$/;"	s	namespace:ArduinoJson::TypeTraits
RemoveReference	ArduinoJson/TypeTraits/RemoveReference.hpp	/^struct RemoveReference<T&> {$/;"	s	namespace:ArduinoJson::TypeTraits
SEMAPHORE_H	FreeRTOS/include/semphr.h	71;"	d
STACK_MACROS_H	FreeRTOS/include/StackMacros.h	71;"	d
SemaphoreHandle_t	FreeRTOS/include/semphr.h	/^typedef QueueHandle_t SemaphoreHandle_t;$/;"	t
StackType_t	FreeRTOS/include/portmacro.h	/^typedef portSTACK_TYPE StackType_t;$/;"	t
StaticEventGroup_t	FreeRTOS/include/FreeRTOS.h	/^} StaticEventGroup_t;$/;"	t	typeref:struct:xSTATIC_EVENT_GROUP
StaticJsonBuffer	ArduinoJson/StaticJsonBuffer.hpp	/^  explicit StaticJsonBuffer() : StaticJsonBufferBase(_buffer, CAPACITY) {}$/;"	f	class:ArduinoJson::StaticJsonBuffer
StaticJsonBuffer	ArduinoJson/StaticJsonBuffer.hpp	/^class StaticJsonBuffer : public StaticJsonBufferBase {$/;"	c	namespace:ArduinoJson
StaticJsonBufferBase	ArduinoJson/StaticJsonBuffer.hpp	/^  StaticJsonBufferBase(char* buffer, size_t capa)$/;"	f	class:ArduinoJson::StaticJsonBufferBase
StaticJsonBufferBase	ArduinoJson/StaticJsonBuffer.hpp	/^class StaticJsonBufferBase : public JsonBufferBase<StaticJsonBufferBase> {$/;"	c	namespace:ArduinoJson
StaticListItem_t	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST_ITEM StaticListItem_t;$/;"	t	typeref:struct:xSTATIC_LIST_ITEM
StaticList_t	FreeRTOS/include/FreeRTOS.h	/^} StaticList_t;$/;"	t	typeref:struct:xSTATIC_LIST
StaticMiniListItem_t	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;$/;"	t	typeref:struct:xSTATIC_MINI_LIST_ITEM
StaticQueue_t	FreeRTOS/include/FreeRTOS.h	/^} StaticQueue_t;$/;"	t	typeref:struct:xSTATIC_QUEUE
StaticSemaphore_t	FreeRTOS/include/FreeRTOS.h	/^typedef StaticQueue_t StaticSemaphore_t;$/;"	t
StaticStringBuilder	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^  StaticStringBuilder(char *buf, size_t size) : end(buf + size - 1), p(buf) {$/;"	f	class:ArduinoJson::Internals::StaticStringBuilder
StaticStringBuilder	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^class StaticStringBuilder {$/;"	c	namespace:ArduinoJson::Internals
StaticTask_t	FreeRTOS/include/FreeRTOS.h	/^} StaticTask_t;$/;"	t	typeref:struct:xSTATIC_TCB
StaticTimer_t	FreeRTOS/include/FreeRTOS.h	/^} StaticTimer_t;$/;"	t	typeref:struct:xSTATIC_TIMER
StdStreamTraits	ArduinoJson/StringTraits/StdStream.hpp	/^struct StdStreamTraits {$/;"	s	namespace:ArduinoJson::Internals
StdStringTraits	ArduinoJson/StringTraits/StdString.hpp	/^struct StdStringTraits {$/;"	s	namespace:ArduinoJson::Internals
StreamPrintAdapter	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^  explicit StreamPrintAdapter(std::ostream& os) : _os(os) {}$/;"	f	class:ArduinoJson::Internals::StreamPrintAdapter
StreamPrintAdapter	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^class StreamPrintAdapter {$/;"	c	namespace:ArduinoJson::Internals
String	ArduinoJson/Deserialization/StringWriter.hpp	/^    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}$/;"	f	class:ArduinoJson::Internals::StringWriter::String
String	ArduinoJson/Deserialization/StringWriter.hpp	/^  class String {$/;"	c	class:ArduinoJson::Internals::StringWriter
String	ArduinoJson/DynamicJsonBuffer.hpp	/^    String(DynamicJsonBufferBase* parent)$/;"	f	class:ArduinoJson::DynamicJsonBufferBase::String
String	ArduinoJson/DynamicJsonBuffer.hpp	/^  class String {$/;"	c	class:ArduinoJson::DynamicJsonBufferBase
String	ArduinoJson/StaticJsonBuffer.hpp	/^    String(StaticJsonBufferBase* parent) : _parent(parent) {$/;"	f	class:ArduinoJson::StaticJsonBufferBase::String
String	ArduinoJson/StaticJsonBuffer.hpp	/^  class String {$/;"	c	class:ArduinoJson::StaticJsonBufferBase
StringTraits	ArduinoJson/StringTraits/ArduinoStream.hpp	/^struct StringTraits<TStream,$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/CharPointer.hpp	/^struct StringTraits<TChar*, typename TypeTraits::EnableIf<$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/FlashString.hpp	/^struct StringTraits<const __FlashStringHelper*, void> {$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StdStream.hpp	/^struct StringTraits<TStream,$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StdString.hpp	/^struct StringTraits<String, void> : StdStringTraits<String> {};$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StdString.hpp	/^struct StringTraits<StringSumHelper, void> : StdStringTraits<StringSumHelper> {$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StdString.hpp	/^struct StringTraits<std::string, void> : StdStringTraits<std::string> {};$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StringTraits.hpp	/^struct StringTraits {};$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StringTraits.hpp	/^struct StringTraits<TString&, void> : StringTraits<TString> {};$/;"	s	namespace:ArduinoJson::Internals
StringTraits	ArduinoJson/StringTraits/StringTraits.hpp	/^struct StringTraits<const TString, void> : StringTraits<TString> {};$/;"	s	namespace:ArduinoJson::Internals
StringWriter	ArduinoJson/Deserialization/StringWriter.hpp	/^  StringWriter(TChar* buffer) : _ptr(buffer) {}$/;"	f	class:ArduinoJson::Internals::StringWriter
StringWriter	ArduinoJson/Deserialization/StringWriter.hpp	/^class StringWriter {$/;"	c	namespace:ArduinoJson::Internals
TCB_t	FreeRTOS/tasks.c	/^typedef tskTCB TCB_t;$/;"	t	file:
TIMERS_H	FreeRTOS/include/timers.h	72;"	d
TParser	ArduinoJson/Deserialization/JsonParser.hpp	/^  typedef JsonParser<InputReader, TJsonBuffer &> TParser;$/;"	t	struct:ArduinoJson::Internals::JsonParserBuilder
TParser	ArduinoJson/Deserialization/JsonParser.hpp	/^  typedef JsonParser<TReader, TWriter> TParser;$/;"	t	struct:ArduinoJson::Internals::JsonParserBuilder
TReader	ArduinoJson/Deserialization/JsonParser.hpp	/^  typedef typename Internals::StringTraits<TChar *>::Reader TReader;$/;"	t	struct:ArduinoJson::Internals::JsonParserBuilder
TWriter	ArduinoJson/Deserialization/JsonParser.hpp	/^  typedef StringWriter<TChar> TWriter;$/;"	t	struct:ArduinoJson::Internals::JsonParserBuilder
TaskFunction_t	FreeRTOS/include/projdefs.h	/^typedef void (*TaskFunction_t)( void * );$/;"	t
TaskHandle_t	FreeRTOS/include/task.h	/^typedef void * TaskHandle_t;$/;"	t
TaskHookFunction_t	FreeRTOS/include/task.h	/^typedef BaseType_t (*TaskHookFunction_t)( void * );$/;"	t
TaskParameters_t	FreeRTOS/include/task.h	/^} TaskParameters_t;$/;"	t	typeref:struct:xTASK_PARAMETERS
TaskStatus_t	FreeRTOS/include/task.h	/^} TaskStatus_t;$/;"	t	typeref:struct:xTASK_STATUS
TickType_t	FreeRTOS/include/portmacro.h	/^	typedef uint16_t TickType_t;$/;"	t
TickType_t	FreeRTOS/include/portmacro.h	/^	typedef uint32_t TickType_t;$/;"	t
TimeOut_t	FreeRTOS/include/task.h	/^} TimeOut_t;$/;"	t	typeref:struct:xTIME_OUT
TimerCallbackFunction_t	FreeRTOS/include/timers.h	/^typedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );$/;"	t
TimerHandle_t	FreeRTOS/include/timers.h	/^typedef void * TimerHandle_t;$/;"	t
TimerParameter_t	FreeRTOS/timers.c	/^} TimerParameter_t;$/;"	t	typeref:struct:tmrTimerParameters	file:
Timer_t	FreeRTOS/timers.c	/^typedef xTIMER Timer_t;$/;"	t	file:
TypeTraits	ArduinoJson/JsonVariantBase.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/StringTraits/StringTraits.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/EnableIf.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsArray.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsChar.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsConst.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsFloatingPoint.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsIntegral.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsSame.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsSignedIntegral.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/IsUnsignedIntegral.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/RemoveConst.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
TypeTraits	ArduinoJson/TypeTraits/RemoveReference.hpp	/^namespace TypeTraits {$/;"	n	namespace:ArduinoJson
UART0DR	src/test.c	/^volatile unsigned int * const UART0DR = (unsigned int *)0x4000C000;$/;"	v
UART0DR	test.c	/^volatile unsigned int * const UART0DR = (unsigned int *)0x4000C000;$/;"	v
UART0DR	test.cpp	/^volatile unsigned int * const UART0DR = (unsigned int *)0x4000C000;$/;"	v
UART0_ADDR	src/syscalls.c	/^  UART0_ADDR = 0x4000C000,$/;"	e	enum:__anon2	file:
UART_DR	src/syscalls.c	9;"	d	file:
UART_FR	src/syscalls.c	10;"	d	file:
UART_FR_RXFE	src/syscalls.c	/^  UART_FR_RXFE = 0x10,$/;"	e	enum:__anon2	file:
UART_FR_TXFF	src/syscalls.c	/^  UART_FR_TXFF = 0x20,$/;"	e	enum:__anon2	file:
UBaseType_t	FreeRTOS/include/portmacro.h	/^typedef unsigned long UBaseType_t;$/;"	t
ValueSetter	ArduinoJson/Data/ValueSetter.hpp	/^struct ValueSetter {$/;"	s	namespace:ArduinoJson::Internals
ValueSetter	ArduinoJson/Data/ValueSetter.hpp	/^struct ValueSetter<TSourceRef, typename TypeTraits::EnableIf<!StringTraits<$/;"	s	namespace:ArduinoJson::Internals
ValueSetter	ArduinoJson/Data/ValueSetter.hpp	/^struct ValueSetter<TSourceRef, typename TypeTraits::EnableIf<StringTraits<$/;"	s	namespace:ArduinoJson::Internals
Yes	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^  typedef char Yes[1];$/;"	t	class:ArduinoJson::TypeTraits::IsBaseOf
__cs3_reset	qemu/reset.S	/^__cs3_reset:$/;"	l
__cs3_start_asm	qemu/reset.S	/^__cs3_start_asm:$/;"	l
_allocator	ArduinoJson/DynamicJsonBuffer.hpp	/^  TAllocator _allocator;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase
_array	ArduinoJson/JsonArraySubscript.hpp	/^  JsonArray& _array;$/;"	m	class:ArduinoJson::JsonArraySubscript
_buffer	ArduinoJson/Data/List.hpp	/^  JsonBuffer *_buffer;$/;"	m	class:ArduinoJson::Internals::List
_buffer	ArduinoJson/Deserialization/JsonParser.hpp	/^  JsonBuffer *_buffer;$/;"	m	class:ArduinoJson::Internals::JsonParser
_buffer	ArduinoJson/StaticJsonBuffer.hpp	/^  char _buffer[CAPACITY];$/;"	m	class:ArduinoJson::StaticJsonBuffer
_buffer	ArduinoJson/StaticJsonBuffer.hpp	/^  char* _buffer;$/;"	m	class:ArduinoJson::StaticJsonBufferBase
_capacity	ArduinoJson/StaticJsonBuffer.hpp	/^  size_t _capacity;$/;"	m	class:ArduinoJson::StaticJsonBufferBase
_close	src/syscalls.c	/^int _close(int file) {$/;"	f
_content	ArduinoJson/JsonVariant.hpp	/^  Internals::JsonVariantContent _content;$/;"	m	class:ArduinoJson::JsonVariant
_current	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    char _current, _next;$/;"	m	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
_current	ArduinoJson/StringTraits/StdStream.hpp	/^    char _current, _next;$/;"	m	class:ArduinoJson::Internals::StdStreamTraits::Reader
_firstNode	ArduinoJson/Data/List.hpp	/^  node_type *_firstNode;$/;"	m	class:ArduinoJson::Internals::List
_fstat	src/syscalls.c	/^int _fstat(int file, struct stat *st) {$/;"	f
_head	ArduinoJson/DynamicJsonBuffer.hpp	/^  Block* _head;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase
_inString	ArduinoJson/Serialization/Prettyfier.hpp	/^  bool _inString;$/;"	m	class:ArduinoJson::Internals::Prettyfier
_index	ArduinoJson/JsonArraySubscript.hpp	/^  const size_t _index;$/;"	m	class:ArduinoJson::JsonArraySubscript
_isatty	src/syscalls.c	/^int _isatty(int file) {$/;"	f
_key	ArduinoJson/JsonObjectSubscript.hpp	/^  TStringRef _key;$/;"	m	class:ArduinoJson::JsonObjectSubscript
_length	ArduinoJson/DynamicJsonBuffer.hpp	/^    int _length;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase::String
_length	ArduinoJson/Serialization/JsonWriter.hpp	/^  size_t _length;$/;"	m	class:ArduinoJson::Internals::JsonWriter
_lseek	src/syscalls.c	/^int _lseek(int file, int ptr, int dir) {$/;"	f
_nestingLimit	ArduinoJson/Deserialization/JsonParser.hpp	/^  uint8_t _nestingLimit;$/;"	m	class:ArduinoJson::Internals::JsonParser
_next	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    char _current, _next;$/;"	m	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
_next	ArduinoJson/StringTraits/StdStream.hpp	/^    char _current, _next;$/;"	m	class:ArduinoJson::Internals::StdStreamTraits::Reader
_nextBlockCapacity	ArduinoJson/DynamicJsonBuffer.hpp	/^  size_t _nextBlockCapacity;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase
_node	ArduinoJson/Data/ListConstIterator.hpp	/^  const ListNode<T> *_node;$/;"	m	class:ArduinoJson::Internals::ListConstIterator
_node	ArduinoJson/Data/ListIterator.hpp	/^  ListNode<T> *_node;$/;"	m	class:ArduinoJson::Internals::ListIterator
_object	ArduinoJson/JsonObjectSubscript.hpp	/^  JsonObject& _object;$/;"	m	class:ArduinoJson::JsonObjectSubscript
_open	src/syscalls.c	/^int _open(const char *name, int flags, int mode) {$/;"	f
_os	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^  std::ostream& _os;$/;"	m	class:ArduinoJson::Internals::StreamPrintAdapter
_parent	ArduinoJson/DynamicJsonBuffer.hpp	/^    DynamicJsonBufferBase* _parent;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase::String
_parent	ArduinoJson/StaticJsonBuffer.hpp	/^    StaticJsonBufferBase* _parent;$/;"	m	class:ArduinoJson::StaticJsonBufferBase::String
_previousChar	ArduinoJson/Serialization/Prettyfier.hpp	/^  char _previousChar;$/;"	m	class:ArduinoJson::Internals::Prettyfier
_ptr	ArduinoJson/Deserialization/StringWriter.hpp	/^  TChar* _ptr;$/;"	m	class:ArduinoJson::Internals::StringWriter
_ptr	ArduinoJson/StringTraits/CharPointer.hpp	/^    const TChar* _ptr;$/;"	m	class:ArduinoJson::Internals::CharPointerTraits::Reader
_ptr	ArduinoJson/StringTraits/FlashString.hpp	/^    const char* _ptr;$/;"	m	class:ArduinoJson::Internals::StringTraits::Reader
_read	src/syscalls.c	/^int _read(int file, char *ptr, int len) {$/;"	f
_reader	ArduinoJson/Deserialization/JsonParser.hpp	/^  TReader _reader;$/;"	m	class:ArduinoJson::Internals::JsonParser
_sbrk	src/syscalls.c	/^caddr_t _sbrk(int incr) {$/;"	f
_sink	ArduinoJson/Serialization/JsonWriter.hpp	/^  Print &_sink;$/;"	m	class:ArduinoJson::Internals::JsonWriter
_sink	ArduinoJson/Serialization/Prettyfier.hpp	/^  IndentedPrint<Print>& _sink;$/;"	m	class:ArduinoJson::Internals::Prettyfier
_size	ArduinoJson/StaticJsonBuffer.hpp	/^  size_t _size;$/;"	m	class:ArduinoJson::StaticJsonBufferBase
_start	ArduinoJson/DynamicJsonBuffer.hpp	/^    char* _start;$/;"	m	class:ArduinoJson::DynamicJsonBufferBase::String
_start	ArduinoJson/StaticJsonBuffer.hpp	/^    char* _start;$/;"	m	class:ArduinoJson::StaticJsonBufferBase::String
_start	startup.s	/^_start:$/;"	l
_startPtr	ArduinoJson/Deserialization/StringWriter.hpp	/^    TChar* _startPtr;$/;"	m	class:ArduinoJson::Internals::StringWriter::String
_str	ArduinoJson/RawJson.hpp	/^  const char* _str;$/;"	m	class:ArduinoJson::RawJson
_str	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^  TString &_str;$/;"	m	class:ArduinoJson::Internals::DynamicStringBuilder
_stream	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    Stream& _stream;$/;"	m	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
_stream	ArduinoJson/StringTraits/StdStream.hpp	/^    std::istream& _stream;$/;"	m	class:ArduinoJson::Internals::StdStreamTraits::Reader
_type	ArduinoJson/JsonVariant.hpp	/^  Internals::JsonVariantType _type;$/;"	m	class:ArduinoJson::JsonVariant
_write	src/syscalls.c	/^int _write(int file, char *ptr, int len) {$/;"	f
_writePtr	ArduinoJson/Deserialization/StringWriter.hpp	/^    TChar** _writePtr;$/;"	m	class:ArduinoJson::Internals::StringWriter::String
_writer	ArduinoJson/Deserialization/JsonParser.hpp	/^  TWriter _writer;$/;"	m	class:ArduinoJson::Internals::JsonParser
add	ArduinoJson/Data/List.hpp	/^  iterator add() {$/;"	f	class:ArduinoJson::Internals::List
add	ArduinoJson/JsonArray.hpp	/^  bool add(T value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonArray
add	ArduinoJson/JsonArray.hpp	/^  bool add(const T *value) {$/;"	f	class:ArduinoJson::JsonArray
add	ArduinoJson/JsonArray.hpp	/^  typename TypeTraits::EnableIf<!TypeTraits::IsArray<T>::value, bool>::type add($/;"	f	class:ArduinoJson::JsonArray
add	test.cpp	/^void add() {$/;"	f
addNewBlock	ArduinoJson/DynamicJsonBuffer.hpp	/^  bool addNewBlock(size_t capacity) {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
add_impl	ArduinoJson/JsonArray.hpp	/^  bool add_impl(TValueRef value) {$/;"	f	class:ArduinoJson::JsonArray
alignNextAlloc	ArduinoJson/DynamicJsonBuffer.hpp	/^  void alignNextAlloc() {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
alignNextAlloc	ArduinoJson/StaticJsonBuffer.hpp	/^  void alignNextAlloc() {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
alloc	ArduinoJson/DynamicJsonBuffer.hpp	/^  virtual void* alloc(size_t bytes) {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
alloc	ArduinoJson/StaticJsonBuffer.hpp	/^  virtual void* alloc(size_t bytes) {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
allocInHead	ArduinoJson/DynamicJsonBuffer.hpp	/^  void* allocInHead(size_t bytes) {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
allocInNewBlock	ArduinoJson/DynamicJsonBuffer.hpp	/^  void* allocInNewBlock(size_t bytes) {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
allocate	ArduinoJson/DynamicJsonBuffer.hpp	/^  void* allocate(size_t size) {$/;"	f	class:ArduinoJson::DefaultAllocator
append	ArduinoJson/Deserialization/StringWriter.hpp	/^    void append(TChar c) {$/;"	f	class:ArduinoJson::Internals::StringWriter::String
append	ArduinoJson/DynamicJsonBuffer.hpp	/^    void append(char c) {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase::String
append	ArduinoJson/StaticJsonBuffer.hpp	/^    void append(char c) {$/;"	f	class:ArduinoJson::StaticJsonBufferBase::String
append	ArduinoJson/StringTraits/StdString.hpp	/^  static void append(TString& str, char c) {$/;"	f	struct:ArduinoJson::Internals::StdStringTraits
append	ArduinoJson/StringTraits/StdString.hpp	/^  static void append(TString& str, const char* s) {$/;"	f	struct:ArduinoJson::Internals::StdStringTraits
as	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE typename Internals::JsonVariantAs<T>::type as() const {$/;"	f	class:ArduinoJson::JsonArraySubscript
as	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type as() const {$/;"	f	class:ArduinoJson::JsonObjectSubscript
as	ArduinoJson/JsonVariant.hpp	/^  as() const {$/;"	f	class:ArduinoJson::JsonVariant
as	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE const typename Internals::JsonVariantAs<T>::type as() const {$/;"	f	class:ArduinoJson::JsonVariantBase
asArray	ArduinoJson/Data/JsonVariantContent.hpp	/^  JsonArray* asArray;    \/\/ asArray cannot be null$/;"	m	union:ArduinoJson::Internals::JsonVariantContent
asArray	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE JsonArray &asArray() const {$/;"	f	class:ArduinoJson::JsonVariantBase
asFloat	ArduinoJson/Data/JsonVariantContent.hpp	/^  JsonFloat asFloat;     \/\/ used for double and float$/;"	m	union:ArduinoJson::Internals::JsonVariantContent
asInteger	ArduinoJson/Data/JsonVariantContent.hpp	/^  JsonUInt asInteger;    \/\/ used for bool, char, short, int and longs$/;"	m	union:ArduinoJson::Internals::JsonVariantContent
asObject	ArduinoJson/Data/JsonVariantContent.hpp	/^  JsonObject* asObject;  \/\/ asObject cannot be null$/;"	m	union:ArduinoJson::Internals::JsonVariantContent
asObject	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE JsonObject &asObject() const {$/;"	f	class:ArduinoJson::JsonVariantBase
asString	ArduinoJson/Data/JsonVariantContent.hpp	/^  const char* asString;  \/\/ asString can be null$/;"	m	union:ArduinoJson::Internals::JsonVariantContent
asString	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE const char *asString() const {$/;"	f	class:ArduinoJson::JsonVariantBase
begin	ArduinoJson/Data/List.hpp	/^  const_iterator begin() const {$/;"	f	class:ArduinoJson::Internals::List
begin	ArduinoJson/Data/List.hpp	/^  iterator begin() {$/;"	f	class:ArduinoJson::Internals::List
beginArray	ArduinoJson/Serialization/JsonWriter.hpp	/^  void beginArray() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
beginObject	ArduinoJson/Serialization/JsonWriter.hpp	/^  void beginObject() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
bytesWritten	ArduinoJson/Serialization/JsonWriter.hpp	/^  size_t bytesWritten() const {$/;"	f	class:ArduinoJson::Internals::JsonWriter
cRxLock	FreeRTOS/queue.c	/^	volatile int8_t cRxLock;		\/*< Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. *\/$/;"	m	struct:QueueDefinition	file:
cTxLock	FreeRTOS/queue.c	/^	volatile int8_t cTxLock;		\/*< Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. *\/$/;"	m	struct:QueueDefinition	file:
c_entry	test.c	/^void c_entry() {$/;"	f
c_entry	test.cpp	/^void c_entry() {$/;"	f
c_str	ArduinoJson/Deserialization/StringWriter.hpp	/^    const char* c_str() const {$/;"	f	class:ArduinoJson::Internals::StringWriter::String
c_str	ArduinoJson/DynamicJsonBuffer.hpp	/^    const char* c_str() {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase::String
c_str	ArduinoJson/StaticJsonBuffer.hpp	/^    const char* c_str() const {$/;"	f	class:ArduinoJson::StaticJsonBufferBase::String
canAlloc	ArduinoJson/StaticJsonBuffer.hpp	/^  bool canAlloc(size_t bytes) const {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
canAllocInHead	ArduinoJson/DynamicJsonBuffer.hpp	/^  bool canAllocInHead(size_t bytes) const {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
capacity	ArduinoJson/DynamicJsonBuffer.hpp	/^    size_t capacity;$/;"	m	struct:ArduinoJson::DynamicJsonBufferBase::EmptyBlock
capacity	ArduinoJson/StaticJsonBuffer.hpp	/^  size_t capacity() const {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
configADJUSTED_HEAP_SIZE	FreeRTOS/portable/MemMang/heap_1.c	95;"	d	file:
configADJUSTED_HEAP_SIZE	FreeRTOS/portable/MemMang/heap_2.c	96;"	d	file:
configAPPLICATION_ALLOCATED_HEAP	FreeRTOS/include/FreeRTOS.h	764;"	d
configASSERT	FreeRTOS/include/FreeRTOS.h	276;"	d
configASSERT	src/FreeRTOSConfig.h	141;"	d
configASSERT	src/FreeRTOSConfig_m3.h	141;"	d
configASSERT_DEFINED	FreeRTOS/include/FreeRTOS.h	277;"	d
configASSERT_DEFINED	FreeRTOS/include/FreeRTOS.h	279;"	d
configCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/FreeRTOS.h	408;"	d
configCHECK_FOR_STACK_OVERFLOW	src/FreeRTOSConfig.h	111;"	d
configCHECK_FOR_STACK_OVERFLOW	src/FreeRTOSConfig_m3.h	111;"	d
configCPU_CLOCK_HZ	src/FreeRTOSConfig.h	100;"	d
configCPU_CLOCK_HZ	src/FreeRTOSConfig_m3.h	100;"	d
configENABLE_BACKWARD_COMPATIBILITY	FreeRTOS/include/FreeRTOS.h	820;"	d
configEXPECTED_IDLE_TIME_BEFORE_SLEEP	FreeRTOS/include/FreeRTOS.h	700;"	d
configGENERATE_RUN_TIME_STATS	FreeRTOS/include/FreeRTOS.h	662;"	d
configGENERATE_RUN_TIME_STATS	src/FreeRTOSConfig.h	116;"	d
configGENERATE_RUN_TIME_STATS	src/FreeRTOSConfig_m3.h	116;"	d
configIDLE_SHOULD_YIELD	FreeRTOS/include/FreeRTOS.h	268;"	d
configIDLE_SHOULD_YIELD	src/FreeRTOSConfig.h	108;"	d
configIDLE_SHOULD_YIELD	src/FreeRTOSConfig_m3.h	108;"	d
configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS	FreeRTOS/include/FreeRTOS.h	732;"	d
configKERNEL_INTERRUPT_PRIORITY	FreeRTOS/portable/GCC/ARM_CM3/port.c	78;"	d	file:
configLIST_VOLATILE	FreeRTOS/include/list.h	134;"	d
configMAX_CO_ROUTINE_PRIORITIES	src/FreeRTOSConfig.h	120;"	d
configMAX_CO_ROUTINE_PRIORITIES	src/FreeRTOSConfig_m3.h	120;"	d
configMAX_PRIORITIES	src/FreeRTOSConfig.h	102;"	d
configMAX_PRIORITIES	src/FreeRTOSConfig_m3.h	102;"	d
configMAX_SYSCALL_INTERRUPT_PRIORITY	src/FreeRTOSConfig.h	121;"	d
configMAX_SYSCALL_INTERRUPT_PRIORITY	src/FreeRTOSConfig_m3.h	121;"	d
configMAX_TASK_NAME_LEN	FreeRTOS/include/FreeRTOS.h	264;"	d
configMAX_TASK_NAME_LEN	src/FreeRTOSConfig.h	105;"	d
configMAX_TASK_NAME_LEN	src/FreeRTOSConfig_m3.h	105;"	d
configMINIMAL_STACK_SIZE	src/FreeRTOSConfig.h	103;"	d
configMINIMAL_STACK_SIZE	src/FreeRTOSConfig_m3.h	103;"	d
configNUM_THREAD_LOCAL_STORAGE_POINTERS	FreeRTOS/include/FreeRTOS.h	236;"	d
configPOST_SLEEP_PROCESSING	FreeRTOS/include/FreeRTOS.h	716;"	d
configPRE_SLEEP_PROCESSING	FreeRTOS/include/FreeRTOS.h	712;"	d
configQUEUE_REGISTRY_SIZE	FreeRTOS/include/FreeRTOS.h	320;"	d
configQUEUE_REGISTRY_SIZE	src/FreeRTOSConfig.h	110;"	d
configQUEUE_REGISTRY_SIZE	src/FreeRTOSConfig_m3.h	110;"	d
configSUPPORT_DYNAMIC_ALLOCATION	FreeRTOS/include/FreeRTOS.h	782;"	d
configSUPPORT_STATIC_ALLOCATION	FreeRTOS/include/FreeRTOS.h	777;"	d
configSYSTICK_CLOCK_HZ	FreeRTOS/portable/GCC/ARM_CM3/port.c	82;"	d	file:
configTICK_RATE_HZ	src/FreeRTOSConfig.h	101;"	d
configTICK_RATE_HZ	src/FreeRTOSConfig_m3.h	101;"	d
configTIMER_QUEUE_LENGTH	src/FreeRTOSConfig.h	125;"	d
configTIMER_QUEUE_LENGTH	src/FreeRTOSConfig_m3.h	125;"	d
configTIMER_TASK_PRIORITY	src/FreeRTOSConfig.h	124;"	d
configTIMER_TASK_PRIORITY	src/FreeRTOSConfig_m3.h	124;"	d
configTIMER_TASK_STACK_DEPTH	src/FreeRTOSConfig.h	126;"	d
configTIMER_TASK_STACK_DEPTH	src/FreeRTOSConfig_m3.h	126;"	d
configTOTAL_HEAP_SIZE	src/FreeRTOSConfig.h	104;"	d
configTOTAL_HEAP_SIZE	src/FreeRTOSConfig_m3.h	104;"	d
configUSE_16_BIT_TICKS	src/FreeRTOSConfig.h	107;"	d
configUSE_16_BIT_TICKS	src/FreeRTOSConfig_m3.h	107;"	d
configUSE_ALTERNATIVE_API	FreeRTOS/include/FreeRTOS.h	256;"	d
configUSE_APPLICATION_TASK_TAG	FreeRTOS/include/FreeRTOS.h	232;"	d
configUSE_APPLICATION_TASK_TAG	src/FreeRTOSConfig.h	114;"	d
configUSE_APPLICATION_TASK_TAG	src/FreeRTOSConfig_m3.h	114;"	d
configUSE_COUNTING_SEMAPHORES	FreeRTOS/include/FreeRTOS.h	252;"	d
configUSE_COUNTING_SEMAPHORES	src/FreeRTOSConfig.h	115;"	d
configUSE_COUNTING_SEMAPHORES	src/FreeRTOSConfig_m3.h	115;"	d
configUSE_CO_ROUTINES	FreeRTOS/include/FreeRTOS.h	150;"	d
configUSE_CO_ROUTINES	src/FreeRTOSConfig.h	119;"	d
configUSE_CO_ROUTINES	src/FreeRTOSConfig_m3.h	119;"	d
configUSE_DAEMON_TASK_STARTUP_HOOK	FreeRTOS/include/FreeRTOS.h	228;"	d
configUSE_IDLE_HOOK	src/FreeRTOSConfig.h	98;"	d
configUSE_IDLE_HOOK	src/FreeRTOSConfig_m3.h	98;"	d
configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES	FreeRTOS/include/projdefs.h	101;"	d
configUSE_MALLOC_FAILED_HOOK	FreeRTOS/include/FreeRTOS.h	684;"	d
configUSE_MALLOC_FAILED_HOOK	src/FreeRTOSConfig.h	113;"	d
configUSE_MALLOC_FAILED_HOOK	src/FreeRTOSConfig_m3.h	113;"	d
configUSE_MUTEXES	FreeRTOS/include/FreeRTOS.h	244;"	d
configUSE_MUTEXES	src/FreeRTOSConfig.h	109;"	d
configUSE_MUTEXES	src/FreeRTOSConfig_m3.h	109;"	d
configUSE_NEWLIB_REENTRANT	FreeRTOS/include/FreeRTOS.h	108;"	d
configUSE_PORT_OPTIMISED_TASK_SELECTION	FreeRTOS/include/FreeRTOS.h	760;"	d
configUSE_PREEMPTION	src/FreeRTOSConfig.h	97;"	d
configUSE_PREEMPTION	src/FreeRTOSConfig_m3.h	97;"	d
configUSE_QUEUE_SETS	FreeRTOS/include/FreeRTOS.h	720;"	d
configUSE_RECURSIVE_MUTEXES	FreeRTOS/include/FreeRTOS.h	240;"	d
configUSE_RECURSIVE_MUTEXES	src/FreeRTOSConfig.h	112;"	d
configUSE_RECURSIVE_MUTEXES	src/FreeRTOSConfig_m3.h	112;"	d
configUSE_STATS_FORMATTING_FUNCTIONS	FreeRTOS/include/FreeRTOS.h	736;"	d
configUSE_TASK_FPU_SUPPORT	FreeRTOS/include/FreeRTOS.h	861;"	d
configUSE_TASK_NOTIFICATIONS	FreeRTOS/include/FreeRTOS.h	768;"	d
configUSE_TICKLESS_IDLE	FreeRTOS/include/FreeRTOS.h	708;"	d
configUSE_TICK_HOOK	src/FreeRTOSConfig.h	99;"	d
configUSE_TICK_HOOK	src/FreeRTOSConfig_m3.h	99;"	d
configUSE_TIMERS	FreeRTOS/include/FreeRTOS.h	248;"	d
configUSE_TIMERS	src/FreeRTOSConfig.h	123;"	d
configUSE_TIMERS	src/FreeRTOSConfig_m3.h	123;"	d
configUSE_TIME_SLICING	FreeRTOS/include/FreeRTOS.h	728;"	d
configUSE_TRACE_FACILITY	FreeRTOS/include/FreeRTOS.h	744;"	d
configUSE_TRACE_FACILITY	src/FreeRTOSConfig.h	106;"	d
configUSE_TRACE_FACILITY	src/FreeRTOSConfig_m3.h	106;"	d
const_iterator	ArduinoJson/Data/List.hpp	/^  typedef ListConstIterator<T> const_iterator;$/;"	t	class:ArduinoJson::Internals::List
containsKey	ArduinoJson/JsonObject.hpp	/^  bool containsKey(const TString* key) const {$/;"	f	class:ArduinoJson::JsonObject
containsKey	ArduinoJson/JsonObject.hpp	/^  containsKey(const TString& key) const {$/;"	f	class:ArduinoJson::JsonObject
content	ArduinoJson/Data/ListNode.hpp	/^  T content;$/;"	m	struct:ArduinoJson::Internals::ListNode
copyFrom	ArduinoJson/JsonArray.hpp	/^  bool copyFrom(T *array, size_t len) {$/;"	f	class:ArduinoJson::JsonArray
copyTo	ArduinoJson/JsonArray.hpp	/^  size_t copyTo(T *array, size_t len) const {$/;"	f	class:ArduinoJson::JsonArray
corCoRoutineControlBlock	FreeRTOS/include/croutine.h	/^typedef struct corCoRoutineControlBlock$/;"	s
corINITIAL_STATE	FreeRTOS/croutine.c	100;"	d	file:
crCOROUTINE_CODE	FreeRTOS/include/croutine.h	/^typedef void (*crCOROUTINE_CODE)( CoRoutineHandle_t, UBaseType_t );$/;"	t
crDELAY	FreeRTOS/include/croutine.h	332;"	d
crEND	FreeRTOS/include/croutine.h	277;"	d
crQUEUE_RECEIVE	FreeRTOS/include/croutine.h	514;"	d
crQUEUE_RECEIVE_FROM_ISR	FreeRTOS/include/croutine.h	736;"	d
crQUEUE_SEND	FreeRTOS/include/croutine.h	422;"	d
crQUEUE_SEND_FROM_ISR	FreeRTOS/include/croutine.h	623;"	d
crSET_STATE0	FreeRTOS/include/croutine.h	283;"	d
crSET_STATE1	FreeRTOS/include/croutine.h	284;"	d
crSTART	FreeRTOS/include/croutine.h	246;"	d
createArray	ArduinoJson/JsonBufferImpl.hpp	/^inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {$/;"	f	class:ArduinoJson::JsonBuffer
createNestedArray	ArduinoJson/JsonArrayImpl.hpp	/^inline JsonArray &JsonArray::createNestedArray() {$/;"	f	class:ArduinoJson::JsonArray
createNestedArray	ArduinoJson/JsonObject.hpp	/^  JsonArray& createNestedArray(const TString* key) {$/;"	f	class:ArduinoJson::JsonObject
createNestedArray	ArduinoJson/JsonObject.hpp	/^  createNestedArray(const TString& key) {$/;"	f	class:ArduinoJson::JsonObject
createNestedArray_impl	ArduinoJson/JsonObjectImpl.hpp	/^inline JsonArray &JsonObject::createNestedArray_impl(TStringRef key) {$/;"	f	class:ArduinoJson::JsonObject
createNestedObject	ArduinoJson/JsonArrayImpl.hpp	/^inline JsonObject &JsonArray::createNestedObject() {$/;"	f	class:ArduinoJson::JsonArray
createNestedObject	ArduinoJson/JsonObject.hpp	/^  JsonObject& createNestedObject(const TString* key) {$/;"	f	class:ArduinoJson::JsonObject
createNestedObject	ArduinoJson/JsonObject.hpp	/^  createNestedObject(const TString& key) {$/;"	f	class:ArduinoJson::JsonObject
createNestedObject_impl	ArduinoJson/JsonObjectImpl.hpp	/^inline JsonObject &JsonObject::createNestedObject_impl(TStringRef key) {$/;"	f	class:ArduinoJson::JsonObject
createObject	ArduinoJson/JsonBufferImpl.hpp	/^inline ArduinoJson::JsonObject &ArduinoJson::JsonBuffer::createObject() {$/;"	f	class:ArduinoJson::JsonBuffer
current	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    char current() {$/;"	f	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
current	ArduinoJson/StringTraits/CharPointer.hpp	/^    TChar current() const {$/;"	f	class:ArduinoJson::Internals::CharPointerTraits::Reader
current	ArduinoJson/StringTraits/FlashString.hpp	/^    char current() const {$/;"	f	class:ArduinoJson::Internals::StringTraits::Reader
current	ArduinoJson/StringTraits/StdStream.hpp	/^    char current() {$/;"	f	class:ArduinoJson::Internals::StdStreamTraits::Reader
data	ArduinoJson/DynamicJsonBuffer.hpp	/^    uint8_t data[1];$/;"	m	struct:ArduinoJson::DynamicJsonBufferBase::Block
deallocate	ArduinoJson/DynamicJsonBuffer.hpp	/^  void deallocate(void* pointer) {$/;"	f	class:ArduinoJson::DefaultAllocator
doAlloc	ArduinoJson/StaticJsonBuffer.hpp	/^  void* doAlloc(size_t bytes) {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
double_with_n_digits	ArduinoJson/JsonVariant.hpp	/^inline JsonVariant double_with_n_digits(double value, uint8_t digits) {$/;"	f	namespace:ArduinoJson
downcast	ArduinoJson/Serialization/JsonPrintable.hpp	/^  const T &downcast() const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
duplicate	ArduinoJson/StringTraits/CharPointer.hpp	/^  static char* duplicate(const TChar* str, Buffer* buffer) {$/;"	f	struct:ArduinoJson::Internals::CharPointerTraits
duplicate	ArduinoJson/StringTraits/FlashString.hpp	/^  static char* duplicate(const __FlashStringHelper* str, Buffer* buffer) {$/;"	f	struct:ArduinoJson::Internals::StringTraits
duplicate	ArduinoJson/StringTraits/StdString.hpp	/^  static char* duplicate(const TString& str, Buffer* buffer) {$/;"	f	struct:ArduinoJson::Internals::StdStringTraits
eAbortSleep	FreeRTOS/include/task.h	/^	eAbortSleep = 0,		\/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. *\/$/;"	e	enum:__anon7
eBlocked	FreeRTOS/include/task.h	/^	eBlocked,		\/* The task being queried is in the Blocked state. *\/$/;"	e	enum:__anon5
eCurrentState	FreeRTOS/include/task.h	/^	eTaskState eCurrentState;		\/* The state in which the task existed when the structure was populated. *\/$/;"	m	struct:xTASK_STATUS
eDeleted	FreeRTOS/include/task.h	/^	eDeleted,		\/* The task being queried has been deleted, but its TCB has not yet been freed. *\/$/;"	e	enum:__anon5
eIncrement	FreeRTOS/include/task.h	/^	eIncrement,					\/* Increment the task's notification value. *\/$/;"	e	enum:__anon6
eInvalid	FreeRTOS/include/task.h	/^	eInvalid			\/* Used as an 'invalid state' value. *\/$/;"	e	enum:__anon5
eNoAction	FreeRTOS/include/task.h	/^	eNoAction = 0,				\/* Notify the task without updating its notify value. *\/$/;"	e	enum:__anon6
eNoTasksWaitingTimeout	FreeRTOS/include/task.h	/^	eNoTasksWaitingTimeout	\/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. *\/$/;"	e	enum:__anon7
eNotifyAction	FreeRTOS/include/task.h	/^} eNotifyAction;$/;"	t	typeref:enum:__anon6
eReady	FreeRTOS/include/task.h	/^	eReady,			\/* The task being queried is in a read or pending ready list. *\/$/;"	e	enum:__anon5
eRunning	FreeRTOS/include/task.h	/^	eRunning = 0,	\/* A task is querying the state of itself, so must be running. *\/$/;"	e	enum:__anon5
eSetBits	FreeRTOS/include/task.h	/^	eSetBits,					\/* Set bits in the task's notification value. *\/$/;"	e	enum:__anon6
eSetValueWithOverwrite	FreeRTOS/include/task.h	/^	eSetValueWithOverwrite,		\/* Set the task's notification value to a specific value even if the previous value has not yet been read by the task. *\/$/;"	e	enum:__anon6
eSetValueWithoutOverwrite	FreeRTOS/include/task.h	/^	eSetValueWithoutOverwrite	\/* Set the task's notification value if the previous value has been read by the task. *\/$/;"	e	enum:__anon6
eSleepModeStatus	FreeRTOS/include/task.h	/^} eSleepModeStatus;$/;"	t	typeref:enum:__anon7
eStandardSleep	FreeRTOS/include/task.h	/^	eStandardSleep,			\/* Enter a sleep mode that will not last any longer than the expected idle time. *\/$/;"	e	enum:__anon7
eSuspended	FreeRTOS/include/task.h	/^	eSuspended,		\/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. *\/$/;"	e	enum:__anon5
eTaskConfirmSleepModeStatus	FreeRTOS/tasks.c	/^	eSleepModeStatus eTaskConfirmSleepModeStatus( void )$/;"	f
eTaskGetState	FreeRTOS/include/mpu_wrappers.h	100;"	d
eTaskGetState	FreeRTOS/tasks.c	/^	eTaskState eTaskGetState( TaskHandle_t xTask )$/;"	f
eTaskState	FreeRTOS/include/task.h	/^} eTaskState;$/;"	t	typeref:enum:__anon5
eTaskStateGet	FreeRTOS/include/FreeRTOS.h	824;"	d
eat	ArduinoJson/Deserialization/JsonParser.hpp	/^  FORCE_INLINE bool eat(char charToSkip) {$/;"	f	class:ArduinoJson::Internals::JsonParser
eat	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat($/;"	f	class:ArduinoJson::Internals::JsonParser
end	ArduinoJson/Data/List.hpp	/^  const_iterator end() const {$/;"	f	class:ArduinoJson::Internals::List
end	ArduinoJson/Data/List.hpp	/^  iterator end() {$/;"	f	class:ArduinoJson::Internals::List
end	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^  char *end;$/;"	m	class:ArduinoJson::Internals::StaticStringBuilder
endArray	ArduinoJson/Serialization/JsonWriter.hpp	/^  void endArray() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
endObject	ArduinoJson/Serialization/JsonWriter.hpp	/^  void endObject() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
equals	ArduinoJson/Data/JsonVariantComparer.hpp	/^  static bool equals(const JsonVariantBase<TVariant1> &left,$/;"	f	struct:ArduinoJson::Internals::JsonVariantComparer
equals	ArduinoJson/Data/JsonVariantComparer.hpp	/^  static bool equals(const JsonVariantBase<TVariant> &variant,$/;"	f	struct:ArduinoJson::Internals::JsonVariantComparer
equals	ArduinoJson/StringTraits/CharPointer.hpp	/^  static bool equals(const TChar* str, const char* expected) {$/;"	f	struct:ArduinoJson::Internals::CharPointerTraits
equals	ArduinoJson/StringTraits/FlashString.hpp	/^  static bool equals(const __FlashStringHelper* str, const char* expected) {$/;"	f	struct:ArduinoJson::Internals::StringTraits
equals	ArduinoJson/StringTraits/StdString.hpp	/^  static bool equals(const TString& str, const char* expected) {$/;"	f	struct:ArduinoJson::Internals::StdStringTraits
errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	FreeRTOS/include/projdefs.h	95;"	d
errQUEUE_BLOCKED	FreeRTOS/include/projdefs.h	96;"	d
errQUEUE_EMPTY	FreeRTOS/include/projdefs.h	91;"	d
errQUEUE_FULL	FreeRTOS/include/projdefs.h	92;"	d
errQUEUE_YIELD	FreeRTOS/include/projdefs.h	97;"	d
escapeChar	ArduinoJson/Data/Encoding.hpp	/^  static char escapeChar(char c) {$/;"	f	class:ArduinoJson::Internals::Encoding
escapeTable	ArduinoJson/Data/Encoding.hpp	/^  static const char *escapeTable(bool excludeIdenticals) {$/;"	f	class:ArduinoJson::Internals::Encoding
eventCLEAR_EVENTS_ON_EXIT_BIT	FreeRTOS/event_groups.c	94;"	d	file:
eventCLEAR_EVENTS_ON_EXIT_BIT	FreeRTOS/event_groups.c	99;"	d	file:
eventEVENT_BITS_CONTROL_BYTES	FreeRTOS/event_groups.c	102;"	d	file:
eventEVENT_BITS_CONTROL_BYTES	FreeRTOS/event_groups.c	97;"	d	file:
eventUNBLOCKED_DUE_TO_BIT_SET	FreeRTOS/event_groups.c	100;"	d	file:
eventUNBLOCKED_DUE_TO_BIT_SET	FreeRTOS/event_groups.c	95;"	d	file:
eventWAIT_FOR_ALL_BITS	FreeRTOS/event_groups.c	101;"	d	file:
eventWAIT_FOR_ALL_BITS	FreeRTOS/event_groups.c	96;"	d	file:
exponent_max	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static const exponent_type exponent_max = 308;$/;"	m	struct:ArduinoJson::TypeTraits::FloatTraits
exponent_max	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static const exponent_type exponent_max = 38;$/;"	m	struct:ArduinoJson::TypeTraits::FloatTraits
exponent_type	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  typedef int16_t exponent_type;$/;"	t	struct:ArduinoJson::TypeTraits::FloatTraits
exponent_type	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  typedef int8_t exponent_type;$/;"	t	struct:ArduinoJson::TypeTraits::FloatTraits
findKey	ArduinoJson/JsonObject.hpp	/^  const_iterator findKey(TStringRef key) const {$/;"	f	class:ArduinoJson::JsonObject
findKey	ArduinoJson/JsonObject.hpp	/^  iterator findKey(TStringRef key) {$/;"	f	class:ArduinoJson::JsonObject
float_with_n_digits	ArduinoJson/JsonVariant.hpp	/^inline JsonVariant float_with_n_digits(float value, uint8_t digits) {$/;"	f	namespace:ArduinoJson
get	ArduinoJson/Data/JsonVariantDefault.hpp	/^  static T get() {$/;"	f	struct:ArduinoJson::Internals::JsonVariantDefault
get	ArduinoJson/JsonArray.hpp	/^  static JsonArray &get() {$/;"	f	struct:ArduinoJson::Internals::JsonVariantDefault
get	ArduinoJson/JsonArray.hpp	/^  typename Internals::JsonVariantAs<T>::type get(size_t index) const {$/;"	f	class:ArduinoJson::JsonArray
get	ArduinoJson/JsonObject.hpp	/^  get(const TString& key) const {$/;"	f	class:ArduinoJson::JsonObject
get	ArduinoJson/JsonObject.hpp	/^  static JsonObject& get() {$/;"	f	struct:ArduinoJson::Internals::JsonVariantDefault
get	ArduinoJson/JsonObject.hpp	/^  typename Internals::JsonVariantAs<TValue>::type get($/;"	f	class:ArduinoJson::JsonObject
getLastDigit	ArduinoJson/Serialization/JsonWriter.hpp	/^  static JsonFloat getLastDigit(uint8_t digits) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
getRoundingBias	ArduinoJson/Serialization/JsonWriter.hpp	/^  FORCE_INLINE static JsonFloat getRoundingBias(uint8_t digits) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
get_impl	ArduinoJson/JsonObject.hpp	/^  typename Internals::JsonVariantAs<TValue>::type get_impl($/;"	f	class:ArduinoJson::JsonObject
handleMarkupChar	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t handleMarkupChar(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
handleStringChar	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t handleStringChar(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
has_append	ArduinoJson/StringTraits/CharPointer.hpp	/^  static const bool has_append = false;$/;"	m	struct:ArduinoJson::Internals::CharPointerTraits
has_append	ArduinoJson/StringTraits/FlashString.hpp	/^  static const bool has_append = false;$/;"	m	struct:ArduinoJson::Internals::StringTraits
has_append	ArduinoJson/StringTraits/StdString.hpp	/^  static const bool has_append = true;$/;"	m	struct:ArduinoJson::Internals::StdStringTraits
has_equals	ArduinoJson/StringTraits/CharPointer.hpp	/^  static const bool has_equals = true;$/;"	m	struct:ArduinoJson::Internals::CharPointerTraits
has_equals	ArduinoJson/StringTraits/FlashString.hpp	/^  static const bool has_equals = true;$/;"	m	struct:ArduinoJson::Internals::StringTraits
has_equals	ArduinoJson/StringTraits/StdString.hpp	/^  static const bool has_equals = true;$/;"	m	struct:ArduinoJson::Internals::StdStringTraits
heapBITS_PER_BYTE	FreeRTOS/portable/MemMang/heap_4.c	98;"	d	file:
heapBITS_PER_BYTE	FreeRTOS/portable/MemMang/heap_5.c	132;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/portable/MemMang/heap_2.c	123;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/portable/MemMang/heap_4.c	95;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/portable/MemMang/heap_5.c	129;"	d	file:
heapSTRUCT_SIZE	FreeRTOS/portable/MemMang/heap_2.c	/^static const uint16_t heapSTRUCT_SIZE	= ( ( sizeof ( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~portBYTE_ALIGNMENT_MASK );$/;"	v	file:
heap_end	src/syscalls.c	/^static char *heap_end = 0;$/;"	v	file:
impl	ArduinoJson/JsonVariantBase.hpp	/^  const TImpl *impl() const {$/;"	f	class:ArduinoJson::JsonVariantBase
inEmptyBlock	ArduinoJson/Serialization/Prettyfier.hpp	/^  bool inEmptyBlock() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
indent	ArduinoJson/Serialization/IndentedPrint.hpp	/^  void indent() {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
indentIfNeeded	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t indentIfNeeded() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
inf	ArduinoJson/Polyfills/math.hpp	/^T inf() {$/;"	f	namespace:ArduinoJson::Polyfills
inf	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static T inf() {$/;"	f	struct:ArduinoJson::TypeTraits::FloatTraits
invalid	ArduinoJson/JsonArray.hpp	/^  static JsonArray &invalid() {$/;"	f	class:ArduinoJson::JsonArray
invalid	ArduinoJson/JsonObject.hpp	/^  static JsonObject& invalid() {$/;"	f	class:ArduinoJson::JsonObject
is	ArduinoJson/JsonArray.hpp	/^  bool is(size_t index) const {$/;"	f	class:ArduinoJson::JsonArray
is	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE bool is() const {$/;"	f	class:ArduinoJson::JsonArraySubscript
is	ArduinoJson/JsonObject.hpp	/^  bool is(const TString* key) const {$/;"	f	class:ArduinoJson::JsonObject
is	ArduinoJson/JsonObject.hpp	/^  is(const TString& key) const {$/;"	f	class:ArduinoJson::JsonObject
is	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE bool is() const {$/;"	f	class:ArduinoJson::JsonObjectSubscript
is	ArduinoJson/JsonVariant.hpp	/^  is() const {$/;"	f	class:ArduinoJson::JsonVariant
is	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE bool is() const {$/;"	f	class:ArduinoJson::JsonVariantBase
isFloat	ArduinoJson/Polyfills/isFloat.hpp	/^inline bool isFloat(const char* s) {$/;"	f	namespace:ArduinoJson::Polyfills
isInRange	ArduinoJson/Deserialization/JsonParser.hpp	/^  static inline bool isInRange(char c, char min, char max) {$/;"	f	class:ArduinoJson::Internals::JsonParser
isInfinity	ArduinoJson/Polyfills/math.hpp	/^bool isInfinity(T x) {$/;"	f	namespace:ArduinoJson::Polyfills
isInteger	ArduinoJson/Polyfills/isInteger.hpp	/^inline bool isInteger(const char* s) {$/;"	f	namespace:ArduinoJson::Polyfills
isLetterOrNumber	ArduinoJson/Deserialization/JsonParser.hpp	/^  static inline bool isLetterOrNumber(char c) {$/;"	f	class:ArduinoJson::Internals::JsonParser
isNaN	ArduinoJson/Polyfills/math.hpp	/^bool isNaN(T x) {$/;"	f	namespace:ArduinoJson::Polyfills
isQuote	ArduinoJson/Deserialization/JsonParser.hpp	/^  static inline bool isQuote(char c) {$/;"	f	class:ArduinoJson::Internals::JsonParser
is_impl	ArduinoJson/JsonObject.hpp	/^  bool is_impl(TStringRef key) const {$/;"	f	class:ArduinoJson::JsonObject
isdigit	ArduinoJson/Polyfills/ctype.hpp	/^inline bool isdigit(char c) {$/;"	f	namespace:ArduinoJson::Polyfills
issign	ArduinoJson/Polyfills/ctype.hpp	/^inline bool issign(char c) {$/;"	f	namespace:ArduinoJson::Polyfills
iterator	ArduinoJson/Data/List.hpp	/^  typedef ListIterator<T> iterator;$/;"	t	class:ArduinoJson::Internals::List
key	ArduinoJson/JsonPair.hpp	/^  const char* key;$/;"	m	struct:ArduinoJson::JsonPair
listCURRENT_LIST_LENGTH	FreeRTOS/include/list.h	296;"	d
listFIRST_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	150;"	d
listFIRST_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	162;"	d
listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	148;"	d
listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	160;"	d
listGET_END_MARKER	FreeRTOS/include/list.h	282;"	d
listGET_HEAD_ENTRY	FreeRTOS/include/list.h	266;"	d
listGET_ITEM_VALUE_OF_HEAD_ENTRY	FreeRTOS/include/list.h	258;"	d
listGET_LIST_ITEM_OWNER	FreeRTOS/include/list.h	230;"	d
listGET_LIST_ITEM_VALUE	FreeRTOS/include/list.h	249;"	d
listGET_NEXT	FreeRTOS/include/list.h	274;"	d
listGET_OWNER_OF_HEAD_ENTRY	FreeRTOS/include/list.h	348;"	d
listGET_OWNER_OF_NEXT_ENTRY	FreeRTOS/include/list.h	318;"	d
listIS_CONTAINED_WITHIN	FreeRTOS/include/list.h	359;"	d
listLIST_IS_EMPTY	FreeRTOS/include/list.h	291;"	d
listLIST_IS_INITIALISED	FreeRTOS/include/list.h	374;"	d
listLIST_ITEM_CONTAINER	FreeRTOS/include/list.h	367;"	d
listSECOND_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	151;"	d
listSECOND_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	163;"	d
listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	149;"	d
listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	161;"	d
listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	152;"	d
listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	166;"	d
listSET_LIST_INTEGRITY_CHECK_1_VALUE	FreeRTOS/include/list.h	154;"	d
listSET_LIST_INTEGRITY_CHECK_1_VALUE	FreeRTOS/include/list.h	168;"	d
listSET_LIST_INTEGRITY_CHECK_2_VALUE	FreeRTOS/include/list.h	155;"	d
listSET_LIST_INTEGRITY_CHECK_2_VALUE	FreeRTOS/include/list.h	169;"	d
listSET_LIST_ITEM_OWNER	FreeRTOS/include/list.h	221;"	d
listSET_LIST_ITEM_VALUE	FreeRTOS/include/list.h	239;"	d
listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	153;"	d
listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/include/list.h	167;"	d
listTEST_LIST_INTEGRITY	FreeRTOS/include/list.h	157;"	d
listTEST_LIST_INTEGRITY	FreeRTOS/include/list.h	174;"	d
listTEST_LIST_ITEM_INTEGRITY	FreeRTOS/include/list.h	156;"	d
listTEST_LIST_ITEM_INTEGRITY	FreeRTOS/include/list.h	173;"	d
main	src/test.c	/^void main() {$/;"	f
makeParser	ArduinoJson/Deserialization/JsonParser.hpp	/^  static TParser makeParser(TJsonBuffer *buffer, TChar *json,$/;"	f	struct:ArduinoJson::Internals::JsonParserBuilder
makeParser	ArduinoJson/Deserialization/JsonParser.hpp	/^  static TParser makeParser(TJsonBuffer *buffer, TString &json,$/;"	f	struct:ArduinoJson::Internals::JsonParserBuilder
makeParser	ArduinoJson/Deserialization/JsonParser.hpp	/^inline typename JsonParserBuilder<TJsonBuffer, TString>::TParser makeParser($/;"	f	namespace:ArduinoJson::Internals
make_float	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static T make_float(T m, TExponent e) {$/;"	f	struct:ArduinoJson::TypeTraits::FloatTraits
mantissa_bits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static const short mantissa_bits = 23;$/;"	m	struct:ArduinoJson::TypeTraits::FloatTraits
mantissa_bits	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static const short mantissa_bits = 52;$/;"	m	struct:ArduinoJson::TypeTraits::FloatTraits
mantissa_max	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static const mantissa_type mantissa_max =$/;"	m	struct:ArduinoJson::TypeTraits::FloatTraits
mantissa_type	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  typedef int32_t mantissa_type;$/;"	t	struct:ArduinoJson::TypeTraits::FloatTraits
mantissa_type	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  typedef int64_t mantissa_type;$/;"	t	struct:ArduinoJson::TypeTraits::FloatTraits
mcpu	Makefile	/^	arm-none-eabi-gcc -mthumb -mcpu=cortex-m3 -T $(QEMU_SRC)lm3s6965.ld $(INC_FLAGS) $(APP_SRC)test.c $(QEMU_SRC)reset.S $(APP_SRC)syscalls.c $(FREERTOS_SRC)list.c  $(FREERTOS_SRC)tasks.c  $(FREERTOS_PORT_SRC)port.c $(FREERTOS_MEMMANG_SRC)heap_1.c $(FREERTOS_SRC)timers.c -o $(bin)main$/;"	m
measureLength	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t measureLength() const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
measurePrettyLength	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t measurePrettyLength() const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
move	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    void move() {$/;"	f	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
move	ArduinoJson/StringTraits/CharPointer.hpp	/^    void move() {$/;"	f	class:ArduinoJson::Internals::CharPointerTraits::Reader
move	ArduinoJson/StringTraits/FlashString.hpp	/^    void move() {$/;"	f	class:ArduinoJson::Internals::StringTraits::Reader
move	ArduinoJson/StringTraits/StdStream.hpp	/^    void move() {$/;"	f	class:ArduinoJson::Internals::StdStreamTraits::Reader
mtCOVERAGE_TEST_DELAY	FreeRTOS/include/FreeRTOS.h	752;"	d
mtCOVERAGE_TEST_MARKER	FreeRTOS/include/FreeRTOS.h	748;"	d
nan	ArduinoJson/Polyfills/math.hpp	/^T nan() {$/;"	f	namespace:ArduinoJson::Polyfills
nan	ArduinoJson/TypeTraits/FloatTraits.hpp	/^  static T nan() {$/;"	f	struct:ArduinoJson::TypeTraits::FloatTraits
next	ArduinoJson/Data/ListNode.hpp	/^  ListNode<T> *next;$/;"	m	struct:ArduinoJson::Internals::ListNode
next	ArduinoJson/DynamicJsonBuffer.hpp	/^    Block* next;$/;"	m	struct:ArduinoJson::DynamicJsonBufferBase::EmptyBlock
next	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    char next() {$/;"	f	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
next	ArduinoJson/StringTraits/CharPointer.hpp	/^    TChar next() const {$/;"	f	class:ArduinoJson::Internals::CharPointerTraits::Reader
next	ArduinoJson/StringTraits/FlashString.hpp	/^    char next() const {$/;"	f	class:ArduinoJson::Internals::StringTraits::Reader
next	ArduinoJson/StringTraits/StdStream.hpp	/^    char next() {$/;"	f	class:ArduinoJson::Internals::StdStreamTraits::Reader
node_type	ArduinoJson/Data/List.hpp	/^  typedef ListNode<T> node_type;$/;"	t	class:ArduinoJson::Internals::List
normalize	ArduinoJson/Polyfills/normalize.hpp	/^short normalize(T& value) {$/;"	f	namespace:ArduinoJson::Polyfills
operator !=	ArduinoJson/Data/ListConstIterator.hpp	/^  bool operator!=(const ListConstIterator<T> &other) const {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator !=	ArduinoJson/Data/ListIterator.hpp	/^  bool operator!=(const ListIterator<T> &other) const {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator !=	ArduinoJson/Data/ReferenceType.hpp	/^  bool operator!=(const ReferenceType& other) const {$/;"	f	class:ArduinoJson::Internals::ReferenceType
operator !=	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator!=(const JsonVariantBase<TVariant> &variant,$/;"	f	namespace:ArduinoJson
operator !=	ArduinoJson/JsonVariantComparisons.hpp	/^operator!=(TComparand comparand, const JsonVariantBase<TVariant> &variant) {$/;"	f	namespace:ArduinoJson
operator *	ArduinoJson/Data/ListConstIterator.hpp	/^  const T &operator*() const {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator *	ArduinoJson/Data/ListIterator.hpp	/^  T &operator*() const {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator ++	ArduinoJson/Data/ListConstIterator.hpp	/^  ListConstIterator<T> &operator++() {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator ++	ArduinoJson/Data/ListIterator.hpp	/^  ListIterator<T> &operator++() {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator +=	ArduinoJson/Data/ListConstIterator.hpp	/^  ListConstIterator<T> &operator+=(size_t distance) {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator +=	ArduinoJson/Data/ListIterator.hpp	/^  ListIterator<T> &operator+=(size_t distance) {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator ->	ArduinoJson/Data/ListConstIterator.hpp	/^  const T *operator->() {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator ->	ArduinoJson/Data/ListIterator.hpp	/^  T *operator->() {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator <	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator<(TComparand comparand,$/;"	f	namespace:ArduinoJson
operator <	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator<(const JsonVariantBase<TVariant> &varian,$/;"	f	namespace:ArduinoJson
operator <<	ArduinoJson/JsonArraySubscript.hpp	/^inline std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:ArduinoJson
operator <<	ArduinoJson/JsonObjectSubscript.hpp	/^inline std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:ArduinoJson
operator <<	ArduinoJson/JsonVariantImpl.hpp	/^inline std::ostream &operator<<(std::ostream &os, const JsonVariant &source) {$/;"	f	namespace:ArduinoJson
operator <<	ArduinoJson/Serialization/JsonPrintable.hpp	/^inline std::ostream &operator<<(std::ostream &os, const JsonPrintable<T> &v) {$/;"	f	namespace:ArduinoJson::Internals
operator <=	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator<=(TComparand comparand,$/;"	f	namespace:ArduinoJson
operator <=	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator<=(const JsonVariantBase<TVariant> &left,$/;"	f	namespace:ArduinoJson
operator =	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE JsonArraySubscript& operator=(const JsonArraySubscript& src) {$/;"	f	class:ArduinoJson::JsonArraySubscript
operator =	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE JsonArraySubscript& operator=(const T& src) {$/;"	f	class:ArduinoJson::JsonArraySubscript
operator =	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE JsonArraySubscript& operator=(const T* src) {$/;"	f	class:ArduinoJson::JsonArraySubscript
operator =	ArduinoJson/JsonObjectSubscript.hpp	/^      operator=(const TValue& src) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
operator =	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE this_type& operator=(const TValue* src) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
operator =	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE this_type& operator=(const this_type& src) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
operator ==	ArduinoJson/Data/ListConstIterator.hpp	/^  bool operator==(const ListConstIterator<T> &other) const {$/;"	f	class:ArduinoJson::Internals::ListConstIterator
operator ==	ArduinoJson/Data/ListIterator.hpp	/^  bool operator==(const ListIterator<T> &other) const {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator ==	ArduinoJson/Data/ReferenceType.hpp	/^  bool operator==(const ReferenceType& other) const {$/;"	f	class:ArduinoJson::Internals::ReferenceType
operator ==	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator==(const JsonVariantBase<TVariant> &variant,$/;"	f	namespace:ArduinoJson
operator ==	ArduinoJson/JsonVariantComparisons.hpp	/^operator==(TComparand comparand, const JsonVariantBase<TVariant> &variant) {$/;"	f	namespace:ArduinoJson
operator >	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator>(TComparand comparand,$/;"	f	namespace:ArduinoJson
operator >	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator>(const JsonVariantBase<TVariant> &variant,$/;"	f	namespace:ArduinoJson
operator >=	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator>=(TComparand comparand,$/;"	f	namespace:ArduinoJson
operator >=	ArduinoJson/JsonVariantComparisons.hpp	/^inline bool operator>=(const JsonVariantBase<TVariant> &variant,$/;"	f	namespace:ArduinoJson
operator JsonArray &	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE operator JsonArray &() const {$/;"	f	class:ArduinoJson::JsonVariantBase
operator JsonObject &	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE operator JsonObject &() const {$/;"	f	class:ArduinoJson::JsonVariantBase
operator ListConstIterator<T>	ArduinoJson/Data/ListIterator.hpp	/^  operator ListConstIterator<T>() const {$/;"	f	class:ArduinoJson::Internals::ListIterator
operator T	ArduinoJson/JsonVariantBase.hpp	/^  FORCE_INLINE operator T() const {$/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonArraySubscript.hpp	/^inline JsonArraySubscript JsonArray::operator[](size_t index) {$/;"	f	class:ArduinoJson::JsonArray
operator []	ArduinoJson/JsonArraySubscript.hpp	/^inline JsonArraySubscript JsonVariantBase<TImplem>::operator[](int index) {$/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonArraySubscript.hpp	/^inline const JsonArraySubscript JsonArray::operator[](size_t index) const {$/;"	f	class:ArduinoJson::JsonArray
operator []	ArduinoJson/JsonArraySubscript.hpp	/^inline const JsonArraySubscript JsonVariantBase<TImplem>::operator[]($/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonObject.hpp	/^  JsonObjectSubscript<const TString*> operator[](const TString* key) {$/;"	f	class:ArduinoJson::JsonObject
operator []	ArduinoJson/JsonObject.hpp	/^  const JsonObjectSubscript<const TString*> operator[]($/;"	f	class:ArduinoJson::JsonObject
operator []	ArduinoJson/JsonObject.hpp	/^  operator[](const TString& key) const {$/;"	f	class:ArduinoJson::JsonObject
operator []	ArduinoJson/JsonObject.hpp	/^  operator[](const TString& key) {$/;"	f	class:ArduinoJson::JsonObject
operator []	ArduinoJson/JsonVariantBase.hpp	/^  operator[](const TString &key) const {$/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonVariantBase.hpp	/^  operator[](const TString &key) {$/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonVariantBase.hpp	/^  operator[](const TString *key) const {$/;"	f	class:ArduinoJson::JsonVariantBase
operator []	ArduinoJson/JsonVariantBase.hpp	/^  operator[](const TString *key) {$/;"	f	class:ArduinoJson::JsonVariantBase
operator const char*	ArduinoJson/RawJson.hpp	/^  operator const char*() const {$/;"	f	class:ArduinoJson::RawJson
operator delete	ArduinoJson/Data/JsonBufferAllocated.hpp	/^  void operator delete(void *, JsonBuffer *)throw() {}$/;"	f	class:ArduinoJson::Internals::JsonBufferAllocated
operator new	ArduinoJson/Data/JsonBufferAllocated.hpp	/^  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {$/;"	f	class:ArduinoJson::Internals::JsonBufferAllocated
p	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^  char *p;$/;"	m	class:ArduinoJson::Internals::StaticStringBuilder
parse	ArduinoJson/JsonBufferBase.hpp	/^  JsonVariant parse(TString &json,$/;"	f	class:ArduinoJson::JsonBufferBase
parse	ArduinoJson/JsonBufferBase.hpp	/^  JsonVariant parse(TString *json,$/;"	f	class:ArduinoJson::JsonBufferBase
parse	ArduinoJson/JsonBufferBase.hpp	/^  parse(const TString &json,$/;"	f	class:ArduinoJson::JsonBufferBase
parseAnythingTo	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo($/;"	f	class:ArduinoJson::Internals::JsonParser
parseAnythingToUnsafe	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingToUnsafe($/;"	f	class:ArduinoJson::Internals::JsonParser
parseArray	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArray() {$/;"	f	class:ArduinoJson::Internals::JsonParser
parseArray	ArduinoJson/JsonBufferBase.hpp	/^  JsonArray &parseArray($/;"	f	class:ArduinoJson::JsonBufferBase
parseArray	ArduinoJson/JsonBufferBase.hpp	/^  parseArray(const TString &json,$/;"	f	class:ArduinoJson::JsonBufferBase
parseArrayTo	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo($/;"	f	class:ArduinoJson::Internals::JsonParser
parseFloat	ArduinoJson/Polyfills/parseFloat.hpp	/^inline T parseFloat(const char* s) {$/;"	f	namespace:ArduinoJson::Polyfills
parseInteger	ArduinoJson/Polyfills/parseInteger.hpp	/^T parseInteger(const char *s) {$/;"	f	namespace:ArduinoJson::Polyfills
parseObject	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObject() {$/;"	f	class:ArduinoJson::Internals::JsonParser
parseObject	ArduinoJson/JsonBufferBase.hpp	/^  JsonObject &parseObject($/;"	f	class:ArduinoJson::JsonBufferBase
parseObject	ArduinoJson/JsonBufferBase.hpp	/^  parseObject(const TString &json,$/;"	f	class:ArduinoJson::JsonBufferBase
parseObjectTo	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo($/;"	f	class:ArduinoJson::Internals::JsonParser
parseString	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {$/;"	f	class:ArduinoJson::Internals::JsonParser
parseStringTo	ArduinoJson/Deserialization/JsonParserImpl.hpp	/^inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseStringTo($/;"	f	class:ArduinoJson::Internals::JsonParser
parseVariant	ArduinoJson/Deserialization/JsonParser.hpp	/^  JsonVariant parseVariant() {$/;"	f	class:ArduinoJson::Internals::JsonParser
pcHead	FreeRTOS/queue.c	/^	int8_t *pcHead;					\/*< Points to the beginning of the queue storage area. *\/$/;"	m	struct:QueueDefinition	file:
pcInterruptPriorityRegisters	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	 static const volatile unsigned char * const pcInterruptPriorityRegisters = ( const volatile unsigned char * const ) portNVIC_IP_REGISTERS_OFFSET_16;$/;"	v	file:
pcName	FreeRTOS/include/task.h	/^	const char * const pcName;	\/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:xTASK_PARAMETERS
pcQueueGetName	FreeRTOS/include/FreeRTOS.h	326;"	d
pcQueueGetName	FreeRTOS/include/mpu_wrappers.h	155;"	d
pcQueueGetName	FreeRTOS/queue.c	/^	const char *pcQueueGetName( QueueHandle_t xQueue ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcQueueGetQueueName	FreeRTOS/include/FreeRTOS.h	841;"	d
pcQueueName	FreeRTOS/queue.c	/^		const char *pcQueueName; \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:QUEUE_REGISTRY_ITEM	file:
pcReadFrom	FreeRTOS/queue.c	/^		int8_t *pcReadFrom;			\/*< Points to the last place that a queued item was read from when the structure is used as a queue. *\/$/;"	m	union:QueueDefinition::__anon3	file:
pcTail	FreeRTOS/queue.c	/^	int8_t *pcTail;					\/*< Points to the byte at the end of the queue storage area.  Once more byte is allocated than necessary to store the queue items, this is used as a marker. *\/$/;"	m	struct:QueueDefinition	file:
pcTaskGetName	FreeRTOS/include/mpu_wrappers.h	109;"	d
pcTaskGetName	FreeRTOS/tasks.c	/^char *pcTaskGetName( TaskHandle_t xTaskToQuery ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcTaskGetTaskName	FreeRTOS/include/FreeRTOS.h	839;"	d
pcTaskName	FreeRTOS/include/task.h	/^	const char *pcTaskName;			\/* A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:xTASK_STATUS
pcTaskName	FreeRTOS/tasks.c	/^	char				pcTaskName[ configMAX_TASK_NAME_LEN ];\/*< Descriptive name given to the task when created.  Facilitates debugging only. *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:tskTaskControlBlock	file:
pcTimerGetName	FreeRTOS/include/mpu_wrappers.h	166;"	d
pcTimerGetName	FreeRTOS/timers.c	/^const char * pcTimerGetName( TimerHandle_t xTimer ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcTimerGetTimerName	FreeRTOS/include/FreeRTOS.h	840;"	d
pcTimerName	FreeRTOS/timers.c	/^	const char				*pcTimerName;		\/*<< Text name.  This is not used by the kernel, it is included simply to make debugging easier. *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:tmrTimerControl	file:
pcWriteTo	FreeRTOS/queue.c	/^	int8_t *pcWriteTo;				\/*< Points to the free next place in the storage area. *\/$/;"	m	struct:QueueDefinition	file:
pdFAIL	FreeRTOS/include/projdefs.h	90;"	d
pdFALSE	FreeRTOS/include/projdefs.h	86;"	d
pdFREERTOS_BIG_ENDIAN	FreeRTOS/include/projdefs.h	156;"	d
pdFREERTOS_ERRNO_EACCES	FreeRTOS/include/projdefs.h	121;"	d
pdFREERTOS_ERRNO_EADDRINUSE	FreeRTOS/include/projdefs.h	142;"	d
pdFREERTOS_ERRNO_EADDRNOTAVAIL	FreeRTOS/include/projdefs.h	146;"	d
pdFREERTOS_ERRNO_EAGAIN	FreeRTOS/include/projdefs.h	118;"	d
pdFREERTOS_ERRNO_EALREADY	FreeRTOS/include/projdefs.h	145;"	d
pdFREERTOS_ERRNO_EBADE	FreeRTOS/include/projdefs.h	134;"	d
pdFREERTOS_ERRNO_EBADF	FreeRTOS/include/projdefs.h	117;"	d
pdFREERTOS_ERRNO_EBUSY	FreeRTOS/include/projdefs.h	123;"	d
pdFREERTOS_ERRNO_ECANCELED	FreeRTOS/include/projdefs.h	151;"	d
pdFREERTOS_ERRNO_EEXIST	FreeRTOS/include/projdefs.h	124;"	d
pdFREERTOS_ERRNO_EFAULT	FreeRTOS/include/projdefs.h	122;"	d
pdFREERTOS_ERRNO_EFTYPE	FreeRTOS/include/projdefs.h	135;"	d
pdFREERTOS_ERRNO_EILSEQ	FreeRTOS/include/projdefs.h	150;"	d
pdFREERTOS_ERRNO_EINPROGRESS	FreeRTOS/include/projdefs.h	144;"	d
pdFREERTOS_ERRNO_EINTR	FreeRTOS/include/projdefs.h	114;"	d
pdFREERTOS_ERRNO_EINVAL	FreeRTOS/include/projdefs.h	129;"	d
pdFREERTOS_ERRNO_EIO	FreeRTOS/include/projdefs.h	115;"	d
pdFREERTOS_ERRNO_EISCONN	FreeRTOS/include/projdefs.h	147;"	d
pdFREERTOS_ERRNO_EISDIR	FreeRTOS/include/projdefs.h	128;"	d
pdFREERTOS_ERRNO_ENAMETOOLONG	FreeRTOS/include/projdefs.h	138;"	d
pdFREERTOS_ERRNO_ENMFILE	FreeRTOS/include/projdefs.h	136;"	d
pdFREERTOS_ERRNO_ENOBUFS	FreeRTOS/include/projdefs.h	140;"	d
pdFREERTOS_ERRNO_ENODEV	FreeRTOS/include/projdefs.h	126;"	d
pdFREERTOS_ERRNO_ENOENT	FreeRTOS/include/projdefs.h	113;"	d
pdFREERTOS_ERRNO_ENOMEDIUM	FreeRTOS/include/projdefs.h	149;"	d
pdFREERTOS_ERRNO_ENOMEM	FreeRTOS/include/projdefs.h	120;"	d
pdFREERTOS_ERRNO_ENOPROTOOPT	FreeRTOS/include/projdefs.h	141;"	d
pdFREERTOS_ERRNO_ENOSPC	FreeRTOS/include/projdefs.h	130;"	d
pdFREERTOS_ERRNO_ENOTCONN	FreeRTOS/include/projdefs.h	148;"	d
pdFREERTOS_ERRNO_ENOTDIR	FreeRTOS/include/projdefs.h	127;"	d
pdFREERTOS_ERRNO_ENOTEMPTY	FreeRTOS/include/projdefs.h	137;"	d
pdFREERTOS_ERRNO_ENXIO	FreeRTOS/include/projdefs.h	116;"	d
pdFREERTOS_ERRNO_EOPNOTSUPP	FreeRTOS/include/projdefs.h	139;"	d
pdFREERTOS_ERRNO_EROFS	FreeRTOS/include/projdefs.h	132;"	d
pdFREERTOS_ERRNO_ESPIPE	FreeRTOS/include/projdefs.h	131;"	d
pdFREERTOS_ERRNO_ETIMEDOUT	FreeRTOS/include/projdefs.h	143;"	d
pdFREERTOS_ERRNO_EUNATCH	FreeRTOS/include/projdefs.h	133;"	d
pdFREERTOS_ERRNO_EWOULDBLOCK	FreeRTOS/include/projdefs.h	119;"	d
pdFREERTOS_ERRNO_EXDEV	FreeRTOS/include/projdefs.h	125;"	d
pdFREERTOS_ERRNO_NONE	FreeRTOS/include/projdefs.h	112;"	d
pdFREERTOS_LITTLE_ENDIAN	FreeRTOS/include/projdefs.h	155;"	d
pdINTEGRITY_CHECK_VALUE	FreeRTOS/include/projdefs.h	105;"	d
pdINTEGRITY_CHECK_VALUE	FreeRTOS/include/projdefs.h	107;"	d
pdMS_TO_TICKS	FreeRTOS/include/projdefs.h	83;"	d
pdPASS	FreeRTOS/include/projdefs.h	89;"	d
pdTASK_CODE	FreeRTOS/include/FreeRTOS.h	847;"	d
pdTASK_HOOK_CODE	FreeRTOS/include/FreeRTOS.h	837;"	d
pdTRUE	FreeRTOS/include/projdefs.h	87;"	d
portAIRCR_REG	FreeRTOS/portable/GCC/ARM_CM3/port.c	104;"	d	file:
portASSERT_IF_INTERRUPT_PRIORITY_INVALID	FreeRTOS/include/FreeRTOS.h	740;"	d
portASSERT_IF_INTERRUPT_PRIORITY_INVALID	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	176;"	d
portASSERT_IF_IN_ISR	FreeRTOS/include/FreeRTOS.h	756;"	d
portBASE_TYPE	FreeRTOS/include/portmacro.h	95;"	d
portBASE_TYPE	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	91;"	d
portBYTE_ALIGNMENT	FreeRTOS/include/portmacro.h	117;"	d
portBYTE_ALIGNMENT	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	105;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	102;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	106;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	110;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	114;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	118;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/include/portable.h	98;"	d
portCHAR	FreeRTOS/include/portmacro.h	89;"	d
portCHAR	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	85;"	d
portCLEAN_UP_TCB	FreeRTOS/include/FreeRTOS.h	308;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	304;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/portmacro.h	138;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	124;"	d
portCONFIGURE_TIMER_FOR_RUN_TIME_STATS	FreeRTOS/include/FreeRTOS.h	680;"	d
portCRITICAL_NESTING_IN_TCB	FreeRTOS/include/FreeRTOS.h	260;"	d
portDISABLE_INTERRUPTS	FreeRTOS/include/portmacro.h	139;"	d
portDISABLE_INTERRUPTS	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	125;"	d
portDOUBLE	FreeRTOS/include/portmacro.h	91;"	d
portDOUBLE	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	87;"	d
portENABLE_INTERRUPTS	FreeRTOS/include/portmacro.h	140;"	d
portENABLE_INTERRUPTS	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	126;"	d
portEND_SWITCHING_ISR	FreeRTOS/include/portmacro.h	126;"	d
portEND_SWITCHING_ISR	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	114;"	d
portENTER_CRITICAL	FreeRTOS/include/portmacro.h	141;"	d
portENTER_CRITICAL	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	127;"	d
portEXIT_CRITICAL	FreeRTOS/include/portmacro.h	142;"	d
portEXIT_CRITICAL	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	128;"	d
portFIRST_USER_INTERRUPT_NUMBER	FreeRTOS/portable/GCC/ARM_CM3/port.c	102;"	d	file:
portFLOAT	FreeRTOS/include/portmacro.h	90;"	d
portFLOAT	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	86;"	d
portGET_HIGHEST_PRIORITY	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	168;"	d
portINITIAL_XPSR	FreeRTOS/portable/GCC/ARM_CM3/port.c	112;"	d	file:
portLONG	FreeRTOS/include/portmacro.h	92;"	d
portLONG	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	88;"	d
portMAX_24_BIT_NUMBER	FreeRTOS/portable/GCC/ARM_CM3/port.c	115;"	d	file:
portMAX_8_BIT_VALUE	FreeRTOS/portable/GCC/ARM_CM3/port.c	105;"	d	file:
portMAX_DELAY	FreeRTOS/include/portmacro.h	103;"	d
portMAX_DELAY	FreeRTOS/include/portmacro.h	106;"	d
portMAX_DELAY	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	95;"	d
portMAX_DELAY	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	98;"	d
portMAX_PRIGROUP_BITS	FreeRTOS/portable/GCC/ARM_CM3/port.c	107;"	d	file:
portMISSED_COUNTS_FACTOR	FreeRTOS/portable/GCC/ARM_CM3/port.c	120;"	d	file:
portNOP	FreeRTOS/include/portmacro.h	150;"	d
portNOP	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	180;"	d
portNUM_CONFIGURABLE_REGIONS	FreeRTOS/include/portable.h	126;"	d
portNVIC_INT_CTRL_REG	FreeRTOS/include/portmacro.h	123;"	d
portNVIC_INT_CTRL_REG	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	111;"	d
portNVIC_IP_REGISTERS_OFFSET_16	FreeRTOS/portable/GCC/ARM_CM3/port.c	103;"	d	file:
portNVIC_PENDSVCLEAR_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	95;"	d	file:
portNVIC_PENDSVSET_BIT	FreeRTOS/include/portmacro.h	124;"	d
portNVIC_PENDSVSET_BIT	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	112;"	d
portNVIC_PENDSV_PRI	FreeRTOS/portable/GCC/ARM_CM3/port.c	98;"	d	file:
portNVIC_PEND_SYSTICK_CLEAR_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	96;"	d	file:
portNVIC_SYSPRI2_REG	FreeRTOS/portable/GCC/ARM_CM3/port.c	89;"	d	file:
portNVIC_SYSTICK_CLK_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	91;"	d	file:
portNVIC_SYSTICK_COUNT_FLAG_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	94;"	d	file:
portNVIC_SYSTICK_CTRL_REG	FreeRTOS/portable/GCC/ARM_CM3/port.c	86;"	d	file:
portNVIC_SYSTICK_CURRENT_VALUE_REG	FreeRTOS/portable/GCC/ARM_CM3/port.c	88;"	d	file:
portNVIC_SYSTICK_ENABLE_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	93;"	d	file:
portNVIC_SYSTICK_INT_BIT	FreeRTOS/portable/GCC/ARM_CM3/port.c	92;"	d	file:
portNVIC_SYSTICK_LOAD_REG	FreeRTOS/portable/GCC/ARM_CM3/port.c	87;"	d	file:
portNVIC_SYSTICK_PRI	FreeRTOS/portable/GCC/ARM_CM3/port.c	99;"	d	file:
portPOINTER_SIZE_TYPE	FreeRTOS/include/FreeRTOS.h	330;"	d
portPRE_TASK_DELETE_HOOK	FreeRTOS/include/FreeRTOS.h	312;"	d
portPRIGROUP_SHIFT	FreeRTOS/portable/GCC/ARM_CM3/port.c	109;"	d	file:
portPRIORITY_GROUP_MASK	FreeRTOS/portable/GCC/ARM_CM3/port.c	108;"	d	file:
portPRIVILEGE_BIT	FreeRTOS/include/FreeRTOS.h	688;"	d
portRECORD_READY_PRIORITY	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	163;"	d
portRESET_READY_PRIORITY	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	164;"	d
portRESET_READY_PRIORITY	FreeRTOS/tasks.c	197;"	d	file:
portSETUP_TCB	FreeRTOS/include/FreeRTOS.h	316;"	d
portSET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	300;"	d
portSET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/portmacro.h	137;"	d
portSET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	123;"	d
portSHORT	FreeRTOS/include/portmacro.h	93;"	d
portSHORT	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	89;"	d
portSTACK_GROWTH	FreeRTOS/include/portmacro.h	115;"	d
portSTACK_GROWTH	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	103;"	d
portSTACK_TYPE	FreeRTOS/include/portmacro.h	94;"	d
portSTACK_TYPE	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	90;"	d
portSUPPRESS_TICKS_AND_SLEEP	FreeRTOS/include/FreeRTOS.h	696;"	d
portSUPPRESS_TICKS_AND_SLEEP	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	141;"	d
portTASK_FUNCTION	FreeRTOS/include/portmacro.h	148;"	d
portTASK_FUNCTION	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	135;"	d
portTASK_FUNCTION	FreeRTOS/tasks.c	/^static portTASK_FUNCTION( prvIdleTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION_PROTO	FreeRTOS/include/portmacro.h	147;"	d
portTASK_FUNCTION_PROTO	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	134;"	d
portTASK_RETURN_ADDRESS	FreeRTOS/portable/GCC/ARM_CM3/port.c	126;"	d	file:
portTASK_RETURN_ADDRESS	FreeRTOS/portable/GCC/ARM_CM3/port.c	128;"	d	file:
portTASK_USES_FLOATING_POINT	FreeRTOS/include/FreeRTOS.h	724;"	d
portTICK_PERIOD_MS	FreeRTOS/include/portmacro.h	116;"	d
portTICK_RATE_MS	FreeRTOS/include/FreeRTOS.h	838;"	d
portTICK_RATE_MS	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	104;"	d
portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	807;"	d
portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	814;"	d
portTICK_TYPE_ENTER_CRITICAL	FreeRTOS/include/FreeRTOS.h	804;"	d
portTICK_TYPE_ENTER_CRITICAL	FreeRTOS/include/FreeRTOS.h	811;"	d
portTICK_TYPE_EXIT_CRITICAL	FreeRTOS/include/FreeRTOS.h	805;"	d
portTICK_TYPE_EXIT_CRITICAL	FreeRTOS/include/FreeRTOS.h	812;"	d
portTICK_TYPE_IS_ATOMIC	FreeRTOS/include/FreeRTOS.h	772;"	d
portTICK_TYPE_IS_ATOMIC	FreeRTOS/include/portmacro.h	110;"	d
portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	806;"	d
portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	813;"	d
portTOP_BIT_OF_BYTE	FreeRTOS/portable/GCC/ARM_CM3/port.c	106;"	d	file:
portTickType	FreeRTOS/include/FreeRTOS.h	825;"	d
portTickType	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	/^	typedef unsigned portLONG portTickType;$/;"	t
portTickType	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	/^	typedef unsigned portSHORT portTickType;$/;"	t
portUSING_MPU_WRAPPERS	FreeRTOS/include/mpu_wrappers.h	195;"	d
portYIELD	FreeRTOS/include/portmacro.h	125;"	d
portYIELD	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	113;"	d
portYIELD_FROM_ISR	FreeRTOS/include/portmacro.h	127;"	d
portYIELD_FROM_ISR	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	115;"	d
portYIELD_WITHIN_API	FreeRTOS/include/FreeRTOS.h	692;"	d
prettyPrintTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  prettyPrintTo(Print &print) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
prettyPrintTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  prettyPrintTo(TString &str) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
prettyPrintTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t prettyPrintTo(IndentedPrint<Print> &print) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
prettyPrintTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t prettyPrintTo(char (&buffer)[N]) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
prettyPrintTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t prettyPrintTo(char *buffer, size_t bufferSize) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
print	ArduinoJson/Serialization/DummyPrint.hpp	/^  size_t print(char) {$/;"	f	class:ArduinoJson::Internals::DummyPrint
print	ArduinoJson/Serialization/DummyPrint.hpp	/^  size_t print(const char* s) {$/;"	f	class:ArduinoJson::Internals::DummyPrint
print	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^  size_t print(char c) {$/;"	f	class:ArduinoJson::Internals::DynamicStringBuilder
print	ArduinoJson/Serialization/DynamicStringBuilder.hpp	/^  size_t print(const char *s) {$/;"	f	class:ArduinoJson::Internals::DynamicStringBuilder
print	ArduinoJson/Serialization/IndentedPrint.hpp	/^  size_t print(char c) {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
print	ArduinoJson/Serialization/IndentedPrint.hpp	/^  size_t print(const char *s) {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
print	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t print(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
print	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t print(const char* s) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
print	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^  size_t print(char c) {$/;"	f	class:ArduinoJson::Internals::StaticStringBuilder
print	ArduinoJson/Serialization/StaticStringBuilder.hpp	/^  size_t print(const char *s) {$/;"	f	class:ArduinoJson::Internals::StaticStringBuilder
print	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^  size_t print(char c) {$/;"	f	class:ArduinoJson::Internals::StreamPrintAdapter
print	ArduinoJson/Serialization/StreamPrintAdapter.hpp	/^  size_t print(const char* s) {$/;"	f	class:ArduinoJson::Internals::StreamPrintAdapter
printTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  printTo(Print &print) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
printTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  printTo(TString &str) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
printTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t printTo(char (&buffer)[N]) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
printTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  size_t printTo(char *buffer, size_t bufferSize) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
printTo	ArduinoJson/Serialization/JsonPrintable.hpp	/^  std::ostream &printTo(std::ostream &os) const {$/;"	f	class:ArduinoJson::Internals::JsonPrintable
print_char	src/test.c	/^void print_char() {$/;"	f
print_char	test.c	/^void print_char() {$/;"	f
print_int	test.c	/^void print_int() {$/;"	f
print_uart0	test.c	/^void print_uart0(const char *s) {$/;"	f
print_uart0	test.cpp	/^void print_uart0(const char *s) {$/;"	f
printi	src/test.c	/^void printi() {$/;"	f
prvAddCoRoutineToReadyQueue	FreeRTOS/croutine.c	109;"	d	file:
prvAddCurrentTaskToDelayedList	FreeRTOS/tasks.c	/^static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )$/;"	f	file:
prvAddNewTaskToReadyList	FreeRTOS/tasks.c	/^static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )$/;"	f	file:
prvAddTaskToReadyList	FreeRTOS/tasks.c	259;"	d	file:
prvCheckDelayedList	FreeRTOS/croutine.c	/^static void prvCheckDelayedList( void )$/;"	f	file:
prvCheckForValidListAndQueue	FreeRTOS/timers.c	/^static void prvCheckForValidListAndQueue( void )$/;"	f	file:
prvCheckPendingReadyList	FreeRTOS/croutine.c	/^static void prvCheckPendingReadyList( void )$/;"	f	file:
prvCheckTasksWaitingTermination	FreeRTOS/tasks.c	/^static void prvCheckTasksWaitingTermination( void )$/;"	f	file:
prvCopyDataFromQueue	FreeRTOS/queue.c	/^static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )$/;"	f	file:
prvCopyDataToQueue	FreeRTOS/queue.c	/^static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )$/;"	f	file:
prvDeleteTCB	FreeRTOS/tasks.c	/^	static void prvDeleteTCB( TCB_t *pxTCB )$/;"	f	file:
prvGetExpectedIdleTime	FreeRTOS/tasks.c	/^	static TickType_t prvGetExpectedIdleTime( void )$/;"	f	file:
prvGetNextExpireTime	FreeRTOS/timers.c	/^static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )$/;"	f	file:
prvGetTCBFromHandle	FreeRTOS/tasks.c	272;"	d	file:
prvHeapInit	FreeRTOS/portable/MemMang/heap_2.c	/^static void prvHeapInit( void )$/;"	f	file:
prvHeapInit	FreeRTOS/portable/MemMang/heap_4.c	/^static void prvHeapInit( void )$/;"	f	file:
prvInitialiseCoRoutineLists	FreeRTOS/croutine.c	/^static void prvInitialiseCoRoutineLists( void )$/;"	f	file:
prvInitialiseMutex	FreeRTOS/queue.c	/^	static void prvInitialiseMutex( Queue_t *pxNewQueue )$/;"	f	file:
prvInitialiseNewQueue	FreeRTOS/queue.c	/^static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )$/;"	f	file:
prvInitialiseNewTask	FreeRTOS/tasks.c	/^static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,$/;"	f	file:
prvInitialiseNewTimer	FreeRTOS/timers.c	/^static void prvInitialiseNewTimer(	const char * const pcTimerName,$/;"	f	file:
prvInitialiseTaskLists	FreeRTOS/tasks.c	/^static void prvInitialiseTaskLists( void )$/;"	f	file:
prvInsertBlockIntoFreeList	FreeRTOS/portable/MemMang/heap_2.c	139;"	d	file:
prvInsertBlockIntoFreeList	FreeRTOS/portable/MemMang/heap_4.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )$/;"	f	file:
prvInsertBlockIntoFreeList	FreeRTOS/portable/MemMang/heap_5.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )$/;"	f	file:
prvInsertTimerInActiveList	FreeRTOS/timers.c	/^static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )$/;"	f	file:
prvIsQueueEmpty	FreeRTOS/queue.c	/^static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )$/;"	f	file:
prvIsQueueFull	FreeRTOS/queue.c	/^static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )$/;"	f	file:
prvListTasksWithinSingleList	FreeRTOS/tasks.c	/^	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )$/;"	f	file:
prvLockQueue	FreeRTOS/queue.c	264;"	d	file:
prvNotifyQueueSetContainer	FreeRTOS/queue.c	/^	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )$/;"	f	file:
prvPortStartFirstTask	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^static void prvPortStartFirstTask( void )$/;"	f	file:
prvProcessExpiredTimer	FreeRTOS/timers.c	/^static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )$/;"	f	file:
prvProcessReceivedCommands	FreeRTOS/timers.c	/^static void	prvProcessReceivedCommands( void )$/;"	f	file:
prvProcessTimerOrBlockTask	FreeRTOS/timers.c	/^static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )$/;"	f	file:
prvResetNextTaskUnblockTime	FreeRTOS/tasks.c	/^static void prvResetNextTaskUnblockTime( void )$/;"	f	file:
prvSampleTimeNow	FreeRTOS/timers.c	/^static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )$/;"	f	file:
prvSearchForNameWithinSingleList	FreeRTOS/tasks.c	/^	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )$/;"	f	file:
prvSwitchTimerLists	FreeRTOS/timers.c	/^static void prvSwitchTimerLists( void )$/;"	f	file:
prvTaskCheckFreeStackSpace	FreeRTOS/tasks.c	/^	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )$/;"	f	file:
prvTaskExitError	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^static void prvTaskExitError( void )$/;"	f	file:
prvTaskIsTaskSuspended	FreeRTOS/tasks.c	/^	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )$/;"	f	file:
prvTestWaitCondition	FreeRTOS/event_groups.c	/^static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )$/;"	f	file:
prvTimerTask	FreeRTOS/timers.c	/^static void prvTimerTask( void *pvParameters )$/;"	f	file:
prvUnlockQueue	FreeRTOS/queue.c	/^static void prvUnlockQueue( Queue_t * const pxQueue )$/;"	f	file:
prvWriteNameToBuffer	FreeRTOS/tasks.c	/^	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )$/;"	f	file:
pucStartAddress	FreeRTOS/include/portable.h	/^	uint8_t *pucStartAddress;$/;"	m	struct:HeapRegion
puxStackBuffer	FreeRTOS/include/task.h	/^	StackType_t *puxStackBuffer;$/;"	m	struct:xTASK_PARAMETERS
pvBaseAddress	FreeRTOS/include/task.h	/^	void *pvBaseAddress;$/;"	m	struct:xMEMORY_REGION
pvContainer	FreeRTOS/include/list.h	/^	void * configLIST_VOLATILE pvContainer;				\/*< Pointer to the list in which this list item is placed (if any). *\/$/;"	m	struct:xLIST_ITEM
pvDummy1	FreeRTOS/include/FreeRTOS.h	/^	void				*pvDummy1;$/;"	m	struct:xSTATIC_TIMER
pvDummy1	FreeRTOS/include/FreeRTOS.h	/^	void *pvDummy1[ 3 ];$/;"	m	struct:xSTATIC_QUEUE
pvDummy15	FreeRTOS/include/FreeRTOS.h	/^		void			*pvDummy15[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:xSTATIC_TCB
pvDummy2	FreeRTOS/include/FreeRTOS.h	/^		void *pvDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon4
pvDummy2	FreeRTOS/include/FreeRTOS.h	/^	void *pvDummy2;$/;"	m	struct:xSTATIC_LIST
pvDummy2	FreeRTOS/include/FreeRTOS.h	/^	void *pvDummy2[ 2 ];$/;"	m	struct:xSTATIC_MINI_LIST_ITEM
pvDummy2	FreeRTOS/include/FreeRTOS.h	/^	void *pvDummy2[ 4 ];$/;"	m	struct:xSTATIC_LIST_ITEM
pvDummy5	FreeRTOS/include/FreeRTOS.h	/^	void 				*pvDummy5[ 2 ];$/;"	m	struct:xSTATIC_TIMER
pvDummy7	FreeRTOS/include/FreeRTOS.h	/^		void *pvDummy7;$/;"	m	struct:xSTATIC_QUEUE
pvOwner	FreeRTOS/include/list.h	/^	void * pvOwner;										\/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. *\/$/;"	m	struct:xLIST_ITEM
pvParameter1	FreeRTOS/timers.c	/^	void *pvParameter1;						\/* << The value that will be used as the callback functions first parameter. *\/$/;"	m	struct:tmrCallbackParameters	file:
pvParameters	FreeRTOS/include/task.h	/^	void *pvParameters;$/;"	m	struct:xTASK_PARAMETERS
pvPortMalloc	FreeRTOS/portable/MemMang/heap_1.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	FreeRTOS/portable/MemMang/heap_2.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	FreeRTOS/portable/MemMang/heap_3.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	FreeRTOS/portable/MemMang/heap_4.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	FreeRTOS/portable/MemMang/heap_5.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvTaskCode	FreeRTOS/include/task.h	/^	TaskFunction_t pvTaskCode;$/;"	m	struct:xTASK_PARAMETERS
pvTaskGetThreadLocalStoragePointer	FreeRTOS/include/mpu_wrappers.h	115;"	d
pvTaskGetThreadLocalStoragePointer	FreeRTOS/tasks.c	/^	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )$/;"	f
pvTaskIncrementMutexHeldCount	FreeRTOS/tasks.c	/^	void *pvTaskIncrementMutexHeldCount( void )$/;"	f
pvThreadLocalStoragePointers	FreeRTOS/tasks.c	/^		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:tskTaskControlBlock	file:
pvTimerGetTimerID	FreeRTOS/include/mpu_wrappers.h	161;"	d
pvTimerGetTimerID	FreeRTOS/timers.c	/^void *pvTimerGetTimerID( const TimerHandle_t xTimer )$/;"	f
pvTimerID	FreeRTOS/timers.c	/^	void 					*pvTimerID;			\/*<< An ID to identify the timer.  This allows the timer to be identified when the same callback is used for multiple timers. *\/$/;"	m	struct:tmrTimerControl	file:
pxCallbackFunction	FreeRTOS/timers.c	/^	PendedFunction_t	pxCallbackFunction;	\/* << The callback function to execute. *\/$/;"	m	struct:tmrCallbackParameters	file:
pxCallbackFunction	FreeRTOS/timers.c	/^	TimerCallbackFunction_t	pxCallbackFunction;	\/*<< The function that will be called when the timer expires. *\/$/;"	m	struct:tmrTimerControl	file:
pxCoRoutineFunction	FreeRTOS/include/croutine.h	/^	crCOROUTINE_CODE 	pxCoRoutineFunction;$/;"	m	struct:corCoRoutineControlBlock
pxCurrentCoRoutine	FreeRTOS/croutine.c	/^CRCB_t * pxCurrentCoRoutine = NULL;$/;"	v
pxCurrentTCB	FreeRTOS/tasks.c	/^PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;$/;"	v
pxCurrentTimerList	FreeRTOS/timers.c	/^PRIVILEGED_DATA static List_t *pxCurrentTimerList;$/;"	v	file:
pxDelayedCoRoutineList	FreeRTOS/croutine.c	/^static List_t * pxDelayedCoRoutineList;									\/*< Points to the delayed co-routine list currently being used. *\/$/;"	v	file:
pxDelayedTaskList	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				\/*< Points to the delayed task list currently being used. *\/$/;"	v	file:
pxDummy1	FreeRTOS/include/FreeRTOS.h	/^	void				*pxDummy1;$/;"	m	struct:xSTATIC_TCB
pxDummy14	FreeRTOS/include/FreeRTOS.h	/^		void			*pxDummy14;$/;"	m	struct:xSTATIC_TCB
pxDummy6	FreeRTOS/include/FreeRTOS.h	/^	void				*pxDummy6;$/;"	m	struct:xSTATIC_TCB
pxDummy8	FreeRTOS/include/FreeRTOS.h	/^		void			*pxDummy8;$/;"	m	struct:xSTATIC_TCB
pxEnd	FreeRTOS/portable/MemMang/heap_4.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
pxEnd	FreeRTOS/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
pxEndOfStack	FreeRTOS/tasks.c	/^		StackType_t		*pxEndOfStack;		\/*< Points to the end of the stack on architectures where the stack grows up from low memory. *\/$/;"	m	struct:tskTaskControlBlock	file:
pxISR	FreeRTOS/include/deprecated_definitions.h	/^	typedef void ( __interrupt __far *pxISR )();$/;"	t
pxISR	FreeRTOS/include/deprecated_definitions.h	/^    typedef void ( __interrupt __far *pxISR )();$/;"	t
pxIndex	FreeRTOS/include/list.h	/^	ListItem_t * configLIST_VOLATILE pxIndex;			\/*< Used to walk through the list.  Points to the last item returned by a call to listGET_OWNER_OF_NEXT_ENTRY (). *\/$/;"	m	struct:xLIST
pxMutexHolder	FreeRTOS/queue.c	108;"	d	file:
pxNext	FreeRTOS/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxNext;		\/*< Pointer to the next ListItem_t in the list. *\/$/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM::configLIST_VOLATILE
pxNext	FreeRTOS/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxNext;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xMINI_LIST_ITEM::configLIST_VOLATILE
pxNextFreeBlock	FreeRTOS/portable/MemMang/heap_2.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxNextFreeBlock	FreeRTOS/portable/MemMang/heap_4.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxNextFreeBlock	FreeRTOS/portable/MemMang/heap_5.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxOverflowDelayedCoRoutineList	FreeRTOS/croutine.c	/^static List_t * pxOverflowDelayedCoRoutineList;							\/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. *\/$/;"	v	file:
pxOverflowDelayedTaskList	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		\/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. *\/$/;"	v	file:
pxOverflowTimerList	FreeRTOS/timers.c	/^PRIVILEGED_DATA static List_t *pxOverflowTimerList;$/;"	v	file:
pxPortInitialiseStack	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )$/;"	f
pxPrevious	FreeRTOS/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;	\/*< Pointer to the previous ListItem_t in the list. *\/$/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM::configLIST_VOLATILE
pxPrevious	FreeRTOS/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xMINI_LIST_ITEM::configLIST_VOLATILE
pxQueueSetContainer	FreeRTOS/queue.c	/^		struct QueueDefinition *pxQueueSetContainer;$/;"	m	struct:QueueDefinition	typeref:struct:QueueDefinition::QueueDefinition	file:
pxReadyCoRoutineLists	FreeRTOS/croutine.c	/^static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	\/*< Prioritised ready co-routines. *\/$/;"	v	file:
pxReadyTasksLists	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];\/*< Prioritised ready tasks. *\/$/;"	v	file:
pxStack	FreeRTOS/tasks.c	/^	StackType_t			*pxStack;			\/*< Points to the start of the stack. *\/$/;"	m	struct:tskTaskControlBlock	file:
pxStackBase	FreeRTOS/include/task.h	/^	StackType_t *pxStackBase;		\/* Points to the lowest address of the task's stack area. *\/$/;"	m	struct:xTASK_STATUS
pxTaskTag	FreeRTOS/tasks.c	/^		TaskHookFunction_t pxTaskTag;$/;"	m	struct:tskTaskControlBlock	file:
pxTimer	FreeRTOS/timers.c	/^	Timer_t *			pxTimer;			\/*<< The timer to which the command will be applied. *\/$/;"	m	struct:tmrTimerParameters	file:
pxTopOfStack	FreeRTOS/tasks.c	/^	volatile StackType_t	*pxTopOfStack;	\/*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB STRUCT. *\/$/;"	m	struct:tskTaskControlBlock	file:
queueLOCKED_UNMODIFIED	FreeRTOS/queue.c	95;"	d	file:
queueMUTEX_GIVE_BLOCK_TIME	FreeRTOS/queue.c	115;"	d	file:
queueOVERWRITE	FreeRTOS/include/queue.h	107;"	d
queueQUEUE_IS_MUTEX	FreeRTOS/queue.c	110;"	d	file:
queueQUEUE_TYPE_BASE	FreeRTOS/include/queue.h	110;"	d
queueQUEUE_TYPE_BINARY_SEMAPHORE	FreeRTOS/include/queue.h	114;"	d
queueQUEUE_TYPE_COUNTING_SEMAPHORE	FreeRTOS/include/queue.h	113;"	d
queueQUEUE_TYPE_MUTEX	FreeRTOS/include/queue.h	112;"	d
queueQUEUE_TYPE_RECURSIVE_MUTEX	FreeRTOS/include/queue.h	115;"	d
queueQUEUE_TYPE_SET	FreeRTOS/include/queue.h	111;"	d
queueSEMAPHORE_QUEUE_ITEM_LENGTH	FreeRTOS/queue.c	114;"	d	file:
queueSEND_TO_BACK	FreeRTOS/include/queue.h	105;"	d
queueSEND_TO_FRONT	FreeRTOS/include/queue.h	106;"	d
queueUNLOCKED	FreeRTOS/queue.c	94;"	d	file:
queueYIELD_IF_USING_PREEMPTION	FreeRTOS/queue.c	120;"	d	file:
queueYIELD_IF_USING_PREEMPTION	FreeRTOS/queue.c	122;"	d	file:
read	ArduinoJson/StringTraits/ArduinoStream.hpp	/^    char read() {$/;"	f	class:ArduinoJson::Internals::ArduinoStreamTraits::Reader
read	ArduinoJson/StringTraits/StdStream.hpp	/^    char read() {$/;"	f	class:ArduinoJson::Internals::StdStreamTraits::Reader
remove	ArduinoJson/Data/List.hpp	/^  void remove(iterator it) {$/;"	f	class:ArduinoJson::Internals::List
remove	ArduinoJson/JsonArray.hpp	/^  void remove(size_t index) {$/;"	f	class:ArduinoJson::JsonArray
remove	ArduinoJson/JsonObject.hpp	/^  remove(const TString& key) {$/;"	f	class:ArduinoJson::JsonObject
remove	ArduinoJson/JsonObject.hpp	/^  void remove(const TString* key) {$/;"	f	class:ArduinoJson::JsonObject
removeAt	ArduinoJson/JsonArray.hpp	/^  FORCE_INLINE void removeAt(size_t index) {$/;"	f	class:ArduinoJson::JsonArray
reset	startup.s	/^reset:$/;"	l
round_size_up	ArduinoJson/JsonBuffer.hpp	/^  static FORCE_INLINE size_t round_size_up(size_t bytes) {$/;"	f	class:ArduinoJson::JsonBuffer
semBINARY_SEMAPHORE_QUEUE_LENGTH	FreeRTOS/include/semphr.h	81;"	d
semGIVE_BLOCK_TIME	FreeRTOS/include/semphr.h	83;"	d
semSEMAPHORE_QUEUE_ITEM_LENGTH	FreeRTOS/include/semphr.h	82;"	d
serialize	ArduinoJson/Serialization/JsonSerializerImpl.hpp	/^inline void ArduinoJson::Internals::JsonSerializer<Writer>::serialize($/;"	f	class:ArduinoJson::Internals::JsonSerializer
set	ArduinoJson/Data/ValueSetter.hpp	/^  static bool set(JsonBuffer* buffer, TDestination& destination,$/;"	f	struct:ArduinoJson::Internals::ValueSetter
set	ArduinoJson/Data/ValueSetter.hpp	/^  static bool set(JsonBuffer*, TDestination& destination, TSourceRef source) {$/;"	f	struct:ArduinoJson::Internals::ValueSetter
set	ArduinoJson/JsonArray.hpp	/^  bool set(size_t index, const T *value) {$/;"	f	class:ArduinoJson::JsonArray
set	ArduinoJson/JsonArray.hpp	/^  set(size_t index, T value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonArray
set	ArduinoJson/JsonArray.hpp	/^  typename TypeTraits::EnableIf<!TypeTraits::IsArray<T>::value, bool>::type set($/;"	f	class:ArduinoJson::JsonArray
set	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE bool set(const TValue& value) {$/;"	f	class:ArduinoJson::JsonArraySubscript
set	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE bool set(const TValue& value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonArraySubscript
set	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE bool set(const TValue* value) {$/;"	f	class:ArduinoJson::JsonArraySubscript
set	ArduinoJson/JsonObject.hpp	/^  bool set(const TString* key, const TValue* value) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObject.hpp	/^  set(const TString& key, TValue value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObject.hpp	/^  set(const TString& key, const TValue& value) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObject.hpp	/^  set(const TString& key, const TValue* value) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObject.hpp	/^  set(const TString* key, TValue value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObject.hpp	/^  set(const TString* key, const TValue& value) {$/;"	f	class:ArduinoJson::JsonObject
set	ArduinoJson/JsonObjectSubscript.hpp	/^      set(const TValue& value) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
set	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE bool set(const TValue& value, uint8_t decimals) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
set	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE bool set(const TValue* value) {$/;"	f	class:ArduinoJson::JsonObjectSubscript
setTabSize	ArduinoJson/Serialization/IndentedPrint.hpp	/^  void setTabSize(uint8_t n) {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
set_impl	ArduinoJson/JsonArray.hpp	/^  bool set_impl(size_t index, TValueRef value) {$/;"	f	class:ArduinoJson::JsonArray
set_impl	ArduinoJson/JsonObject.hpp	/^  bool set_impl(TStringRef key, TValueRef value) {$/;"	f	class:ArduinoJson::JsonObject
should_duplicate	ArduinoJson/StringTraits/CharPointer.hpp	/^  static const bool should_duplicate = false;$/;"	m	struct:ArduinoJson::Internals::CharPointerTraits
should_duplicate	ArduinoJson/StringTraits/FlashString.hpp	/^  static const bool should_duplicate = true;$/;"	m	struct:ArduinoJson::Internals::StringTraits
should_duplicate	ArduinoJson/StringTraits/StdString.hpp	/^  static const bool should_duplicate = true;$/;"	m	struct:ArduinoJson::Internals::StdStringTraits
sink	ArduinoJson/Serialization/IndentedPrint.hpp	/^  Print *sink;$/;"	m	class:ArduinoJson::Internals::IndentedPrint
size	ArduinoJson/Data/List.hpp	/^  size_t size() const {$/;"	f	class:ArduinoJson::Internals::List
size	ArduinoJson/DynamicJsonBuffer.hpp	/^    size_t size;$/;"	m	struct:ArduinoJson::DynamicJsonBufferBase::EmptyBlock
size	ArduinoJson/DynamicJsonBuffer.hpp	/^  size_t size() const {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
size	ArduinoJson/JsonVariantBase.hpp	/^  size_t size() const {$/;"	f	class:ArduinoJson::JsonVariantBase
size	ArduinoJson/StaticJsonBuffer.hpp	/^  size_t size() const {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
skipSpacesAndComments	ArduinoJson/Deserialization/Comments.hpp	/^void skipSpacesAndComments(TInput& input) {$/;"	f	namespace:ArduinoJson::Internals
startString	ArduinoJson/Deserialization/StringWriter.hpp	/^  String startString() {$/;"	f	class:ArduinoJson::Internals::StringWriter
startString	ArduinoJson/DynamicJsonBuffer.hpp	/^  String startString() {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
startString	ArduinoJson/StaticJsonBuffer.hpp	/^  String startString() {$/;"	f	class:ArduinoJson::StaticJsonBufferBase
static	FreeRTOS/croutine.c	82;"	d	file:
static	FreeRTOS/tasks.c	153;"	d	file:
strdup	ArduinoJson/JsonBuffer.hpp	/^  char *strdup(const TString *src) {$/;"	f	class:ArduinoJson::JsonBuffer
strdup	ArduinoJson/JsonBuffer.hpp	/^  strdup(const TString &src) {$/;"	f	class:ArduinoJson::JsonBuffer
success	ArduinoJson/Data/List.hpp	/^  bool success() const {$/;"	f	class:ArduinoJson::Internals::List
success	ArduinoJson/JsonArraySubscript.hpp	/^  FORCE_INLINE bool success() const {$/;"	f	class:ArduinoJson::JsonArraySubscript
success	ArduinoJson/JsonObjectSubscript.hpp	/^  FORCE_INLINE bool success() const {$/;"	f	class:ArduinoJson::JsonObjectSubscript
success	ArduinoJson/JsonVariant.hpp	/^  bool success() const {$/;"	f	class:ArduinoJson::JsonVariant
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/StackMacros.h	107;"	d
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/StackMacros.h	122;"	d
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/StackMacros.h	141;"	d
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/StackMacros.h	165;"	d
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/include/StackMacros.h	92;"	d
taskDISABLE_INTERRUPTS	FreeRTOS/include/task.h	242;"	d
taskENABLE_INTERRUPTS	FreeRTOS/include/task.h	252;"	d
taskENTER_CRITICAL	FreeRTOS/include/task.h	217;"	d
taskENTER_CRITICAL_FROM_ISR	FreeRTOS/include/task.h	218;"	d
taskEVENT_LIST_ITEM_VALUE_IN_USE	FreeRTOS/tasks.c	283;"	d	file:
taskEVENT_LIST_ITEM_VALUE_IN_USE	FreeRTOS/tasks.c	285;"	d	file:
taskEXIT_CRITICAL	FreeRTOS/include/task.h	232;"	d
taskEXIT_CRITICAL_FROM_ISR	FreeRTOS/include/task.h	233;"	d
taskNOTIFICATION_RECEIVED	FreeRTOS/tasks.c	112;"	d	file:
taskNOT_WAITING_NOTIFICATION	FreeRTOS/tasks.c	110;"	d	file:
taskRECORD_READY_PRIORITY	FreeRTOS/tasks.c	164;"	d	file:
taskRECORD_READY_PRIORITY	FreeRTOS/tasks.c	206;"	d	file:
taskRESET_READY_PRIORITY	FreeRTOS/tasks.c	196;"	d	file:
taskRESET_READY_PRIORITY	FreeRTOS/tasks.c	225;"	d	file:
taskSCHEDULER_NOT_STARTED	FreeRTOS/include/task.h	258;"	d
taskSCHEDULER_RUNNING	FreeRTOS/include/task.h	259;"	d
taskSCHEDULER_SUSPENDED	FreeRTOS/include/task.h	257;"	d
taskSELECT_HIGHEST_PRIORITY_TASK	FreeRTOS/tasks.c	174;"	d	file:
taskSELECT_HIGHEST_PRIORITY_TASK	FreeRTOS/tasks.c	210;"	d	file:
taskSWITCH_DELAYED_LISTS	FreeRTOS/tasks.c	239;"	d	file:
taskWAITING_NOTIFICATION	FreeRTOS/tasks.c	111;"	d	file:
taskYIELD	FreeRTOS/include/task.h	203;"	d
taskYIELD_IF_USING_PREEMPTION	FreeRTOS/tasks.c	104;"	d	file:
taskYIELD_IF_USING_PREEMPTION	FreeRTOS/tasks.c	106;"	d	file:
that	ArduinoJson/JsonBufferBase.hpp	/^  TDerived *that() {$/;"	f	class:ArduinoJson::JsonBufferBase
this_type	ArduinoJson/JsonObjectSubscript.hpp	/^  typedef JsonObjectSubscript<TStringRef> this_type;$/;"	t	class:ArduinoJson::JsonObjectSubscript
tmrCOMMAND_CHANGE_PERIOD	FreeRTOS/include/timers.h	102;"	d
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR	FreeRTOS/include/timers.h	109;"	d
tmrCOMMAND_DELETE	FreeRTOS/include/timers.h	103;"	d
tmrCOMMAND_EXECUTE_CALLBACK	FreeRTOS/include/timers.h	97;"	d
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR	FreeRTOS/include/timers.h	96;"	d
tmrCOMMAND_RESET	FreeRTOS/include/timers.h	100;"	d
tmrCOMMAND_RESET_FROM_ISR	FreeRTOS/include/timers.h	107;"	d
tmrCOMMAND_START	FreeRTOS/include/timers.h	99;"	d
tmrCOMMAND_START_DONT_TRACE	FreeRTOS/include/timers.h	98;"	d
tmrCOMMAND_START_FROM_ISR	FreeRTOS/include/timers.h	106;"	d
tmrCOMMAND_STOP	FreeRTOS/include/timers.h	101;"	d
tmrCOMMAND_STOP_FROM_ISR	FreeRTOS/include/timers.h	108;"	d
tmrCallbackParameters	FreeRTOS/timers.c	/^typedef struct tmrCallbackParameters$/;"	s	file:
tmrFIRST_FROM_ISR_COMMAND	FreeRTOS/include/timers.h	105;"	d
tmrNO_DELAY	FreeRTOS/timers.c	101;"	d	file:
tmrTIMER_CALLBACK	FreeRTOS/include/FreeRTOS.h	846;"	d
tmrTimerControl	FreeRTOS/timers.c	/^typedef struct tmrTimerControl$/;"	s	file:
tmrTimerParameters	FreeRTOS/timers.c	/^typedef struct tmrTimerParameters$/;"	s	file:
tmrTimerQueueMessage	FreeRTOS/timers.c	/^typedef struct tmrTimerQueueMessage$/;"	s	file:
traceBLOCKING_ON_QUEUE_RECEIVE	FreeRTOS/include/FreeRTOS.h	396;"	d
traceBLOCKING_ON_QUEUE_SEND	FreeRTOS/include/FreeRTOS.h	404;"	d
traceCREATE_COUNTING_SEMAPHORE	FreeRTOS/include/FreeRTOS.h	454;"	d
traceCREATE_COUNTING_SEMAPHORE_FAILED	FreeRTOS/include/FreeRTOS.h	458;"	d
traceCREATE_MUTEX	FreeRTOS/include/FreeRTOS.h	430;"	d
traceCREATE_MUTEX_FAILED	FreeRTOS/include/FreeRTOS.h	434;"	d
traceEND	FreeRTOS/include/FreeRTOS.h	343;"	d
traceEVENT_GROUP_CLEAR_BITS	FreeRTOS/include/FreeRTOS.h	602;"	d
traceEVENT_GROUP_CLEAR_BITS_FROM_ISR	FreeRTOS/include/FreeRTOS.h	606;"	d
traceEVENT_GROUP_CREATE	FreeRTOS/include/FreeRTOS.h	578;"	d
traceEVENT_GROUP_CREATE_FAILED	FreeRTOS/include/FreeRTOS.h	582;"	d
traceEVENT_GROUP_DELETE	FreeRTOS/include/FreeRTOS.h	618;"	d
traceEVENT_GROUP_SET_BITS	FreeRTOS/include/FreeRTOS.h	610;"	d
traceEVENT_GROUP_SET_BITS_FROM_ISR	FreeRTOS/include/FreeRTOS.h	614;"	d
traceEVENT_GROUP_SYNC_BLOCK	FreeRTOS/include/FreeRTOS.h	586;"	d
traceEVENT_GROUP_SYNC_END	FreeRTOS/include/FreeRTOS.h	590;"	d
traceEVENT_GROUP_WAIT_BITS_BLOCK	FreeRTOS/include/FreeRTOS.h	594;"	d
traceEVENT_GROUP_WAIT_BITS_END	FreeRTOS/include/FreeRTOS.h	598;"	d
traceFREE	FreeRTOS/include/FreeRTOS.h	574;"	d
traceGIVE_MUTEX_RECURSIVE	FreeRTOS/include/FreeRTOS.h	438;"	d
traceGIVE_MUTEX_RECURSIVE_FAILED	FreeRTOS/include/FreeRTOS.h	442;"	d
traceINCREASE_TICK_COUNT	FreeRTOS/include/FreeRTOS.h	355;"	d
traceLOW_POWER_IDLE_BEGIN	FreeRTOS/include/FreeRTOS.h	360;"	d
traceLOW_POWER_IDLE_END	FreeRTOS/include/FreeRTOS.h	365;"	d
traceMALLOC	FreeRTOS/include/FreeRTOS.h	570;"	d
traceMOVED_TASK_TO_READY_STATE	FreeRTOS/include/FreeRTOS.h	414;"	d
tracePEND_FUNC_CALL	FreeRTOS/include/FreeRTOS.h	622;"	d
tracePEND_FUNC_CALL_FROM_ISR	FreeRTOS/include/FreeRTOS.h	626;"	d
tracePOST_MOVED_TASK_TO_READY_STATE	FreeRTOS/include/FreeRTOS.h	418;"	d
traceQUEUE_CREATE	FreeRTOS/include/FreeRTOS.h	422;"	d
traceQUEUE_CREATE_FAILED	FreeRTOS/include/FreeRTOS.h	426;"	d
traceQUEUE_DELETE	FreeRTOS/include/FreeRTOS.h	506;"	d
traceQUEUE_PEEK	FreeRTOS/include/FreeRTOS.h	474;"	d
traceQUEUE_PEEK_FROM_ISR	FreeRTOS/include/FreeRTOS.h	478;"	d
traceQUEUE_PEEK_FROM_ISR_FAILED	FreeRTOS/include/FreeRTOS.h	502;"	d
traceQUEUE_RECEIVE	FreeRTOS/include/FreeRTOS.h	470;"	d
traceQUEUE_RECEIVE_FAILED	FreeRTOS/include/FreeRTOS.h	482;"	d
traceQUEUE_RECEIVE_FROM_ISR	FreeRTOS/include/FreeRTOS.h	494;"	d
traceQUEUE_RECEIVE_FROM_ISR_FAILED	FreeRTOS/include/FreeRTOS.h	498;"	d
traceQUEUE_REGISTRY_ADD	FreeRTOS/include/FreeRTOS.h	630;"	d
traceQUEUE_SEND	FreeRTOS/include/FreeRTOS.h	462;"	d
traceQUEUE_SEND_FAILED	FreeRTOS/include/FreeRTOS.h	466;"	d
traceQUEUE_SEND_FROM_ISR	FreeRTOS/include/FreeRTOS.h	486;"	d
traceQUEUE_SEND_FROM_ISR_FAILED	FreeRTOS/include/FreeRTOS.h	490;"	d
traceSTART	FreeRTOS/include/FreeRTOS.h	337;"	d
traceTAKE_MUTEX_RECURSIVE	FreeRTOS/include/FreeRTOS.h	446;"	d
traceTAKE_MUTEX_RECURSIVE_FAILED	FreeRTOS/include/FreeRTOS.h	450;"	d
traceTASK_CREATE	FreeRTOS/include/FreeRTOS.h	510;"	d
traceTASK_CREATE_FAILED	FreeRTOS/include/FreeRTOS.h	514;"	d
traceTASK_DELAY	FreeRTOS/include/FreeRTOS.h	526;"	d
traceTASK_DELAY_UNTIL	FreeRTOS/include/FreeRTOS.h	522;"	d
traceTASK_DELETE	FreeRTOS/include/FreeRTOS.h	518;"	d
traceTASK_INCREMENT_TICK	FreeRTOS/include/FreeRTOS.h	546;"	d
traceTASK_NOTIFY	FreeRTOS/include/FreeRTOS.h	650;"	d
traceTASK_NOTIFY_FROM_ISR	FreeRTOS/include/FreeRTOS.h	654;"	d
traceTASK_NOTIFY_GIVE_FROM_ISR	FreeRTOS/include/FreeRTOS.h	658;"	d
traceTASK_NOTIFY_TAKE	FreeRTOS/include/FreeRTOS.h	638;"	d
traceTASK_NOTIFY_TAKE_BLOCK	FreeRTOS/include/FreeRTOS.h	634;"	d
traceTASK_NOTIFY_WAIT	FreeRTOS/include/FreeRTOS.h	646;"	d
traceTASK_NOTIFY_WAIT_BLOCK	FreeRTOS/include/FreeRTOS.h	642;"	d
traceTASK_PRIORITY_DISINHERIT	FreeRTOS/include/FreeRTOS.h	388;"	d
traceTASK_PRIORITY_INHERIT	FreeRTOS/include/FreeRTOS.h	380;"	d
traceTASK_PRIORITY_SET	FreeRTOS/include/FreeRTOS.h	530;"	d
traceTASK_RESUME	FreeRTOS/include/FreeRTOS.h	538;"	d
traceTASK_RESUME_FROM_ISR	FreeRTOS/include/FreeRTOS.h	542;"	d
traceTASK_SUSPEND	FreeRTOS/include/FreeRTOS.h	534;"	d
traceTASK_SWITCHED_IN	FreeRTOS/include/FreeRTOS.h	349;"	d
traceTASK_SWITCHED_OUT	FreeRTOS/include/FreeRTOS.h	371;"	d
traceTIMER_COMMAND_RECEIVED	FreeRTOS/include/FreeRTOS.h	566;"	d
traceTIMER_COMMAND_SEND	FreeRTOS/include/FreeRTOS.h	558;"	d
traceTIMER_CREATE	FreeRTOS/include/FreeRTOS.h	550;"	d
traceTIMER_CREATE_FAILED	FreeRTOS/include/FreeRTOS.h	554;"	d
traceTIMER_EXPIRED	FreeRTOS/include/FreeRTOS.h	562;"	d
tskBLOCKED_CHAR	FreeRTOS/tasks.c	143;"	d	file:
tskDELETED_CHAR	FreeRTOS/tasks.c	145;"	d	file:
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB	FreeRTOS/tasks.c	136;"	d	file:
tskIDLE_PRIORITY	FreeRTOS/include/task.h	193;"	d
tskKERNEL_VERSION_BUILD	FreeRTOS/include/task.h	91;"	d
tskKERNEL_VERSION_MAJOR	FreeRTOS/include/task.h	89;"	d
tskKERNEL_VERSION_MINOR	FreeRTOS/include/task.h	90;"	d
tskKERNEL_VERSION_NUMBER	FreeRTOS/include/task.h	88;"	d
tskREADY_CHAR	FreeRTOS/tasks.c	144;"	d	file:
tskSTACK_FILL_BYTE	FreeRTOS/tasks.c	118;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_AND_TCB	FreeRTOS/tasks.c	138;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_ONLY	FreeRTOS/tasks.c	137;"	d	file:
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	FreeRTOS/tasks.c	135;"	d	file:
tskSUSPENDED_CHAR	FreeRTOS/tasks.c	146;"	d	file:
tskTCB	FreeRTOS/tasks.c	/^} tskTCB;$/;"	t	typeref:struct:tskTaskControlBlock	file:
tskTaskControlBlock	FreeRTOS/tasks.c	/^typedef struct tskTaskControlBlock$/;"	s	file:
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef JsonArray& type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef JsonObject& type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef T type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef const JsonArray& type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef const JsonObject& type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/Data/JsonVariantAs.hpp	/^  typedef const char* type;$/;"	t	struct:ArduinoJson::Internals::JsonVariantAs
type	ArduinoJson/TypeTraits/EnableIf.hpp	/^  typedef T type;$/;"	t	struct:ArduinoJson::TypeTraits::EnableIf
type	ArduinoJson/TypeTraits/RemoveConst.hpp	/^  typedef T type;$/;"	t	struct:ArduinoJson::TypeTraits::RemoveConst
type	ArduinoJson/TypeTraits/RemoveReference.hpp	/^  typedef T type;$/;"	t	struct:ArduinoJson::TypeTraits::RemoveReference
u	FreeRTOS/include/FreeRTOS.h	/^	} u;$/;"	m	struct:xSTATIC_QUEUE	typeref:union:xSTATIC_QUEUE::__anon4
u	FreeRTOS/queue.c	/^	} u;$/;"	m	struct:QueueDefinition	typeref:union:QueueDefinition::__anon3	file:
u	FreeRTOS/timers.c	/^	} u;$/;"	m	struct:tmrTimerQueueMessage	typeref:union:tmrTimerQueueMessage::__anon8	file:
ucDelayAborted	FreeRTOS/tasks.c	/^		uint8_t ucDelayAborted;$/;"	m	struct:tskTaskControlBlock	file:
ucDummy19	FreeRTOS/include/FreeRTOS.h	/^		uint8_t 		ucDummy19;$/;"	m	struct:xSTATIC_TCB
ucDummy4	FreeRTOS/include/FreeRTOS.h	/^			uint8_t ucDummy4;$/;"	m	struct:xSTATIC_EVENT_GROUP
ucDummy5	FreeRTOS/include/FreeRTOS.h	/^	uint8_t ucDummy5[ 2 ];$/;"	m	struct:xSTATIC_QUEUE
ucDummy6	FreeRTOS/include/FreeRTOS.h	/^		uint8_t ucDummy6;$/;"	m	struct:xSTATIC_QUEUE
ucDummy7	FreeRTOS/include/FreeRTOS.h	/^		uint8_t 		ucDummy7;$/;"	m	struct:xSTATIC_TIMER
ucDummy7	FreeRTOS/include/FreeRTOS.h	/^	uint8_t				ucDummy7[ configMAX_TASK_NAME_LEN ];$/;"	m	struct:xSTATIC_TCB
ucDummy9	FreeRTOS/include/FreeRTOS.h	/^		uint8_t ucDummy9;$/;"	m	struct:xSTATIC_QUEUE
ucHeap	FreeRTOS/portable/MemMang/heap_1.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucHeap	FreeRTOS/portable/MemMang/heap_2.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucHeap	FreeRTOS/portable/MemMang/heap_4.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucMaxSysCallPriority	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	 static unsigned char ucMaxSysCallPriority = 0;$/;"	v	file:
ucNotifyState	FreeRTOS/tasks.c	/^		volatile uint8_t ucNotifyState;$/;"	m	struct:tskTaskControlBlock	file:
ucPortCountLeadingZeros	FreeRTOS/portable/GCC/ARM_CM3/portmacro.h	/^	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )$/;"	f
ucQueueGetQueueType	FreeRTOS/queue.c	/^	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )$/;"	f
ucQueueType	FreeRTOS/queue.c	/^		uint8_t ucQueueType;$/;"	m	struct:QueueDefinition	file:
ucStaticallyAllocated	FreeRTOS/event_groups.c	/^		uint8_t ucStaticallyAllocated; \/*< Set to pdTRUE if the event group is statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:xEventGroupDefinition	file:
ucStaticallyAllocated	FreeRTOS/queue.c	/^		uint8_t ucStaticallyAllocated;	\/*< Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:QueueDefinition	file:
ucStaticallyAllocated	FreeRTOS/tasks.c	/^		uint8_t	ucStaticallyAllocated; 		\/*< Set to pdTRUE if the task is a statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:tskTaskControlBlock	file:
ucStaticallyAllocated	FreeRTOS/timers.c	/^		uint8_t 			ucStaticallyAllocated; \/*<< Set to pdTRUE if the timer was created statically so no attempt is made to free the memory again if the timer is later deleted. *\/$/;"	m	struct:tmrTimerControl	file:
ulDummy16	FreeRTOS/include/FreeRTOS.h	/^		uint32_t		ulDummy16;$/;"	m	struct:xSTATIC_TCB
ulDummy18	FreeRTOS/include/FreeRTOS.h	/^		uint32_t 		ulDummy18;$/;"	m	struct:xSTATIC_TCB
ulLengthInBytes	FreeRTOS/include/task.h	/^	uint32_t ulLengthInBytes;$/;"	m	struct:xMEMORY_REGION
ulMaxPRIGROUPValue	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	 static unsigned long ulMaxPRIGROUPValue = 0;$/;"	v	file:
ulNotifiedValue	FreeRTOS/tasks.c	/^		volatile uint32_t ulNotifiedValue;$/;"	m	struct:tskTaskControlBlock	file:
ulParameter2	FreeRTOS/timers.c	/^	uint32_t ulParameter2;					\/* << The value that will be used as the callback functions second parameter. *\/$/;"	m	struct:tmrCallbackParameters	file:
ulParameters	FreeRTOS/include/task.h	/^	uint32_t ulParameters;$/;"	m	struct:xMEMORY_REGION
ulPortSetInterruptMask	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )$/;"	f
ulRunTimeCounter	FreeRTOS/include/task.h	/^	uint32_t ulRunTimeCounter;		\/* The total run time allocated to the task so far, as defined by the run time stats clock.  See http:\/\/www.freertos.org\/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. *\/$/;"	m	struct:xTASK_STATUS
ulRunTimeCounter	FreeRTOS/tasks.c	/^		uint32_t		ulRunTimeCounter;	\/*< Stores the amount of time the task has spent in the Running state. *\/$/;"	m	struct:tskTaskControlBlock	file:
ulStoppedTimerCompensation	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	static unsigned long ulStoppedTimerCompensation = 0;$/;"	v	file:
ulTaskNotifyTake	FreeRTOS/include/mpu_wrappers.h	123;"	d
ulTaskNotifyTake	FreeRTOS/tasks.c	/^	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )$/;"	f
ulTaskSwitchedInTime	FreeRTOS/tasks.c	/^	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	\/*< Holds the value of a timer\/counter the last time a task was switched in. *\/$/;"	v	file:
ulTimerCountsForOneTick	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	static unsigned long ulTimerCountsForOneTick = 0;$/;"	v	file:
ulTotalRunTime	FreeRTOS/tasks.c	/^	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		\/*< Holds the total amount of execution time as defined by the run time counter clock. *\/$/;"	v	file:
unescapeChar	ArduinoJson/Data/Encoding.hpp	/^  static char unescapeChar(char c) {$/;"	f	class:ArduinoJson::Internals::Encoding
unindent	ArduinoJson/Serialization/IndentedPrint.hpp	/^  void unindent() {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
unindentIfNeeded	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t unindentIfNeeded() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
usStackDepth	FreeRTOS/include/task.h	/^	uint16_t usStackDepth;$/;"	m	struct:xTASK_PARAMETERS
usStackHighWaterMark	FreeRTOS/include/task.h	/^	uint16_t usStackHighWaterMark;	\/* The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. *\/$/;"	m	struct:xTASK_STATUS
uxAutoReload	FreeRTOS/timers.c	/^	UBaseType_t				uxAutoReload;		\/*<< Set to pdTRUE if the timer should be automatically restarted once expired.  Set to pdFALSE if the timer is, in effect, a one-shot timer. *\/$/;"	m	struct:tmrTimerControl	file:
uxBasePriority	FreeRTOS/include/task.h	/^	UBaseType_t uxBasePriority;		\/* The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. *\/$/;"	m	struct:xTASK_STATUS
uxBasePriority	FreeRTOS/tasks.c	/^		UBaseType_t		uxBasePriority;		\/*< The priority last assigned to the task - used by the priority inheritance mechanism. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxCriticalNesting	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;$/;"	v	file:
uxCriticalNesting	FreeRTOS/tasks.c	/^		UBaseType_t		uxCriticalNesting;	\/*< Holds the critical section nesting depth for ports that do not maintain their own count in the port layer. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxCurrentNumberOfTasks	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;$/;"	v	file:
uxCurrentPriority	FreeRTOS/include/task.h	/^	UBaseType_t uxCurrentPriority;	\/* The priority at which the task was running (may be inherited) when the structure was populated. *\/$/;"	m	struct:xTASK_STATUS
uxDeletedTasksWaitingCleanUp	FreeRTOS/tasks.c	/^	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;$/;"	v	file:
uxDummy1	FreeRTOS/include/FreeRTOS.h	/^	UBaseType_t uxDummy1;$/;"	m	struct:xSTATIC_LIST
uxDummy10	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t		uxDummy10[ 2 ];$/;"	m	struct:xSTATIC_TCB
uxDummy12	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t		uxDummy12[ 2 ];$/;"	m	struct:xSTATIC_TCB
uxDummy2	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t uxDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon4
uxDummy20	FreeRTOS/include/FreeRTOS.h	/^		uint8_t			uxDummy20;$/;"	m	struct:xSTATIC_TCB
uxDummy3	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t uxDummy3;$/;"	m	struct:xSTATIC_EVENT_GROUP
uxDummy4	FreeRTOS/include/FreeRTOS.h	/^	UBaseType_t			uxDummy4;$/;"	m	struct:xSTATIC_TIMER
uxDummy4	FreeRTOS/include/FreeRTOS.h	/^	UBaseType_t uxDummy4[ 3 ];$/;"	m	struct:xSTATIC_QUEUE
uxDummy5	FreeRTOS/include/FreeRTOS.h	/^	UBaseType_t			uxDummy5;$/;"	m	struct:xSTATIC_TCB
uxDummy6	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t		uxDummy6;$/;"	m	struct:xSTATIC_TIMER
uxDummy8	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t uxDummy8;$/;"	m	struct:xSTATIC_QUEUE
uxDummy9	FreeRTOS/include/FreeRTOS.h	/^		UBaseType_t		uxDummy9;$/;"	m	struct:xSTATIC_TCB
uxEventBits	FreeRTOS/event_groups.c	/^	EventBits_t uxEventBits;$/;"	m	struct:xEventGroupDefinition	file:
uxEventGroupGetNumber	FreeRTOS/event_groups.c	/^	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )$/;"	f
uxEventGroupNumber	FreeRTOS/event_groups.c	/^		UBaseType_t uxEventGroupNumber;$/;"	m	struct:xEventGroupDefinition	file:
uxIndex	FreeRTOS/include/croutine.h	/^	UBaseType_t 		uxIndex;			\/*< Used to distinguish between co-routines when multiple co-routines use the same co-routine function. *\/$/;"	m	struct:corCoRoutineControlBlock
uxItemSize	FreeRTOS/queue.c	/^	UBaseType_t uxItemSize;			\/*< The size of each items that the queue will hold. *\/$/;"	m	struct:QueueDefinition	file:
uxLength	FreeRTOS/queue.c	/^	UBaseType_t uxLength;			\/*< The length of the queue defined as the number of items it will hold, not the number of bytes. *\/$/;"	m	struct:QueueDefinition	file:
uxListRemove	FreeRTOS/list.c	/^UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )$/;"	f
uxMessagesWaiting	FreeRTOS/queue.c	/^	volatile UBaseType_t uxMessagesWaiting;\/*< The number of items currently in the queue. *\/$/;"	m	struct:QueueDefinition	file:
uxMutexesHeld	FreeRTOS/tasks.c	/^		UBaseType_t		uxMutexesHeld;$/;"	m	struct:tskTaskControlBlock	file:
uxNumberOfItems	FreeRTOS/include/list.h	/^	configLIST_VOLATILE UBaseType_t uxNumberOfItems;$/;"	m	struct:xLIST
uxPendedTicks	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;$/;"	v	file:
uxPriority	FreeRTOS/include/croutine.h	/^	UBaseType_t 		uxPriority;			\/*< The priority of the co-routine in relation to other co-routines. *\/$/;"	m	struct:corCoRoutineControlBlock
uxPriority	FreeRTOS/include/task.h	/^	UBaseType_t uxPriority;$/;"	m	struct:xTASK_PARAMETERS
uxPriority	FreeRTOS/tasks.c	/^	UBaseType_t			uxPriority;			\/*< The priority of the task.  0 is the lowest priority. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxQueueGetQueueNumber	FreeRTOS/queue.c	/^	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )$/;"	f
uxQueueMessagesWaiting	FreeRTOS/include/mpu_wrappers.h	134;"	d
uxQueueMessagesWaiting	FreeRTOS/queue.c	/^UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )$/;"	f
uxQueueMessagesWaitingFromISR	FreeRTOS/queue.c	/^UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )$/;"	f
uxQueueNumber	FreeRTOS/queue.c	/^		UBaseType_t uxQueueNumber;$/;"	m	struct:QueueDefinition	file:
uxQueueSpacesAvailable	FreeRTOS/include/mpu_wrappers.h	135;"	d
uxQueueSpacesAvailable	FreeRTOS/queue.c	/^UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )$/;"	f
uxQueueType	FreeRTOS/queue.c	109;"	d	file:
uxRecursiveCallCount	FreeRTOS/queue.c	/^		UBaseType_t uxRecursiveCallCount;\/*< Maintains a count of the number of times a recursive mutex has been recursively 'taken' when the structure is used as a mutex. *\/$/;"	m	union:QueueDefinition::__anon3	file:
uxSchedulerSuspended	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;$/;"	v	file:
uxSemaphoreGetCount	FreeRTOS/include/semphr.h	1167;"	d
uxState	FreeRTOS/include/croutine.h	/^	uint16_t 			uxState;			\/*< Used internally by the co-routine implementation. *\/$/;"	m	struct:corCoRoutineControlBlock
uxTCBNumber	FreeRTOS/tasks.c	/^		UBaseType_t		uxTCBNumber;		\/*< Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task has been deleted and then recreated. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxTaskGetNumberOfTasks	FreeRTOS/include/mpu_wrappers.h	108;"	d
uxTaskGetNumberOfTasks	FreeRTOS/tasks.c	/^UBaseType_t uxTaskGetNumberOfTasks( void )$/;"	f
uxTaskGetStackHighWaterMark	FreeRTOS/include/mpu_wrappers.h	111;"	d
uxTaskGetStackHighWaterMark	FreeRTOS/tasks.c	/^	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )$/;"	f
uxTaskGetSystemState	FreeRTOS/include/mpu_wrappers.h	118;"	d
uxTaskGetSystemState	FreeRTOS/tasks.c	/^	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )$/;"	f
uxTaskGetTaskNumber	FreeRTOS/tasks.c	/^	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )$/;"	f
uxTaskNumber	FreeRTOS/tasks.c	/^		UBaseType_t		uxTaskNumber;		\/*< Stores a number specifically for use by third party trace code. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxTaskNumber	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;$/;"	v	file:
uxTaskPriorityGet	FreeRTOS/include/mpu_wrappers.h	99;"	d
uxTaskPriorityGet	FreeRTOS/tasks.c	/^	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )$/;"	f
uxTaskPriorityGetFromISR	FreeRTOS/tasks.c	/^	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )$/;"	f
uxTaskResetEventItemValue	FreeRTOS/tasks.c	/^TickType_t uxTaskResetEventItemValue( void )$/;"	f
uxTimerNumber	FreeRTOS/timers.c	/^		UBaseType_t			uxTimerNumber;		\/*<< An ID assigned by trace tools such as FreeRTOS+Trace *\/$/;"	m	struct:tmrTimerControl	file:
uxTopCoRoutineReadyPriority	FreeRTOS/croutine.c	/^static UBaseType_t uxTopCoRoutineReadyPriority = 0;$/;"	v	file:
uxTopReadyPriority	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;$/;"	v	file:
vCoRoutineAddToDelayedList	FreeRTOS/croutine.c	/^void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )$/;"	f
vCoRoutineSchedule	FreeRTOS/croutine.c	/^void vCoRoutineSchedule( void )$/;"	f
vEventGroupClearBitsCallback	FreeRTOS/event_groups.c	/^void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )$/;"	f
vEventGroupDelete	FreeRTOS/event_groups.c	/^void vEventGroupDelete( EventGroupHandle_t xEventGroup )$/;"	f
vEventGroupDelete	FreeRTOS/include/mpu_wrappers.h	178;"	d
vEventGroupSetBitsCallback	FreeRTOS/event_groups.c	/^void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )$/;"	f
vListInitialise	FreeRTOS/list.c	/^void vListInitialise( List_t * const pxList )$/;"	f
vListInitialiseItem	FreeRTOS/list.c	/^void vListInitialiseItem( ListItem_t * const pxItem )$/;"	f
vListInsert	FreeRTOS/list.c	/^void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )$/;"	f
vListInsertEnd	FreeRTOS/list.c	/^void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )$/;"	f
vPortClearInterruptMask	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )$/;"	f
vPortDefineHeapRegions	FreeRTOS/portable/MemMang/heap_5.c	/^void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )$/;"	f
vPortEndScheduler	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void vPortEndScheduler( void )$/;"	f
vPortEnterCritical	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void vPortEnterCritical( void )$/;"	f
vPortExitCritical	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void vPortExitCritical( void )$/;"	f
vPortFree	FreeRTOS/portable/MemMang/heap_1.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	FreeRTOS/portable/MemMang/heap_2.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	FreeRTOS/portable/MemMang/heap_3.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	FreeRTOS/portable/MemMang/heap_4.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	FreeRTOS/portable/MemMang/heap_5.c	/^void vPortFree( void *pv )$/;"	f
vPortInitialiseBlocks	FreeRTOS/portable/MemMang/heap_1.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPortInitialiseBlocks	FreeRTOS/portable/MemMang/heap_2.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPortInitialiseBlocks	FreeRTOS/portable/MemMang/heap_4.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPortSVCHandler	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void vPortSVCHandler( void )$/;"	f
vPortSVCHandler	src/FreeRTOSConfig.h	145;"	d
vPortSVCHandler	src/FreeRTOSConfig_m3.h	145;"	d
vPortSetupTimerInterrupt	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^__attribute__(( weak )) void vPortSetupTimerInterrupt( void )$/;"	f
vPortSuppressTicksAndSleep	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	__attribute__((weak)) void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime )$/;"	f
vPortValidateInterruptPriority	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	void vPortValidateInterruptPriority( void )$/;"	f
vPortYield	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void vPortYield( void )$/;"	f
vQueueAddToRegistry	FreeRTOS/include/FreeRTOS.h	324;"	d
vQueueAddToRegistry	FreeRTOS/include/mpu_wrappers.h	153;"	d
vQueueAddToRegistry	FreeRTOS/queue.c	/^	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
vQueueDelete	FreeRTOS/include/mpu_wrappers.h	136;"	d
vQueueDelete	FreeRTOS/queue.c	/^void vQueueDelete( QueueHandle_t xQueue )$/;"	f
vQueueSetQueueNumber	FreeRTOS/queue.c	/^	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )$/;"	f
vQueueUnregisterQueue	FreeRTOS/include/FreeRTOS.h	325;"	d
vQueueUnregisterQueue	FreeRTOS/include/mpu_wrappers.h	154;"	d
vQueueUnregisterQueue	FreeRTOS/queue.c	/^	void vQueueUnregisterQueue( QueueHandle_t xQueue )$/;"	f
vQueueWaitForMessageRestricted	FreeRTOS/queue.c	/^	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )$/;"	f
vSemaphoreCreateBinary	FreeRTOS/include/semphr.h	136;"	d
vSemaphoreDelete	FreeRTOS/include/semphr.h	1140;"	d
vTaskAllocateMPURegions	FreeRTOS/include/mpu_wrappers.h	94;"	d
vTaskAllocateMPURegions	FreeRTOS/tasks.c	/^	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )$/;"	f
vTaskDelay	FreeRTOS/include/mpu_wrappers.h	96;"	d
vTaskDelay	FreeRTOS/tasks.c	/^	void vTaskDelay( const TickType_t xTicksToDelay )$/;"	f
vTaskDelayUntil	FreeRTOS/include/mpu_wrappers.h	97;"	d
vTaskDelayUntil	FreeRTOS/tasks.c	/^	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )$/;"	f
vTaskDelete	FreeRTOS/include/mpu_wrappers.h	95;"	d
vTaskDelete	FreeRTOS/tasks.c	/^	void vTaskDelete( TaskHandle_t xTaskToDelete )$/;"	f
vTaskEndScheduler	FreeRTOS/tasks.c	/^void vTaskEndScheduler( void )$/;"	f
vTaskEnterCritical	FreeRTOS/tasks.c	/^	void vTaskEnterCritical( void )$/;"	f
vTaskExitCritical	FreeRTOS/tasks.c	/^	void vTaskExitCritical( void )$/;"	f
vTaskGetInfo	FreeRTOS/include/mpu_wrappers.h	101;"	d
vTaskGetInfo	FreeRTOS/tasks.c	/^	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )$/;"	f
vTaskGetRunTimeStats	FreeRTOS/include/mpu_wrappers.h	120;"	d
vTaskGetRunTimeStats	FreeRTOS/tasks.c	/^	void vTaskGetRunTimeStats( char *pcWriteBuffer )$/;"	f
vTaskGetTaskInfo	FreeRTOS/include/FreeRTOS.h	842;"	d
vTaskList	FreeRTOS/include/mpu_wrappers.h	119;"	d
vTaskList	FreeRTOS/tasks.c	/^	void vTaskList( char * pcWriteBuffer )$/;"	f
vTaskMissedYield	FreeRTOS/tasks.c	/^void vTaskMissedYield( void )$/;"	f
vTaskNotifyGiveFromISR	FreeRTOS/tasks.c	/^	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
vTaskPlaceOnEventList	FreeRTOS/tasks.c	/^void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )$/;"	f
vTaskPlaceOnEventListRestricted	FreeRTOS/tasks.c	/^	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )$/;"	f
vTaskPlaceOnUnorderedEventList	FreeRTOS/tasks.c	/^void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )$/;"	f
vTaskPriorityInherit	FreeRTOS/tasks.c	/^	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )$/;"	f
vTaskPrioritySet	FreeRTOS/include/mpu_wrappers.h	102;"	d
vTaskPrioritySet	FreeRTOS/tasks.c	/^	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )$/;"	f
vTaskResume	FreeRTOS/include/mpu_wrappers.h	104;"	d
vTaskResume	FreeRTOS/tasks.c	/^	void vTaskResume( TaskHandle_t xTaskToResume )$/;"	f
vTaskSetApplicationTaskTag	FreeRTOS/include/mpu_wrappers.h	112;"	d
vTaskSetApplicationTaskTag	FreeRTOS/tasks.c	/^	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )$/;"	f
vTaskSetTaskNumber	FreeRTOS/tasks.c	/^	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )$/;"	f
vTaskSetThreadLocalStoragePointer	FreeRTOS/include/mpu_wrappers.h	114;"	d
vTaskSetThreadLocalStoragePointer	FreeRTOS/tasks.c	/^	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )$/;"	f
vTaskSetTimeOutState	FreeRTOS/include/mpu_wrappers.h	127;"	d
vTaskSetTimeOutState	FreeRTOS/tasks.c	/^void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )$/;"	f
vTaskStartScheduler	FreeRTOS/tasks.c	/^void vTaskStartScheduler( void )$/;"	f
vTaskStepTick	FreeRTOS/tasks.c	/^	void vTaskStepTick( const TickType_t xTicksToJump )$/;"	f
vTaskSuspend	FreeRTOS/include/mpu_wrappers.h	103;"	d
vTaskSuspend	FreeRTOS/tasks.c	/^	void vTaskSuspend( TaskHandle_t xTaskToSuspend )$/;"	f
vTaskSuspendAll	FreeRTOS/include/mpu_wrappers.h	105;"	d
vTaskSuspendAll	FreeRTOS/tasks.c	/^void vTaskSuspendAll( void )$/;"	f
vTaskSwitchContext	FreeRTOS/tasks.c	/^void vTaskSwitchContext( void )$/;"	f
vTimerSetTimerID	FreeRTOS/include/mpu_wrappers.h	162;"	d
vTimerSetTimerID	FreeRTOS/timers.c	/^void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )$/;"	f
value	ArduinoJson/JsonPair.hpp	/^  JsonVariant value;$/;"	m	struct:ArduinoJson::JsonPair
value	ArduinoJson/StringTraits/StringTraits.hpp	/^  static const bool value = Internals::StringTraits<T>::has_equals;$/;"	m	struct:ArduinoJson::TypeTraits::IsString
value	ArduinoJson/StringTraits/StringTraits.hpp	/^  static const bool value = false;$/;"	m	struct:ArduinoJson::TypeTraits::IsString
value	ArduinoJson/TypeTraits/IsArray.hpp	/^  static const bool value = false;$/;"	m	struct:ArduinoJson::TypeTraits::IsArray
value	ArduinoJson/TypeTraits/IsArray.hpp	/^  static const bool value = true;$/;"	m	struct:ArduinoJson::TypeTraits::IsArray
value	ArduinoJson/TypeTraits/IsBaseOf.hpp	/^    value = sizeof(probe(reinterpret_cast<TDerived *>(0))) == sizeof(Yes)$/;"	e	enum:ArduinoJson::TypeTraits::IsBaseOf::__anon1
value	ArduinoJson/TypeTraits/IsChar.hpp	/^  static const bool value = IsSame<T, char>::value ||$/;"	m	struct:ArduinoJson::TypeTraits::IsChar
value	ArduinoJson/TypeTraits/IsConst.hpp	/^  static const bool value = false;$/;"	m	struct:ArduinoJson::TypeTraits::IsConst
value	ArduinoJson/TypeTraits/IsConst.hpp	/^  static const bool value = true;$/;"	m	struct:ArduinoJson::TypeTraits::IsConst
value	ArduinoJson/TypeTraits/IsFloatingPoint.hpp	/^  static const bool value = IsSame<T, float>::value || IsSame<T, double>::value;$/;"	m	struct:ArduinoJson::TypeTraits::IsFloatingPoint
value	ArduinoJson/TypeTraits/IsIntegral.hpp	/^  static const bool value = TypeTraits::IsSignedIntegral<T>::value ||$/;"	m	struct:ArduinoJson::TypeTraits::IsIntegral
value	ArduinoJson/TypeTraits/IsSame.hpp	/^  static const bool value = false;$/;"	m	struct:ArduinoJson::TypeTraits::IsSame
value	ArduinoJson/TypeTraits/IsSame.hpp	/^  static const bool value = true;$/;"	m	struct:ArduinoJson::TypeTraits::IsSame
value	ArduinoJson/TypeTraits/IsSignedIntegral.hpp	/^  static const bool value = TypeTraits::IsSame<T, signed char>::value ||$/;"	m	struct:ArduinoJson::TypeTraits::IsSignedIntegral
value	ArduinoJson/TypeTraits/IsUnsignedIntegral.hpp	/^  static const bool value = TypeTraits::IsSame<T, unsigned char>::value ||$/;"	m	struct:ArduinoJson::TypeTraits::IsUnsignedIntegral
value_type	ArduinoJson/Data/List.hpp	/^  typedef T value_type;$/;"	t	class:ArduinoJson::Internals::List
variantAsArray	ArduinoJson/JsonVariantImpl.hpp	/^inline JsonArray &JsonVariant::variantAsArray() const {$/;"	f	class:ArduinoJson::JsonVariant
variantAsFloat	ArduinoJson/JsonVariantImpl.hpp	/^inline T JsonVariant::variantAsFloat() const {$/;"	f	class:ArduinoJson::JsonVariant
variantAsInteger	ArduinoJson/JsonVariantImpl.hpp	/^inline T JsonVariant::variantAsInteger() const {$/;"	f	class:ArduinoJson::JsonVariant
variantAsObject	ArduinoJson/JsonVariantImpl.hpp	/^inline JsonObject &JsonVariant::variantAsObject() const {$/;"	f	class:ArduinoJson::JsonVariant
variantAsString	ArduinoJson/JsonVariantImpl.hpp	/^inline const char *JsonVariant::variantAsString() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsArray	ArduinoJson/JsonVariant.hpp	/^  bool variantIsArray() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsBoolean	ArduinoJson/JsonVariantImpl.hpp	/^inline bool JsonVariant::variantIsBoolean() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsFloat	ArduinoJson/JsonVariantImpl.hpp	/^inline bool JsonVariant::variantIsFloat() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsInteger	ArduinoJson/JsonVariantImpl.hpp	/^inline bool JsonVariant::variantIsInteger() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsObject	ArduinoJson/JsonVariant.hpp	/^  bool variantIsObject() const {$/;"	f	class:ArduinoJson::JsonVariant
variantIsString	ArduinoJson/JsonVariant.hpp	/^  bool variantIsString() const {$/;"	f	class:ArduinoJson::JsonVariant
writeBlockClose	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeBlockClose(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeBlockOpen	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeBlockOpen(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeBoolean	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeBoolean(bool value) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeChar	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeChar(char c) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeColon	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeColon() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeColon	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeColon() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeComma	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeComma() {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeComma	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeComma() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeFloat	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeFloat(JsonFloat value, uint8_t digits = 2) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeInteger	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeInteger(JsonUInt value) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeNormalChar	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeNormalChar(char c) {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeQuoteOpen	ArduinoJson/Serialization/Prettyfier.hpp	/^  size_t writeQuoteOpen() {$/;"	f	class:ArduinoJson::Internals::Prettyfier
writeRaw	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeRaw(char c) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeRaw	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeRaw(const char *s) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeString	ArduinoJson/Serialization/JsonWriter.hpp	/^  void writeString(const char *value) {$/;"	f	class:ArduinoJson::Internals::JsonWriter
writeTabs	ArduinoJson/Serialization/IndentedPrint.hpp	/^  size_t writeTabs() {$/;"	f	class:ArduinoJson::Internals::IndentedPrint
xActiveTimerList1	FreeRTOS/timers.c	/^PRIVILEGED_DATA static List_t xActiveTimerList1;$/;"	v	file:
xActiveTimerList2	FreeRTOS/timers.c	/^PRIVILEGED_DATA static List_t xActiveTimerList2;$/;"	v	file:
xBlockAllocatedBit	FreeRTOS/portable/MemMang/heap_4.c	/^static size_t xBlockAllocatedBit = 0;$/;"	v	file:
xBlockAllocatedBit	FreeRTOS/portable/MemMang/heap_5.c	/^static size_t xBlockAllocatedBit = 0;$/;"	v	file:
xBlockSize	FreeRTOS/portable/MemMang/heap_2.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xBlockSize	FreeRTOS/portable/MemMang/heap_4.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xBlockSize	FreeRTOS/portable/MemMang/heap_5.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xCallbackParameters	FreeRTOS/timers.c	/^			CallbackParameters_t xCallbackParameters;$/;"	m	union:tmrTimerQueueMessage::__anon8	file:
xCoRoutineCreate	FreeRTOS/croutine.c	/^BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )$/;"	f
xCoRoutineHandle	FreeRTOS/include/FreeRTOS.h	836;"	d
xCoRoutineRemoveFromEventList	FreeRTOS/croutine.c	/^BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )$/;"	f
xCoRoutineTickCount	FreeRTOS/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xDelayedCoRoutineList1	FreeRTOS/croutine.c	/^static List_t xDelayedCoRoutineList1;									\/*< Delayed co-routines. *\/$/;"	v	file:
xDelayedCoRoutineList2	FreeRTOS/croutine.c	/^static List_t xDelayedCoRoutineList2;									\/*< Delayed co-routines (two lists are used - one for delays that have overflowed the current tick count. *\/$/;"	v	file:
xDelayedTaskList1	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList1;						\/*< Delayed tasks. *\/$/;"	v	file:
xDelayedTaskList2	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList2;						\/*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. *\/$/;"	v	file:
xDummy1	FreeRTOS/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_EVENT_GROUP
xDummy1	FreeRTOS/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_LIST_ITEM
xDummy1	FreeRTOS/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_MINI_LIST_ITEM
xDummy17	FreeRTOS/include/FreeRTOS.h	/^		struct	_reent	xDummy17;$/;"	m	struct:xSTATIC_TCB	typeref:struct:xSTATIC_TCB::_reent
xDummy2	FreeRTOS/include/FreeRTOS.h	/^		xMPU_SETTINGS	xDummy2;$/;"	m	struct:xSTATIC_TCB
xDummy2	FreeRTOS/include/FreeRTOS.h	/^	StaticListItem_t	xDummy2;$/;"	m	struct:xSTATIC_TIMER
xDummy2	FreeRTOS/include/FreeRTOS.h	/^	StaticList_t xDummy2;$/;"	m	struct:xSTATIC_EVENT_GROUP
xDummy3	FreeRTOS/include/FreeRTOS.h	/^	StaticListItem_t	xDummy3[ 2 ];$/;"	m	struct:xSTATIC_TCB
xDummy3	FreeRTOS/include/FreeRTOS.h	/^	StaticList_t xDummy3[ 2 ];$/;"	m	struct:xSTATIC_QUEUE
xDummy3	FreeRTOS/include/FreeRTOS.h	/^	StaticMiniListItem_t xDummy3;$/;"	m	struct:xSTATIC_LIST
xDummy3	FreeRTOS/include/FreeRTOS.h	/^	TickType_t			xDummy3;$/;"	m	struct:xSTATIC_TIMER
xEnd	FreeRTOS/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	file:
xEventGroupClearBits	FreeRTOS/event_groups.c	/^EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )$/;"	f
xEventGroupClearBits	FreeRTOS/include/mpu_wrappers.h	175;"	d
xEventGroupClearBitsFromISR	FreeRTOS/event_groups.c	/^	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )$/;"	f
xEventGroupClearBitsFromISR	FreeRTOS/include/event_groups.h	451;"	d
xEventGroupCreate	FreeRTOS/event_groups.c	/^	EventGroupHandle_t xEventGroupCreate( void )$/;"	f
xEventGroupCreate	FreeRTOS/include/mpu_wrappers.h	172;"	d
xEventGroupCreateStatic	FreeRTOS/event_groups.c	/^	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )$/;"	f
xEventGroupCreateStatic	FreeRTOS/include/mpu_wrappers.h	173;"	d
xEventGroupDefinition	FreeRTOS/event_groups.c	/^typedef struct xEventGroupDefinition$/;"	s	file:
xEventGroupGetBits	FreeRTOS/include/event_groups.h	749;"	d
xEventGroupGetBitsFromISR	FreeRTOS/event_groups.c	/^EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )$/;"	f
xEventGroupSetBits	FreeRTOS/event_groups.c	/^EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )$/;"	f
xEventGroupSetBits	FreeRTOS/include/mpu_wrappers.h	176;"	d
xEventGroupSetBitsFromISR	FreeRTOS/event_groups.c	/^	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xEventGroupSetBitsFromISR	FreeRTOS/include/event_groups.h	603;"	d
xEventGroupSync	FreeRTOS/event_groups.c	/^EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )$/;"	f
xEventGroupSync	FreeRTOS/include/mpu_wrappers.h	177;"	d
xEventGroupWaitBits	FreeRTOS/event_groups.c	/^EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )$/;"	f
xEventGroupWaitBits	FreeRTOS/include/mpu_wrappers.h	174;"	d
xEventListItem	FreeRTOS/include/croutine.h	/^	ListItem_t			xEventListItem;		\/*< List item used to place the CRCB in event lists. *\/$/;"	m	struct:corCoRoutineControlBlock
xEventListItem	FreeRTOS/tasks.c	/^	ListItem_t			xEventListItem;		\/*< Used to reference a task from an event list. *\/$/;"	m	struct:tskTaskControlBlock	file:
xFreeBytesRemaining	FreeRTOS/portable/MemMang/heap_2.c	/^static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;$/;"	v	file:
xFreeBytesRemaining	FreeRTOS/portable/MemMang/heap_4.c	/^static size_t xFreeBytesRemaining = 0U;$/;"	v	file:
xFreeBytesRemaining	FreeRTOS/portable/MemMang/heap_5.c	/^static size_t xFreeBytesRemaining = 0U;$/;"	v	file:
xGenericListItem	FreeRTOS/include/croutine.h	/^	ListItem_t			xGenericListItem;	\/*< List item used to place the CRCB in ready and blocked queues. *\/$/;"	m	struct:corCoRoutineControlBlock
xHandle	FreeRTOS/include/task.h	/^	TaskHandle_t xHandle;			\/* The handle of the task to which the rest of the information in the structure relates. *\/$/;"	m	struct:xTASK_STATUS
xHandle	FreeRTOS/queue.c	/^		QueueHandle_t xHandle;$/;"	m	struct:QUEUE_REGISTRY_ITEM	file:
xHeapStructSize	FreeRTOS/portable/MemMang/heap_4.c	/^static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );$/;"	v	file:
xHeapStructSize	FreeRTOS/portable/MemMang/heap_5.c	/^static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );$/;"	v	file:
xIdleTaskHandle	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			\/*< Holds the handle of the idle task.  The idle task is created automatically when the scheduler is started. *\/$/;"	v	file:
xItemValue	FreeRTOS/include/list.h	/^	configLIST_VOLATILE TickType_t xItemValue;			\/*< The value being listed.  In most cases this is used to sort the list in descending order. *\/$/;"	m	struct:xLIST_ITEM
xItemValue	FreeRTOS/include/list.h	/^	configLIST_VOLATILE TickType_t xItemValue;$/;"	m	struct:xMINI_LIST_ITEM
xLIST	FreeRTOS/include/list.h	/^typedef struct xLIST$/;"	s
xLIST_ITEM	FreeRTOS/include/list.h	/^struct xLIST_ITEM$/;"	s
xLastTickCount	FreeRTOS/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xList	FreeRTOS/include/FreeRTOS.h	849;"	d
xListEnd	FreeRTOS/include/list.h	/^	MiniListItem_t xListEnd;							\/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. *\/$/;"	m	struct:xLIST
xListItem	FreeRTOS/include/FreeRTOS.h	848;"	d
xMEMORY_REGION	FreeRTOS/include/task.h	/^typedef struct xMEMORY_REGION$/;"	s
xMINI_LIST_ITEM	FreeRTOS/include/list.h	/^struct xMINI_LIST_ITEM$/;"	s
xMPUSettings	FreeRTOS/tasks.c	/^		xMPU_SETTINGS	xMPUSettings;		\/*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB STRUCT. *\/$/;"	m	struct:tskTaskControlBlock	file:
xMaximumPossibleSuppressedTicks	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^	static unsigned long xMaximumPossibleSuppressedTicks = 0;$/;"	v	file:
xMemoryRegion	FreeRTOS/include/FreeRTOS.h	832;"	d
xMessageID	FreeRTOS/timers.c	/^	BaseType_t			xMessageID;			\/*<< The command being sent to the timer service task. *\/$/;"	m	struct:tmrTimerQueueMessage	file:
xMessageValue	FreeRTOS/timers.c	/^	TickType_t			xMessageValue;		\/*<< An optional value used by a subset of commands, for example, when changing the period of a timer. *\/$/;"	m	struct:tmrTimerParameters	file:
xMinimumEverFreeBytesRemaining	FreeRTOS/portable/MemMang/heap_4.c	/^static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	file:
xMinimumEverFreeBytesRemaining	FreeRTOS/portable/MemMang/heap_5.c	/^static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	file:
xNewLib_reent	FreeRTOS/tasks.c	/^		struct	_reent xNewLib_reent;$/;"	m	struct:tskTaskControlBlock	typeref:struct:tskTaskControlBlock::_reent	file:
xNextFreeByte	FreeRTOS/portable/MemMang/heap_1.c	/^static size_t xNextFreeByte = ( size_t ) 0;$/;"	v	file:
xNextTaskUnblockTime	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; \/* Initialised to portMAX_DELAY before the scheduler starts. *\/$/;"	v	file:
xNumOfOverflows	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;$/;"	v	file:
xOverflowCount	FreeRTOS/include/task.h	/^	BaseType_t xOverflowCount;$/;"	m	struct:xTIME_OUT
xPassedTicks	FreeRTOS/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xPendingReadyCoRoutineList	FreeRTOS/croutine.c	/^static List_t xPendingReadyCoRoutineList;								\/*< Holds co-routines that have been readied by an external event.  They cannot be added directly to the ready lists as the ready lists cannot be accessed by interrupts. *\/$/;"	v	file:
xPendingReadyList	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static List_t xPendingReadyList;						\/*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. *\/$/;"	v	file:
xPortGetFreeHeapSize	FreeRTOS/portable/MemMang/heap_1.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	FreeRTOS/portable/MemMang/heap_2.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	FreeRTOS/portable/MemMang/heap_4.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	FreeRTOS/portable/MemMang/heap_5.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetMinimumEverFreeHeapSize	FreeRTOS/portable/MemMang/heap_4.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f
xPortGetMinimumEverFreeHeapSize	FreeRTOS/portable/MemMang/heap_5.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f
xPortPendSVHandler	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void xPortPendSVHandler( void )$/;"	f
xPortPendSVHandler	src/FreeRTOSConfig.h	146;"	d
xPortPendSVHandler	src/FreeRTOSConfig_m3.h	146;"	d
xPortStartScheduler	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^portBASE_TYPE xPortStartScheduler( void )$/;"	f
xPortSysTickHandler	FreeRTOS/portable/GCC/ARM_CM3/port.c	/^void xPortSysTickHandler( void )$/;"	f
xPortSysTickHandler	src/FreeRTOSConfig.h	147;"	d
xPortSysTickHandler	src/FreeRTOSConfig_m3.h	147;"	d
xQUEUE	FreeRTOS/queue.c	/^} xQUEUE;$/;"	t	typeref:struct:QueueDefinition	file:
xQueueAddToSet	FreeRTOS/include/mpu_wrappers.h	147;"	d
xQueueAddToSet	FreeRTOS/queue.c	/^	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
xQueueCRReceive	FreeRTOS/queue.c	/^	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )$/;"	f
xQueueCRReceiveFromISR	FreeRTOS/queue.c	/^	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )$/;"	f
xQueueCRSend	FreeRTOS/queue.c	/^	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )$/;"	f
xQueueCRSendFromISR	FreeRTOS/queue.c	/^	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )$/;"	f
xQueueCreate	FreeRTOS/include/queue.h	186;"	d
xQueueCreateCountingSemaphore	FreeRTOS/include/mpu_wrappers.h	139;"	d
xQueueCreateCountingSemaphore	FreeRTOS/queue.c	/^	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )$/;"	f
xQueueCreateCountingSemaphoreStatic	FreeRTOS/include/mpu_wrappers.h	140;"	d
xQueueCreateCountingSemaphoreStatic	FreeRTOS/queue.c	/^	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )$/;"	f
xQueueCreateMutex	FreeRTOS/include/mpu_wrappers.h	137;"	d
xQueueCreateMutex	FreeRTOS/queue.c	/^	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )$/;"	f
xQueueCreateMutexStatic	FreeRTOS/include/mpu_wrappers.h	138;"	d
xQueueCreateMutexStatic	FreeRTOS/queue.c	/^	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )$/;"	f
xQueueCreateSet	FreeRTOS/include/mpu_wrappers.h	146;"	d
xQueueCreateSet	FreeRTOS/queue.c	/^	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )$/;"	f
xQueueCreateStatic	FreeRTOS/include/queue.h	272;"	d
xQueueGenericCreate	FreeRTOS/include/mpu_wrappers.h	144;"	d
xQueueGenericCreate	FreeRTOS/queue.c	/^	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )$/;"	f
xQueueGenericCreateStatic	FreeRTOS/include/mpu_wrappers.h	145;"	d
xQueueGenericCreateStatic	FreeRTOS/queue.c	/^	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )$/;"	f
xQueueGenericReceive	FreeRTOS/include/mpu_wrappers.h	133;"	d
xQueueGenericReceive	FreeRTOS/queue.c	/^BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )$/;"	f
xQueueGenericReset	FreeRTOS/include/mpu_wrappers.h	150;"	d
xQueueGenericReset	FreeRTOS/queue.c	/^BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )$/;"	f
xQueueGenericSend	FreeRTOS/include/mpu_wrappers.h	132;"	d
xQueueGenericSend	FreeRTOS/queue.c	/^BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )$/;"	f
xQueueGenericSendFromISR	FreeRTOS/queue.c	/^BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )$/;"	f
xQueueGetMutexHolder	FreeRTOS/include/mpu_wrappers.h	141;"	d
xQueueGetMutexHolder	FreeRTOS/queue.c	/^	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )$/;"	f
xQueueGiveFromISR	FreeRTOS/queue.c	/^BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )$/;"	f
xQueueGiveMutexRecursive	FreeRTOS/include/mpu_wrappers.h	143;"	d
xQueueGiveMutexRecursive	FreeRTOS/queue.c	/^	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )$/;"	f
xQueueHandle	FreeRTOS/include/FreeRTOS.h	827;"	d
xQueueIsQueueEmptyFromISR	FreeRTOS/queue.c	/^BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )$/;"	f
xQueueIsQueueFullFromISR	FreeRTOS/queue.c	/^BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )$/;"	f
xQueueOverwrite	FreeRTOS/include/queue.h	604;"	d
xQueueOverwriteFromISR	FreeRTOS/include/queue.h	1287;"	d
xQueuePeek	FreeRTOS/include/queue.h	788;"	d
xQueuePeekFromISR	FreeRTOS/queue.c	/^BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )$/;"	f
xQueueReceive	FreeRTOS/include/queue.h	914;"	d
xQueueReceiveFromISR	FreeRTOS/queue.c	/^BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )$/;"	f
xQueueRegistry	FreeRTOS/queue.c	/^	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];$/;"	v
xQueueRegistryItem	FreeRTOS/queue.c	/^	} xQueueRegistryItem;$/;"	t	typeref:struct:QUEUE_REGISTRY_ITEM	file:
xQueueRemoveFromSet	FreeRTOS/include/mpu_wrappers.h	148;"	d
xQueueRemoveFromSet	FreeRTOS/queue.c	/^	BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
xQueueReset	FreeRTOS/include/queue.h	1576;"	d
xQueueSelectFromSet	FreeRTOS/include/mpu_wrappers.h	149;"	d
xQueueSelectFromSet	FreeRTOS/queue.c	/^	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )$/;"	f
xQueueSelectFromSetFromISR	FreeRTOS/queue.c	/^	QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )$/;"	f
xQueueSend	FreeRTOS/include/queue.h	521;"	d
xQueueSendFromISR	FreeRTOS/include/queue.h	1361;"	d
xQueueSendToBack	FreeRTOS/include/queue.h	437;"	d
xQueueSendToBackFromISR	FreeRTOS/include/queue.h	1200;"	d
xQueueSendToFront	FreeRTOS/include/queue.h	355;"	d
xQueueSendToFrontFromISR	FreeRTOS/include/queue.h	1129;"	d
xQueueSetHandle	FreeRTOS/include/FreeRTOS.h	829;"	d
xQueueSetMemberHandle	FreeRTOS/include/FreeRTOS.h	830;"	d
xQueueTakeMutexRecursive	FreeRTOS/include/mpu_wrappers.h	142;"	d
xQueueTakeMutexRecursive	FreeRTOS/queue.c	/^	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )$/;"	f
xRegions	FreeRTOS/include/task.h	/^	MemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];$/;"	m	struct:xTASK_PARAMETERS
xSTATIC_EVENT_GROUP	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_EVENT_GROUP$/;"	s
xSTATIC_LIST	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST$/;"	s
xSTATIC_LIST_ITEM	FreeRTOS/include/FreeRTOS.h	/^struct xSTATIC_LIST_ITEM$/;"	s
xSTATIC_MINI_LIST_ITEM	FreeRTOS/include/FreeRTOS.h	/^struct xSTATIC_MINI_LIST_ITEM$/;"	s
xSTATIC_QUEUE	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_QUEUE$/;"	s
xSTATIC_TCB	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_TCB$/;"	s
xSTATIC_TIMER	FreeRTOS/include/FreeRTOS.h	/^typedef struct xSTATIC_TIMER$/;"	s
xSchedulerRunning	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;$/;"	v	file:
xSemaphoreCreateBinary	FreeRTOS/include/semphr.h	204;"	d
xSemaphoreCreateBinaryStatic	FreeRTOS/include/semphr.h	263;"	d
xSemaphoreCreateCounting	FreeRTOS/include/semphr.h	1040;"	d
xSemaphoreCreateCountingStatic	FreeRTOS/include/semphr.h	1125;"	d
xSemaphoreCreateMutex	FreeRTOS/include/semphr.h	758;"	d
xSemaphoreCreateMutexStatic	FreeRTOS/include/semphr.h	819;"	d
xSemaphoreCreateRecursiveMutex	FreeRTOS/include/semphr.h	887;"	d
xSemaphoreCreateRecursiveMutexStatic	FreeRTOS/include/semphr.h	960;"	d
xSemaphoreGetMutexHolder	FreeRTOS/include/semphr.h	1155;"	d
xSemaphoreGive	FreeRTOS/include/semphr.h	489;"	d
xSemaphoreGiveFromISR	FreeRTOS/include/semphr.h	666;"	d
xSemaphoreGiveRecursive	FreeRTOS/include/semphr.h	574;"	d
xSemaphoreHandle	FreeRTOS/include/FreeRTOS.h	828;"	d
xSemaphoreTake	FreeRTOS/include/semphr.h	331;"	d
xSemaphoreTakeFromISR	FreeRTOS/include/semphr.h	700;"	d
xSemaphoreTakeRecursive	FreeRTOS/include/semphr.h	425;"	d
xSizeInBytes	FreeRTOS/include/portable.h	/^	size_t xSizeInBytes;$/;"	m	struct:HeapRegion
xStart	FreeRTOS/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	file:
xStart	FreeRTOS/portable/MemMang/heap_4.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
xStart	FreeRTOS/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
xStateListItem	FreeRTOS/tasks.c	/^	ListItem_t			xStateListItem;	\/*< The list that the state list item of a task is reference from denotes the state of that task (Ready, Blocked, Suspended ). *\/$/;"	m	struct:tskTaskControlBlock	file:
xSuspendedTaskList	FreeRTOS/tasks.c	/^	PRIVILEGED_DATA static List_t xSuspendedTaskList;					\/*< Tasks that are currently suspended. *\/$/;"	v	file:
xTASK_PARAMETERS	FreeRTOS/include/task.h	/^typedef struct xTASK_PARAMETERS$/;"	s
xTASK_STATUS	FreeRTOS/include/task.h	/^typedef struct xTASK_STATUS$/;"	s
xTIMER	FreeRTOS/timers.c	/^} xTIMER;$/;"	t	typeref:struct:tmrTimerControl	file:
xTIME_OUT	FreeRTOS/include/task.h	/^typedef struct xTIME_OUT$/;"	s
xTaskAbortDelay	FreeRTOS/include/mpu_wrappers.h	98;"	d
xTaskAbortDelay	FreeRTOS/tasks.c	/^	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )$/;"	f
xTaskCallApplicationTaskHook	FreeRTOS/include/mpu_wrappers.h	116;"	d
xTaskCallApplicationTaskHook	FreeRTOS/tasks.c	/^	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )$/;"	f
xTaskCheckForTimeOut	FreeRTOS/include/mpu_wrappers.h	128;"	d
xTaskCheckForTimeOut	FreeRTOS/tasks.c	/^BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )$/;"	f
xTaskCreate	FreeRTOS/include/mpu_wrappers.h	91;"	d
xTaskCreate	FreeRTOS/tasks.c	/^	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,$/;"	f
xTaskCreateRestricted	FreeRTOS/include/mpu_wrappers.h	93;"	d
xTaskCreateRestricted	FreeRTOS/tasks.c	/^	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask )$/;"	f
xTaskCreateStatic	FreeRTOS/include/mpu_wrappers.h	92;"	d
xTaskCreateStatic	FreeRTOS/tasks.c	/^	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,$/;"	f
xTaskGenericNotify	FreeRTOS/include/mpu_wrappers.h	121;"	d
xTaskGenericNotify	FreeRTOS/tasks.c	/^	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )$/;"	f
xTaskGenericNotifyFromISR	FreeRTOS/tasks.c	/^	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xTaskGetApplicationTaskTag	FreeRTOS/include/mpu_wrappers.h	113;"	d
xTaskGetApplicationTaskTag	FreeRTOS/tasks.c	/^	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )$/;"	f
xTaskGetCurrentTaskHandle	FreeRTOS/include/mpu_wrappers.h	126;"	d
xTaskGetCurrentTaskHandle	FreeRTOS/tasks.c	/^	TaskHandle_t xTaskGetCurrentTaskHandle( void )$/;"	f
xTaskGetHandle	FreeRTOS/include/mpu_wrappers.h	110;"	d
xTaskGetHandle	FreeRTOS/tasks.c	/^	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
xTaskGetIdleTaskHandle	FreeRTOS/include/mpu_wrappers.h	117;"	d
xTaskGetIdleTaskHandle	FreeRTOS/tasks.c	/^	TaskHandle_t xTaskGetIdleTaskHandle( void )$/;"	f
xTaskGetSchedulerState	FreeRTOS/include/mpu_wrappers.h	129;"	d
xTaskGetSchedulerState	FreeRTOS/tasks.c	/^	BaseType_t xTaskGetSchedulerState( void )$/;"	f
xTaskGetTickCount	FreeRTOS/include/mpu_wrappers.h	107;"	d
xTaskGetTickCount	FreeRTOS/tasks.c	/^TickType_t xTaskGetTickCount( void )$/;"	f
xTaskGetTickCountFromISR	FreeRTOS/tasks.c	/^TickType_t xTaskGetTickCountFromISR( void )$/;"	f
xTaskHandle	FreeRTOS/include/FreeRTOS.h	826;"	d
xTaskIncrementTick	FreeRTOS/tasks.c	/^BaseType_t xTaskIncrementTick( void )$/;"	f
xTaskNotify	FreeRTOS/include/task.h	1712;"	d
xTaskNotifyAndQuery	FreeRTOS/include/task.h	1713;"	d
xTaskNotifyAndQueryFromISR	FreeRTOS/include/task.h	1804;"	d
xTaskNotifyFromISR	FreeRTOS/include/task.h	1803;"	d
xTaskNotifyGive	FreeRTOS/include/task.h	1925;"	d
xTaskNotifyStateClear	FreeRTOS/include/mpu_wrappers.h	124;"	d
xTaskNotifyStateClear	FreeRTOS/tasks.c	/^	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )$/;"	f
xTaskNotifyWait	FreeRTOS/include/mpu_wrappers.h	122;"	d
xTaskNotifyWait	FreeRTOS/tasks.c	/^	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )$/;"	f
xTaskNumber	FreeRTOS/include/task.h	/^	UBaseType_t xTaskNumber;		\/* A number unique to the task. *\/$/;"	m	struct:xTASK_STATUS
xTaskParameters	FreeRTOS/include/FreeRTOS.h	833;"	d
xTaskPriorityDisinherit	FreeRTOS/tasks.c	/^	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )$/;"	f
xTaskRemoveFromEventList	FreeRTOS/tasks.c	/^BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )$/;"	f
xTaskRemoveFromUnorderedEventList	FreeRTOS/tasks.c	/^BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )$/;"	f
xTaskResumeAll	FreeRTOS/include/mpu_wrappers.h	106;"	d
xTaskResumeAll	FreeRTOS/tasks.c	/^BaseType_t xTaskResumeAll( void )$/;"	f
xTaskResumeFromISR	FreeRTOS/tasks.c	/^	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )$/;"	f
xTaskStatusType	FreeRTOS/include/FreeRTOS.h	834;"	d
xTasksWaitingForBits	FreeRTOS/event_groups.c	/^	List_t xTasksWaitingForBits;		\/*< List of tasks waiting for a bit to be set. *\/$/;"	m	struct:xEventGroupDefinition	file:
xTasksWaitingTermination	FreeRTOS/tasks.c	/^	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				\/*< Tasks that have been deleted - but their memory not yet freed. *\/$/;"	v	file:
xTasksWaitingToReceive	FreeRTOS/queue.c	/^	List_t xTasksWaitingToReceive;	\/*< List of tasks that are blocked waiting to read from this queue.  Stored in priority order. *\/$/;"	m	struct:QueueDefinition	file:
xTasksWaitingToSend	FreeRTOS/queue.c	/^	List_t xTasksWaitingToSend;		\/*< List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. *\/$/;"	m	struct:QueueDefinition	file:
xTickCount	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;$/;"	v	file:
xTimeOnEntering	FreeRTOS/include/task.h	/^	TickType_t xTimeOnEntering;$/;"	m	struct:xTIME_OUT
xTimeOutType	FreeRTOS/include/FreeRTOS.h	831;"	d
xTimerChangePeriod	FreeRTOS/include/timers.h	667;"	d
xTimerChangePeriodFromISR	FreeRTOS/include/timers.h	1051;"	d
xTimerCreate	FreeRTOS/include/mpu_wrappers.h	159;"	d
xTimerCreate	FreeRTOS/timers.c	/^	TimerHandle_t xTimerCreate(	const char * const pcTimerName,$/;"	f
xTimerCreateStatic	FreeRTOS/include/mpu_wrappers.h	160;"	d
xTimerCreateStatic	FreeRTOS/timers.c	/^	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,$/;"	f
xTimerCreateTimerTask	FreeRTOS/timers.c	/^BaseType_t xTimerCreateTimerTask( void )$/;"	f
xTimerDelete	FreeRTOS/include/timers.h	705;"	d
xTimerGenericCommand	FreeRTOS/include/mpu_wrappers.h	169;"	d
xTimerGenericCommand	FreeRTOS/timers.c	/^BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )$/;"	f
xTimerGetExpiryTime	FreeRTOS/include/mpu_wrappers.h	168;"	d
xTimerGetExpiryTime	FreeRTOS/timers.c	/^TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )$/;"	f
xTimerGetPeriod	FreeRTOS/include/mpu_wrappers.h	167;"	d
xTimerGetPeriod	FreeRTOS/timers.c	/^TickType_t xTimerGetPeriod( TimerHandle_t xTimer )$/;"	f
xTimerGetTimerDaemonTaskHandle	FreeRTOS/include/mpu_wrappers.h	164;"	d
xTimerGetTimerDaemonTaskHandle	FreeRTOS/timers.c	/^TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )$/;"	f
xTimerHandle	FreeRTOS/include/FreeRTOS.h	835;"	d
xTimerIsTimerActive	FreeRTOS/include/mpu_wrappers.h	163;"	d
xTimerIsTimerActive	FreeRTOS/timers.c	/^BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )$/;"	f
xTimerListItem	FreeRTOS/timers.c	/^	ListItem_t				xTimerListItem;		\/*<< Standard linked list item as used by all kernel features for event management. *\/$/;"	m	struct:tmrTimerControl	file:
xTimerParameters	FreeRTOS/timers.c	/^		TimerParameter_t xTimerParameters;$/;"	m	union:tmrTimerQueueMessage::__anon8	file:
xTimerPendFunctionCall	FreeRTOS/include/mpu_wrappers.h	165;"	d
xTimerPendFunctionCall	FreeRTOS/timers.c	/^	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )$/;"	f
xTimerPendFunctionCallFromISR	FreeRTOS/timers.c	/^	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xTimerPeriodInTicks	FreeRTOS/timers.c	/^	TickType_t				xTimerPeriodInTicks;\/*<< How quickly and often the timer expires. *\/$/;"	m	struct:tmrTimerControl	file:
xTimerQueue	FreeRTOS/timers.c	/^PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;$/;"	v	file:
xTimerReset	FreeRTOS/include/timers.h	829;"	d
xTimerResetFromISR	FreeRTOS/include/timers.h	1137;"	d
xTimerStart	FreeRTOS/include/timers.h	545;"	d
xTimerStartFromISR	FreeRTOS/include/timers.h	915;"	d
xTimerStop	FreeRTOS/include/timers.h	587;"	d
xTimerStopFromISR	FreeRTOS/include/timers.h	978;"	d
xTimerTaskHandle	FreeRTOS/timers.c	/^PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;$/;"	v	file:
xYieldPending	FreeRTOS/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;$/;"	v	file:
~DynamicJsonBufferBase	ArduinoJson/DynamicJsonBuffer.hpp	/^  ~DynamicJsonBufferBase() {$/;"	f	class:ArduinoJson::DynamicJsonBufferBase
