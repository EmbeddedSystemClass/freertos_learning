
demos/freertos_multithread/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 60 01 20 85 8e 00 00 c9 8e 00 00 c9 8e 00 00     .`. ............
      10:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 00 00 00 00     ................
	...
      2c:	f9 87 00 00 c9 8e 00 00 00 00 00 00 d9 88 00 00     ................
      3c:	15 89 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      4c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      5c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      6c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      7c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      8c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      9c:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      ac:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      bc:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
      cc:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 01 00 00     ................
      dc:	c9 8e 00 00 c9 8e 00 00 c9 8e 00 00 c9 8e 00 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     10c:	b580      	push	{r7, lr}
     10e:	b084      	sub	sp, #16
     110:	af00      	add	r7, sp, #0
     112:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
     114:	f04f 0300 	mov.w	r3, #0
     118:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     11a:	687b      	ldr	r3, [r7, #4]
     11c:	f003 0307 	and.w	r3, r3, #7
     120:	2b00      	cmp	r3, #0
     122:	d005      	beq.n	130 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     124:	687b      	ldr	r3, [r7, #4]
     126:	f023 0307 	bic.w	r3, r3, #7
     12a:	f103 0308 	add.w	r3, r3, #8
     12e:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
     130:	f007 fe70 	bl	7e14 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     134:	4b11      	ldr	r3, [pc, #68]	; (17c <pvPortMalloc+0x70>)
     136:	681a      	ldr	r2, [r3, #0]
     138:	687b      	ldr	r3, [r7, #4]
     13a:	18d2      	adds	r2, r2, r3
     13c:	f244 33ff 	movw	r3, #17407	; 0x43ff
     140:	429a      	cmp	r2, r3
     142:	d812      	bhi.n	16a <pvPortMalloc+0x5e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     144:	4b0d      	ldr	r3, [pc, #52]	; (17c <pvPortMalloc+0x70>)
     146:	681a      	ldr	r2, [r3, #0]
     148:	687b      	ldr	r3, [r7, #4]
     14a:	18d2      	adds	r2, r2, r3
     14c:	4b0b      	ldr	r3, [pc, #44]	; (17c <pvPortMalloc+0x70>)
     14e:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     150:	429a      	cmp	r2, r3
     152:	d90a      	bls.n	16a <pvPortMalloc+0x5e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     154:	4b09      	ldr	r3, [pc, #36]	; (17c <pvPortMalloc+0x70>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	4b09      	ldr	r3, [pc, #36]	; (180 <pvPortMalloc+0x74>)
     15a:	18d3      	adds	r3, r2, r3
     15c:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
     15e:	4b07      	ldr	r3, [pc, #28]	; (17c <pvPortMalloc+0x70>)
     160:	681a      	ldr	r2, [r3, #0]
     162:	687b      	ldr	r3, [r7, #4]
     164:	18d2      	adds	r2, r2, r3
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <pvPortMalloc+0x70>)
     168:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
     16a:	f007 fe61 	bl	7e30 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     16e:	68fb      	ldr	r3, [r7, #12]
}
     170:	4618      	mov	r0, r3
     172:	f107 0710 	add.w	r7, r7, #16
     176:	46bd      	mov	sp, r7
     178:	bd80      	pop	{r7, pc}
     17a:	bf00      	nop
     17c:	20004430 	.word	0x20004430
     180:	20000030 	.word	0x20000030

00000184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     184:	b480      	push	{r7}
     186:	b083      	sub	sp, #12
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     18c:	f107 070c 	add.w	r7, r7, #12
     190:	46bd      	mov	sp, r7
     192:	bc80      	pop	{r7}
     194:	4770      	bx	lr
     196:	bf00      	nop

00000198 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     198:	b480      	push	{r7}
     19a:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     19c:	4b03      	ldr	r3, [pc, #12]	; (1ac <vPortInitialiseBlocks+0x14>)
     19e:	f04f 0200 	mov.w	r2, #0
     1a2:	601a      	str	r2, [r3, #0]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	bc80      	pop	{r7}
     1a8:	4770      	bx	lr
     1aa:	bf00      	nop
     1ac:	20004430 	.word	0x20004430

000001b0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     1b0:	b480      	push	{r7}
     1b2:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     1b4:	4b03      	ldr	r3, [pc, #12]	; (1c4 <xPortGetFreeHeapSize+0x14>)
     1b6:	681b      	ldr	r3, [r3, #0]
     1b8:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
     1bc:	4618      	mov	r0, r3
     1be:	46bd      	mov	sp, r7
     1c0:	bc80      	pop	{r7}
     1c2:	4770      	bx	lr
     1c4:	20004430 	.word	0x20004430

000001c8 <USART2_IRQHandler>:
} serial_ch_msg;

/* IRQ handler to handle USART2 interrupts (both transmit and receive
 * interrupts). */
void USART2_IRQHandler(void)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b082      	sub	sp, #8
     1cc:	af00      	add	r7, sp, #0
    static signed portBASE_TYPE xHigherPriorityTaskWoken;
    serial_ch_msg rx_msg;

    /* If this interrupt is for a transmit... */
    if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
     1ce:	4821      	ldr	r0, [pc, #132]	; (254 <USART2_IRQHandler+0x8c>)
     1d0:	f240 7127 	movw	r1, #1831	; 0x727
     1d4:	f002 fffa 	bl	31cc <USART_GetITStatus>
     1d8:	4603      	mov	r3, r0
     1da:	2b00      	cmp	r3, #0
     1dc:	d011      	beq.n	202 <USART2_IRQHandler+0x3a>
        /* "give" the serial_tx_wait_sem semaphore to notify processes that
         * the buffer has a spot free for the next byte.
         */
        xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
     1de:	4b1e      	ldr	r3, [pc, #120]	; (258 <USART2_IRQHandler+0x90>)
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	4618      	mov	r0, r3
     1e4:	f04f 0100 	mov.w	r1, #0
     1e8:	4a1c      	ldr	r2, [pc, #112]	; (25c <USART2_IRQHandler+0x94>)
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	f006 ffcb 	bl	7188 <xQueueGenericSendFromISR>

        /* Disables the transmit interrupt. */
        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     1f2:	4818      	ldr	r0, [pc, #96]	; (254 <USART2_IRQHandler+0x8c>)
     1f4:	f240 7127 	movw	r1, #1831	; 0x727
     1f8:	f04f 0200 	mov.w	r2, #0
     1fc:	f002 fd4e 	bl	2c9c <USART_ITConfig>
     200:	e01d      	b.n	23e <USART2_IRQHandler+0x76>
    /* If this interrupt is for a receive... */
    } else if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
     202:	4814      	ldr	r0, [pc, #80]	; (254 <USART2_IRQHandler+0x8c>)
     204:	f240 5125 	movw	r1, #1317	; 0x525
     208:	f002 ffe0 	bl	31cc <USART_GetITStatus>
     20c:	4603      	mov	r3, r0
     20e:	2b00      	cmp	r3, #0
     210:	d014      	beq.n	23c <USART2_IRQHandler+0x74>
        /* Receive the byte from the buffer. */
        rx_msg.ch = USART_ReceiveData(USART2);
     212:	4810      	ldr	r0, [pc, #64]	; (254 <USART2_IRQHandler+0x8c>)
     214:	f002 fe66 	bl	2ee4 <USART_ReceiveData>
     218:	4603      	mov	r3, r0
     21a:	b2db      	uxtb	r3, r3
     21c:	713b      	strb	r3, [r7, #4]

        /* Queue the received byte. */
        if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
     21e:	4b10      	ldr	r3, [pc, #64]	; (260 <USART2_IRQHandler+0x98>)
     220:	681a      	ldr	r2, [r3, #0]
     222:	f107 0304 	add.w	r3, r7, #4
     226:	4610      	mov	r0, r2
     228:	4619      	mov	r1, r3
     22a:	4a0c      	ldr	r2, [pc, #48]	; (25c <USART2_IRQHandler+0x94>)
     22c:	f04f 0300 	mov.w	r3, #0
     230:	f006 ffaa 	bl	7188 <xQueueGenericSendFromISR>
     234:	4603      	mov	r3, r0
     236:	2b00      	cmp	r3, #0
     238:	d101      	bne.n	23e <USART2_IRQHandler+0x76>
            /* If there was an error queueing the received byte, freeze. */
            while(1);
     23a:	e7fe      	b.n	23a <USART2_IRQHandler+0x72>
        }
    } else {
        /* Only transmit and receive interrupts should be enabled.  If this is
         * another type of interrupt, freeze.
         */
        while(1);
     23c:	e7fe      	b.n	23c <USART2_IRQHandler+0x74>
    }

    if(xHigherPriorityTaskWoken) {
     23e:	4b07      	ldr	r3, [pc, #28]	; (25c <USART2_IRQHandler+0x94>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	2b00      	cmp	r3, #0
     244:	d001      	beq.n	24a <USART2_IRQHandler+0x82>
        taskYIELD();
     246:	f008 fb13 	bl	8870 <vPortYieldFromISR>
    }
}
     24a:	f107 0708 	add.w	r7, r7, #8
     24e:	46bd      	mov	sp, r7
     250:	bd80      	pop	{r7, pc}
     252:	bf00      	nop
     254:	40004400 	.word	0x40004400
     258:	2000443c 	.word	0x2000443c
     25c:	20004444 	.word	0x20004444
     260:	20004440 	.word	0x20004440

00000264 <send_byte_rtos>:

void send_byte_rtos(char ch)
{
     264:	b580      	push	{r7, lr}
     266:	b082      	sub	sp, #8
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte (this semaphore is
     * "given" by the RS232 port interrupt when the buffer has room for another
     * byte.
     */
    while(!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
     26e:	bf00      	nop
     270:	4b0f      	ldr	r3, [pc, #60]	; (2b0 <send_byte_rtos+0x4c>)
     272:	681b      	ldr	r3, [r3, #0]
     274:	4618      	mov	r0, r3
     276:	f04f 0100 	mov.w	r1, #0
     27a:	f04f 32ff 	mov.w	r2, #4294967295
     27e:	f04f 0300 	mov.w	r3, #0
     282:	f006 ffc9 	bl	7218 <xQueueGenericReceive>
     286:	4603      	mov	r3, r0
     288:	2b00      	cmp	r3, #0
     28a:	d0f1      	beq.n	270 <send_byte_rtos+0xc>

    /* Send the byte and enable the transmit interrupt (it is disabled by the
     * interrupt).
     */
    USART_SendData(USART2, ch);
     28c:	79fb      	ldrb	r3, [r7, #7]
     28e:	b29b      	uxth	r3, r3
     290:	4808      	ldr	r0, [pc, #32]	; (2b4 <send_byte_rtos+0x50>)
     292:	4619      	mov	r1, r3
     294:	f002 fe12 	bl	2ebc <USART_SendData>
    USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
     298:	4806      	ldr	r0, [pc, #24]	; (2b4 <send_byte_rtos+0x50>)
     29a:	f240 7127 	movw	r1, #1831	; 0x727
     29e:	f04f 0201 	mov.w	r2, #1
     2a2:	f002 fcfb 	bl	2c9c <USART_ITConfig>
}
     2a6:	f107 0708 	add.w	r7, r7, #8
     2aa:	46bd      	mov	sp, r7
     2ac:	bd80      	pop	{r7, pc}
     2ae:	bf00      	nop
     2b0:	2000443c 	.word	0x2000443c
     2b4:	40004400 	.word	0x40004400

000002b8 <receive_byte_rtos>:

char receive_byte_rtos(void)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b082      	sub	sp, #8
     2bc:	af00      	add	r7, sp, #0
    serial_ch_msg msg;

    /* Wait for a byte to be queued by the receive interrupt handler. */
    while(!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
     2be:	bf00      	nop
     2c0:	4b0a      	ldr	r3, [pc, #40]	; (2ec <receive_byte_rtos+0x34>)
     2c2:	681a      	ldr	r2, [r3, #0]
     2c4:	f107 0304 	add.w	r3, r7, #4
     2c8:	4610      	mov	r0, r2
     2ca:	4619      	mov	r1, r3
     2cc:	f04f 32ff 	mov.w	r2, #4294967295
     2d0:	f04f 0300 	mov.w	r3, #0
     2d4:	f006 ffa0 	bl	7218 <xQueueGenericReceive>
     2d8:	4603      	mov	r3, r0
     2da:	2b00      	cmp	r3, #0
     2dc:	d0f0      	beq.n	2c0 <receive_byte_rtos+0x8>

    return msg.ch;
     2de:	793b      	ldrb	r3, [r7, #4]
}
     2e0:	4618      	mov	r0, r3
     2e2:	f107 0708 	add.w	r7, r7, #8
     2e6:	46bd      	mov	sp, r7
     2e8:	bd80      	pop	{r7, pc}
     2ea:	bf00      	nop
     2ec:	20004440 	.word	0x20004440

000002f0 <rs232_xmit_msg_task>:


void rs232_xmit_msg_task( void *pvParameters )
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b0ce      	sub	sp, #312	; 0x138
     2f4:	af00      	add	r7, sp, #0
     2f6:	f107 0304 	add.w	r3, r7, #4
     2fa:	6018      	str	r0, [r3, #0]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
     2fc:	bf00      	nop
     2fe:	4b16      	ldr	r3, [pc, #88]	; (358 <rs232_xmit_msg_task+0x68>)
     300:	681a      	ldr	r2, [r3, #0]
     302:	f107 0308 	add.w	r3, r7, #8
     306:	4610      	mov	r0, r2
     308:	4619      	mov	r1, r3
     30a:	f04f 32ff 	mov.w	r2, #4294967295
     30e:	f04f 0300 	mov.w	r3, #0
     312:	f006 ff81 	bl	7218 <xQueueGenericReceive>
     316:	4603      	mov	r3, r0
     318:	2b00      	cmp	r3, #0
     31a:	d0f0      	beq.n	2fe <rs232_xmit_msg_task+0xe>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
     31c:	f04f 0300 	mov.w	r3, #0
     320:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        while(msg.str[curr_char] != '\0') {
     324:	e00e      	b.n	344 <rs232_xmit_msg_task+0x54>
            send_byte_rtos(msg.str[curr_char]);
     326:	f107 0208 	add.w	r2, r7, #8
     32a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     32e:	18d3      	adds	r3, r2, r3
     330:	781b      	ldrb	r3, [r3, #0]
     332:	4618      	mov	r0, r3
     334:	f7ff ff96 	bl	264 <send_byte_rtos>
            curr_char++;
     338:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     33c:	f103 0301 	add.w	r3, r3, #1
     340:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
        while(msg.str[curr_char] != '\0') {
     344:	f107 0208 	add.w	r2, r7, #8
     348:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     34c:	18d3      	adds	r3, r2, r3
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	2b00      	cmp	r3, #0
     352:	d1e8      	bne.n	326 <rs232_xmit_msg_task+0x36>
            send_byte_rtos(msg.str[curr_char]);
            curr_char++;
        }
    }
     354:	bf00      	nop
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
     356:	e7d2      	b.n	2fe <rs232_xmit_msg_task+0xe>
     358:	20004438 	.word	0x20004438

0000035c <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char *str, int delay)
{
     35c:	b580      	push	{r7, lr}
     35e:	b0ce      	sub	sp, #312	; 0x138
     360:	af00      	add	r7, sp, #0
     362:	f107 0304 	add.w	r3, r7, #4
     366:	6018      	str	r0, [r3, #0]
     368:	463b      	mov	r3, r7
     36a:	6019      	str	r1, [r3, #0]
    serial_str_msg msg;

    /* Prepare the message to be queued. */
    strcpy(msg.str, str);
     36c:	f107 020c 	add.w	r2, r7, #12
     370:	f107 0304 	add.w	r3, r7, #4
     374:	4610      	mov	r0, r2
     376:	6819      	ldr	r1, [r3, #0]
     378:	f008 fcea 	bl	8d50 <strcpy>

    while(1) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     37c:	bf00      	nop
     37e:	4b0b      	ldr	r3, [pc, #44]	; (3ac <queue_str_task+0x50>)
     380:	681a      	ldr	r2, [r3, #0]
     382:	f107 030c 	add.w	r3, r7, #12
     386:	4610      	mov	r0, r2
     388:	4619      	mov	r1, r3
     38a:	f04f 32ff 	mov.w	r2, #4294967295
     38e:	f04f 0300 	mov.w	r3, #0
     392:	f006 fe69 	bl	7068 <xQueueGenericSend>
     396:	4603      	mov	r3, r0
     398:	2b00      	cmp	r3, #0
     39a:	d0f0      	beq.n	37e <queue_str_task+0x22>

        /* Wait. */
        vTaskDelay(delay);
     39c:	463b      	mov	r3, r7
     39e:	681b      	ldr	r3, [r3, #0]
     3a0:	4618      	mov	r0, r3
     3a2:	f007 faf7 	bl	7994 <vTaskDelay>
    }
     3a6:	bf00      	nop
    /* Prepare the message to be queued. */
    strcpy(msg.str, str);

    while(1) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     3a8:	e7e9      	b.n	37e <queue_str_task+0x22>
     3aa:	bf00      	nop
     3ac:	20004438 	.word	0x20004438

000003b0 <queue_str_task1>:
        vTaskDelay(delay);
    }
}

void queue_str_task1( void *pvParameters )
{	 
     3b0:	b5b0      	push	{r4, r5, r7, lr}
     3b2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
     3b6:	af00      	add	r7, sp, #0
     3b8:	f107 0304 	add.w	r3, r7, #4
     3bc:	6018      	str	r0, [r3, #0]
    char str[] = "{\"sensor\":\"gps\",\"time\":1351824120,\"data\":[48.756080,2.302038]}";
     3be:	4b20      	ldr	r3, [pc, #128]	; (440 <queue_str_task1+0x90>)
     3c0:	f507 7402 	add.w	r4, r7, #520	; 0x208
     3c4:	461d      	mov	r5, r3
     3c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     3c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     3ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     3cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     3ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     3d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     3d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     3d6:	c407      	stmia	r4!, {r0, r1, r2}
     3d8:	8023      	strh	r3, [r4, #0]
     3da:	f104 0402 	add.w	r4, r4, #2
     3de:	ea4f 4313 	mov.w	r3, r3, lsr #16
     3e2:	7023      	strb	r3, [r4, #0]
    //puts( str );
    json_t mem[32];
    json_t const* json = json_create( str, mem, sizeof mem / sizeof *mem );
     3e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
     3e8:	f107 0308 	add.w	r3, r7, #8
     3ec:	4610      	mov	r0, r2
     3ee:	4619      	mov	r1, r3
     3f0:	f04f 0220 	mov.w	r2, #32
     3f4:	f000 f97c 	bl	6f0 <json_create>
     3f8:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
    char const* firstNameVal = json_getPropertyValue( json, "firstName" );
     3fc:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
     400:	4910      	ldr	r1, [pc, #64]	; (444 <queue_str_task1+0x94>)
     402:	f000 f951 	bl	6a8 <json_getPropertyValue>
     406:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
    char const* lastName = json_getPropertyValue( json, "lastName" );
     40a:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
     40e:	490e      	ldr	r1, [pc, #56]	; (448 <queue_str_task1+0x98>)
     410:	f000 f94a 	bl	6a8 <json_getPropertyValue>
     414:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    //char const* city = json_getPropertyValue( json, "city" );
    //char const* state = json_getPropertyValue( json, "state" );
    int age= json_getPropertyValue(json,"time");
     418:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
     41c:	490b      	ldr	r1, [pc, #44]	; (44c <queue_str_task1+0x9c>)
     41e:	f000 f943 	bl	6a8 <json_getPropertyValue>
     422:	4603      	mov	r3, r0
     424:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    //json_t const* age = json_getProperty( json, "age" );
    //int const ageVal = (int)json_getInteger( age );
    //int a =5,b=0;
    queue_str_task(age, 200);
     428:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
     42c:	4618      	mov	r0, r3
     42e:	f04f 01c8 	mov.w	r1, #200	; 0xc8
     432:	f7ff ff93 	bl	35c <queue_str_task>
}
     436:	f507 7716 	add.w	r7, r7, #600	; 0x258
     43a:	46bd      	mov	sp, r7
     43c:	bdb0      	pop	{r4, r5, r7, pc}
     43e:	bf00      	nop
     440:	00008eec 	.word	0x00008eec
     444:	00008ecc 	.word	0x00008ecc
     448:	00008ed8 	.word	0x00008ed8
     44c:	00008ee4 	.word	0x00008ee4

00000450 <queue_str_task2>:

void queue_str_task2( void *pvParameters )
{
     450:	b580      	push	{r7, lr}
     452:	b082      	sub	sp, #8
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
    queue_str_task("Hello 2\n", 50);
     458:	4804      	ldr	r0, [pc, #16]	; (46c <queue_str_task2+0x1c>)
     45a:	f04f 0132 	mov.w	r1, #50	; 0x32
     45e:	f7ff ff7d 	bl	35c <queue_str_task>
}
     462:	f107 0708 	add.w	r7, r7, #8
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}
     46a:	bf00      	nop
     46c:	00008f2c 	.word	0x00008f2c

00000470 <serial_readwrite_task>:

void serial_readwrite_task( void *pvParameters )
{
     470:	b580      	push	{r7, lr}
     472:	b0d0      	sub	sp, #320	; 0x140
     474:	af00      	add	r7, sp, #0
     476:	f107 0304 	add.w	r3, r7, #4
     47a:	6018      	str	r0, [r3, #0]
    char ch;
    int curr_char;
    int done;

    /* Prepare the response message to be queued. */
    strcpy(msg.str, "Got:");
     47c:	f107 0308 	add.w	r3, r7, #8
     480:	4618      	mov	r0, r3
     482:	4929      	ldr	r1, [pc, #164]	; (528 <serial_readwrite_task+0xb8>)
     484:	f04f 0205 	mov.w	r2, #5
     488:	f008 fa72 	bl	8970 <memcpy>

    while(1) {
        curr_char = 4;
     48c:	f04f 0304 	mov.w	r3, #4
     490:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        done = 0;
     494:	f04f 0300 	mov.w	r3, #0
     498:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        do {
            /* Receive a byte from the RS232 port (this call will block). */
            ch = receive_byte_rtos();
     49c:	f7ff ff0c 	bl	2b8 <receive_byte_rtos>
     4a0:	4603      	mov	r3, r0
     4a2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
            /* If the byte is an end-of-line type character, then finish the
             * string and indicate we are done.
             */
            if((ch == '\r') || (ch == '\n')) {
     4a6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
     4aa:	2b0d      	cmp	r3, #13
     4ac:	d003      	beq.n	4b6 <serial_readwrite_task+0x46>
     4ae:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
     4b2:	2b0a      	cmp	r3, #10
     4b4:	d115      	bne.n	4e2 <serial_readwrite_task+0x72>
                msg.str[curr_char] = '\n';
     4b6:	f107 0208 	add.w	r2, r7, #8
     4ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     4be:	18d3      	adds	r3, r2, r3
     4c0:	f04f 020a 	mov.w	r2, #10
     4c4:	701a      	strb	r2, [r3, #0]
                msg.str[curr_char+1] = '\0';
     4c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     4ca:	f103 0301 	add.w	r3, r3, #1
     4ce:	f107 0208 	add.w	r2, r7, #8
     4d2:	f04f 0100 	mov.w	r1, #0
     4d6:	54d1      	strb	r1, [r2, r3]
                done = -1;
     4d8:	f04f 33ff 	mov.w	r3, #4294967295
     4dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
     4e0:	e00d      	b.n	4fe <serial_readwrite_task+0x8e>
            /* Otherwise, add the character to the response string. */
            } else {
                msg.str[curr_char++] = ch;
     4e2:	f107 0208 	add.w	r2, r7, #8
     4e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     4ea:	18d3      	adds	r3, r2, r3
     4ec:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     4f6:	f103 0301 	add.w	r3, r3, #1
     4fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            }
        } while(!done);
     4fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     502:	2b00      	cmp	r3, #0
     504:	d0ca      	beq.n	49c <serial_readwrite_task+0x2c>

        /* Once we are done building the response string, queue the response to
         * be sent to the RS232 port.
         */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     506:	bf00      	nop
     508:	4b08      	ldr	r3, [pc, #32]	; (52c <serial_readwrite_task+0xbc>)
     50a:	681a      	ldr	r2, [r3, #0]
     50c:	f107 0308 	add.w	r3, r7, #8
     510:	4610      	mov	r0, r2
     512:	4619      	mov	r1, r3
     514:	f04f 32ff 	mov.w	r2, #4294967295
     518:	f04f 0300 	mov.w	r3, #0
     51c:	f006 fda4 	bl	7068 <xQueueGenericSend>
     520:	4603      	mov	r3, r0
     522:	2b00      	cmp	r3, #0
     524:	d0f0      	beq.n	508 <serial_readwrite_task+0x98>
    }
     526:	e7b1      	b.n	48c <serial_readwrite_task+0x1c>
     528:	00008f38 	.word	0x00008f38
     52c:	20004438 	.word	0x20004438

00000530 <main>:
}

int main(void)
{
     530:	b580      	push	{r7, lr}
     532:	b084      	sub	sp, #16
     534:	af04      	add	r7, sp, #16

    //printf( "Last Name: %s.\n", lastName );

    init_rs232();
     536:	f001 f923 	bl	1780 <init_rs232>
    enable_rs232_interrupts();
     53a:	f001 f971 	bl	1820 <enable_rs232_interrupts>
    enable_rs232();
     53e:	f001 f995 	bl	186c <enable_rs232>

    /* Create the queue to hold messages to be written to the RS232. */
    serial_str_queue = xQueueCreate( 10, sizeof( serial_str_msg ) );
     542:	f04f 000a 	mov.w	r0, #10
     546:	f44f 7196 	mov.w	r1, #300	; 0x12c
     54a:	f04f 0200 	mov.w	r2, #0
     54e:	f006 fce3 	bl	6f18 <xQueueGenericCreate>
     552:	4602      	mov	r2, r0
     554:	4b2b      	ldr	r3, [pc, #172]	; (604 <main+0xd4>)
     556:	601a      	str	r2, [r3, #0]
    vSemaphoreCreateBinary(serial_tx_wait_sem);
     558:	f04f 0001 	mov.w	r0, #1
     55c:	f04f 0100 	mov.w	r1, #0
     560:	f04f 0203 	mov.w	r2, #3
     564:	f006 fcd8 	bl	6f18 <xQueueGenericCreate>
     568:	4602      	mov	r2, r0
     56a:	4b27      	ldr	r3, [pc, #156]	; (608 <main+0xd8>)
     56c:	601a      	str	r2, [r3, #0]
     56e:	4b26      	ldr	r3, [pc, #152]	; (608 <main+0xd8>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	2b00      	cmp	r3, #0
     574:	d00a      	beq.n	58c <main+0x5c>
     576:	4b24      	ldr	r3, [pc, #144]	; (608 <main+0xd8>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	4618      	mov	r0, r3
     57c:	f04f 0100 	mov.w	r1, #0
     580:	f04f 0200 	mov.w	r2, #0
     584:	f04f 0300 	mov.w	r3, #0
     588:	f006 fd6e 	bl	7068 <xQueueGenericSend>
    serial_rx_queue = xQueueCreate( 1, sizeof( serial_ch_msg ) );
     58c:	f04f 0001 	mov.w	r0, #1
     590:	f04f 0101 	mov.w	r1, #1
     594:	f04f 0200 	mov.w	r2, #0
     598:	f006 fcbe 	bl	6f18 <xQueueGenericCreate>
     59c:	4602      	mov	r2, r0
     59e:	4b1b      	ldr	r3, [pc, #108]	; (60c <main+0xdc>)
     5a0:	601a      	str	r2, [r3, #0]
    /* Create tasks to queue a string to be written to the RS232 port. */
   // xTaskCreate( queue_str_task1, ( signed portCHAR * ) "Serial Write 1", 1024 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
    //xTaskCreate( queue_str_task2, ( signed portCHAR * ) "Serial Write 2", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );

    /* Create a task to write messages from the queue to the RS232 port. */
    xTaskCreate(rs232_xmit_msg_task, ( signed portCHAR * ) "Serial Xmit Str", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL );
     5a2:	4b1b      	ldr	r3, [pc, #108]	; (610 <main+0xe0>)
     5a4:	f04f 0202 	mov.w	r2, #2
     5a8:	9200      	str	r2, [sp, #0]
     5aa:	f04f 0200 	mov.w	r2, #0
     5ae:	9201      	str	r2, [sp, #4]
     5b0:	f04f 0200 	mov.w	r2, #0
     5b4:	9202      	str	r2, [sp, #8]
     5b6:	f04f 0200 	mov.w	r2, #0
     5ba:	9203      	str	r2, [sp, #12]
     5bc:	4815      	ldr	r0, [pc, #84]	; (614 <main+0xe4>)
     5be:	4619      	mov	r1, r3
     5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
     5c4:	f04f 0300 	mov.w	r3, #0
     5c8:	f007 f892 	bl	76f0 <xTaskGenericCreate>

    /* Create a task to receive characters from the RS232 port and echo them back to the RS232 port. */
    xTaskCreate(serial_readwrite_task, ( signed portCHAR * ) "Serial Read/Write", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     5cc:	4b12      	ldr	r3, [pc, #72]	; (618 <main+0xe8>)
     5ce:	f04f 020a 	mov.w	r2, #10
     5d2:	9200      	str	r2, [sp, #0]
     5d4:	f04f 0200 	mov.w	r2, #0
     5d8:	9201      	str	r2, [sp, #4]
     5da:	f04f 0200 	mov.w	r2, #0
     5de:	9202      	str	r2, [sp, #8]
     5e0:	f04f 0200 	mov.w	r2, #0
     5e4:	9203      	str	r2, [sp, #12]
     5e6:	480d      	ldr	r0, [pc, #52]	; (61c <main+0xec>)
     5e8:	4619      	mov	r1, r3
     5ea:	f44f 7200 	mov.w	r2, #512	; 0x200
     5ee:	f04f 0300 	mov.w	r3, #0
     5f2:	f007 f87d 	bl	76f0 <xTaskGenericCreate>

    /* Start running the tasks. */
    vTaskStartScheduler();
     5f6:	f007 fbc7 	bl	7d88 <vTaskStartScheduler>
        while(str[curr_char] != '\0') {
            send_byte_rtos(str[curr_char]);
            curr_char++;
        }
#endif
    return 0;
     5fa:	f04f 0300 	mov.w	r3, #0
}
     5fe:	4618      	mov	r0, r3
     600:	46bd      	mov	sp, r7
     602:	bd80      	pop	{r7, pc}
     604:	20004438 	.word	0x20004438
     608:	2000443c 	.word	0x2000443c
     60c:	20004440 	.word	0x20004440
     610:	00008f40 	.word	0x00008f40
     614:	000002f1 	.word	0x000002f1
     618:	00008f50 	.word	0x00008f50
     61c:	00000471 	.word	0x00000471

00000620 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
     620:	b480      	push	{r7}
     622:	af00      	add	r7, sp, #0
}
     624:	46bd      	mov	sp, r7
     626:	bc80      	pop	{r7}
     628:	4770      	bx	lr
     62a:	bf00      	nop

0000062c <json_getValue>:

/** Get the value of a json property.
  * The type of property cannot be JSON_OBJ or JSON_ARRAY.
  * @param json A valid handler of a json property.
  * @return Pointer to null-terminated string with the value. */
static inline char const* json_getValue( json_t const* property ) {
     62c:	b480      	push	{r7}
     62e:	b083      	sub	sp, #12
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
    return property->u.value;
     634:	687b      	ldr	r3, [r7, #4]
     636:	689b      	ldr	r3, [r3, #8]
}
     638:	4618      	mov	r0, r3
     63a:	f107 070c 	add.w	r7, r7, #12
     63e:	46bd      	mov	sp, r7
     640:	bc80      	pop	{r7}
     642:	4770      	bx	lr

00000644 <json_getType>:

/** Get the type of a json property.
  * @param json A valid handler of a json property.
  * @return The code of type.*/
static inline jsonType_t json_getType( json_t const* json ) {
     644:	b480      	push	{r7}
     646:	b083      	sub	sp, #12
     648:	af00      	add	r7, sp, #0
     64a:	6078      	str	r0, [r7, #4]
    return json->type;
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	7b1b      	ldrb	r3, [r3, #12]
}
     650:	4618      	mov	r0, r3
     652:	f107 070c 	add.w	r7, r7, #12
     656:	46bd      	mov	sp, r7
     658:	bc80      	pop	{r7}
     65a:	4770      	bx	lr

0000065c <json_getProperty>:
    unsigned int const qty; /**< Length of the array of json properties.   */
    unsigned int nextFree;  /**< The index of the next free json property. */
} jsonPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
     65c:	b580      	push	{r7, lr}
     65e:	b084      	sub	sp, #16
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
     664:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.child; sibling; sibling = sibling->sibling )
     666:	687b      	ldr	r3, [r7, #4]
     668:	689b      	ldr	r3, [r3, #8]
     66a:	60fb      	str	r3, [r7, #12]
     66c:	e011      	b.n	692 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	685b      	ldr	r3, [r3, #4]
     672:	2b00      	cmp	r3, #0
     674:	d00a      	beq.n	68c <json_getProperty+0x30>
     676:	68fb      	ldr	r3, [r7, #12]
     678:	685b      	ldr	r3, [r3, #4]
     67a:	4618      	mov	r0, r3
     67c:	6839      	ldr	r1, [r7, #0]
     67e:	f008 fa79 	bl	8b74 <strcmp>
     682:	4603      	mov	r3, r0
     684:	2b00      	cmp	r3, #0
     686:	d101      	bne.n	68c <json_getProperty+0x30>
            return sibling;
     688:	68fb      	ldr	r3, [r7, #12]
     68a:	e007      	b.n	69c <json_getProperty+0x40>
} jsonPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
    json_t const* sibling;
    for( sibling = obj->u.child; sibling; sibling = sibling->sibling )
     68c:	68fb      	ldr	r3, [r7, #12]
     68e:	681b      	ldr	r3, [r3, #0]
     690:	60fb      	str	r3, [r7, #12]
     692:	68fb      	ldr	r3, [r7, #12]
     694:	2b00      	cmp	r3, #0
     696:	d1ea      	bne.n	66e <json_getProperty+0x12>
        if ( sibling->name && !strcmp( sibling->name, property ) )
            return sibling;
    return 0;
     698:	f04f 0300 	mov.w	r3, #0
}
     69c:	4618      	mov	r0, r3
     69e:	f107 0710 	add.w	r7, r7, #16
     6a2:	46bd      	mov	sp, r7
     6a4:	bd80      	pop	{r7, pc}
     6a6:	bf00      	nop

000006a8 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
     6a8:	b580      	push	{r7, lr}
     6aa:	b084      	sub	sp, #16
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
     6b0:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
     6b2:	6878      	ldr	r0, [r7, #4]
     6b4:	6839      	ldr	r1, [r7, #0]
     6b6:	f7ff ffd1 	bl	65c <json_getProperty>
     6ba:	60f8      	str	r0, [r7, #12]
	if ( !field ) return 0;
     6bc:	68fb      	ldr	r3, [r7, #12]
     6be:	2b00      	cmp	r3, #0
     6c0:	d102      	bne.n	6c8 <json_getPropertyValue+0x20>
     6c2:	f04f 0300 	mov.w	r3, #0
     6c6:	e00e      	b.n	6e6 <json_getPropertyValue+0x3e>
        jsonType_t type = json_getType( field );
     6c8:	68f8      	ldr	r0, [r7, #12]
     6ca:	f7ff ffbb 	bl	644 <json_getType>
     6ce:	4603      	mov	r3, r0
     6d0:	72fb      	strb	r3, [r7, #11]
        if ( JSON_ARRAY >= type ) return 0;
     6d2:	7afb      	ldrb	r3, [r7, #11]
     6d4:	2b01      	cmp	r3, #1
     6d6:	d802      	bhi.n	6de <json_getPropertyValue+0x36>
     6d8:	f04f 0300 	mov.w	r3, #0
     6dc:	e003      	b.n	6e6 <json_getPropertyValue+0x3e>
	return json_getValue( field );
     6de:	68f8      	ldr	r0, [r7, #12]
     6e0:	f7ff ffa4 	bl	62c <json_getValue>
     6e4:	4603      	mov	r3, r0
}
     6e6:	4618      	mov	r0, r3
     6e8:	f107 0710 	add.w	r7, r7, #16
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}

000006f0 <json_create>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
     6f0:	b580      	push	{r7, lr}
     6f2:	b08a      	sub	sp, #40	; 0x28
     6f4:	af00      	add	r7, sp, #0
     6f6:	60f8      	str	r0, [r7, #12]
     6f8:	60b9      	str	r1, [r7, #8]
     6fa:	607a      	str	r2, [r7, #4]
    char* ptr = goBlank( str );
     6fc:	68f8      	ldr	r0, [r7, #12]
     6fe:	f000 fcab 	bl	1058 <goBlank>
     702:	6278      	str	r0, [r7, #36]	; 0x24
    if ( !ptr || *ptr != '{' ) return 0;
     704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     706:	2b00      	cmp	r3, #0
     708:	d003      	beq.n	712 <json_create+0x22>
     70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	2b7b      	cmp	r3, #123	; 0x7b
     710:	d002      	beq.n	718 <json_create+0x28>
     712:	f04f 0300 	mov.w	r3, #0
     716:	e035      	b.n	784 <json_create+0x94>
    jsonPool_t pool = { .mem = mem, .qty = qty };
     718:	f107 0314 	add.w	r3, r7, #20
     71c:	f04f 0200 	mov.w	r2, #0
     720:	601a      	str	r2, [r3, #0]
     722:	f103 0304 	add.w	r3, r3, #4
     726:	f04f 0200 	mov.w	r2, #0
     72a:	601a      	str	r2, [r3, #0]
     72c:	f103 0304 	add.w	r3, r3, #4
     730:	f04f 0200 	mov.w	r2, #0
     734:	601a      	str	r2, [r3, #0]
     736:	f103 0304 	add.w	r3, r3, #4
     73a:	68bb      	ldr	r3, [r7, #8]
     73c:	617b      	str	r3, [r7, #20]
     73e:	687b      	ldr	r3, [r7, #4]
     740:	61bb      	str	r3, [r7, #24]
    json_t* obj = poolInit( &pool );
     742:	f107 0314 	add.w	r3, r7, #20
     746:	4618      	mov	r0, r3
     748:	f000 fc10 	bl	f6c <poolInit>
     74c:	6238      	str	r0, [r7, #32]
    obj->name    = 0;
     74e:	6a3b      	ldr	r3, [r7, #32]
     750:	f04f 0200 	mov.w	r2, #0
     754:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
     756:	6a3b      	ldr	r3, [r7, #32]
     758:	f04f 0200 	mov.w	r2, #0
     75c:	601a      	str	r2, [r3, #0]
    obj->u.child = 0;
     75e:	6a3b      	ldr	r3, [r7, #32]
     760:	f04f 0200 	mov.w	r2, #0
     764:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, &pool );
     766:	f107 0314 	add.w	r3, r7, #20
     76a:	6a78      	ldr	r0, [r7, #36]	; 0x24
     76c:	6a39      	ldr	r1, [r7, #32]
     76e:	461a      	mov	r2, r3
     770:	f000 fb1c 	bl	dac <objValue>
     774:	6278      	str	r0, [r7, #36]	; 0x24
    if ( !ptr ) return 0;
     776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     778:	2b00      	cmp	r3, #0
     77a:	d102      	bne.n	782 <json_create+0x92>
     77c:	f04f 0300 	mov.w	r3, #0
     780:	e000      	b.n	784 <json_create+0x94>
    return obj;
     782:	6a3b      	ldr	r3, [r7, #32]
}
     784:	4618      	mov	r0, r3
     786:	f107 0728 	add.w	r7, r7, #40	; 0x28
     78a:	46bd      	mov	sp, r7
     78c:	bd80      	pop	{r7, pc}
     78e:	bf00      	nop

00000790 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\b', 'n' -> '\n', 't' -> '\t'
  * @param ch The escape character.
  * @return  The character code. */
static char getEscape( char ch ) {
     790:	b480      	push	{r7}
     792:	b085      	sub	sp, #20
     794:	af00      	add	r7, sp, #0
     796:	4603      	mov	r3, r0
     798:	71fb      	strb	r3, [r7, #7]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
     79a:	f04f 0300 	mov.w	r3, #0
     79e:	60fb      	str	r3, [r7, #12]
     7a0:	e011      	b.n	7c6 <getEscape+0x36>
        if ( pair[i].ch == ch )
     7a2:	4b0e      	ldr	r3, [pc, #56]	; (7dc <getEscape+0x4c>)
     7a4:	68fa      	ldr	r2, [r7, #12]
     7a6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
     7aa:	79fa      	ldrb	r2, [r7, #7]
     7ac:	429a      	cmp	r2, r3
     7ae:	d106      	bne.n	7be <getEscape+0x2e>
            return pair[i].code;
     7b0:	4a0a      	ldr	r2, [pc, #40]	; (7dc <getEscape+0x4c>)
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7b8:	18d3      	adds	r3, r2, r3
     7ba:	785b      	ldrb	r3, [r3, #1]
     7bc:	e008      	b.n	7d0 <getEscape+0x40>
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
     7be:	68fb      	ldr	r3, [r7, #12]
     7c0:	f103 0301 	add.w	r3, r3, #1
     7c4:	60fb      	str	r3, [r7, #12]
     7c6:	68fb      	ldr	r3, [r7, #12]
     7c8:	2b07      	cmp	r3, #7
     7ca:	d9ea      	bls.n	7a2 <getEscape+0x12>
        if ( pair[i].ch == ch )
            return pair[i].code;
    return '\0';
     7cc:	f04f 0300 	mov.w	r3, #0
}
     7d0:	4618      	mov	r0, r3
     7d2:	f107 0714 	add.w	r7, r7, #20
     7d6:	46bd      	mov	sp, r7
     7d8:	bc80      	pop	{r7}
     7da:	4770      	bx	lr
     7dc:	00008fbc 	.word	0x00008fbc

000007e0 <isHexaDigit>:

/** Check if a character is a hexadecimal digit. */
static bool isHexaDigit( unsigned char nibble ) {
     7e0:	b480      	push	{r7}
     7e2:	b083      	sub	sp, #12
     7e4:	af00      	add	r7, sp, #0
     7e6:	4603      	mov	r3, r0
     7e8:	71fb      	strb	r3, [r7, #7]
    if ( nibble <  '0' ) return false;
     7ea:	79fb      	ldrb	r3, [r7, #7]
     7ec:	2b2f      	cmp	r3, #47	; 0x2f
     7ee:	d802      	bhi.n	7f6 <isHexaDigit+0x16>
     7f0:	f04f 0300 	mov.w	r3, #0
     7f4:	e01f      	b.n	836 <isHexaDigit+0x56>
    if ( nibble <= '9' ) return true;
     7f6:	79fb      	ldrb	r3, [r7, #7]
     7f8:	2b39      	cmp	r3, #57	; 0x39
     7fa:	d802      	bhi.n	802 <isHexaDigit+0x22>
     7fc:	f04f 0301 	mov.w	r3, #1
     800:	e019      	b.n	836 <isHexaDigit+0x56>
    if ( nibble <  'A' ) return false;
     802:	79fb      	ldrb	r3, [r7, #7]
     804:	2b40      	cmp	r3, #64	; 0x40
     806:	d802      	bhi.n	80e <isHexaDigit+0x2e>
     808:	f04f 0300 	mov.w	r3, #0
     80c:	e013      	b.n	836 <isHexaDigit+0x56>
    if ( nibble <= 'F' ) return true;
     80e:	79fb      	ldrb	r3, [r7, #7]
     810:	2b46      	cmp	r3, #70	; 0x46
     812:	d802      	bhi.n	81a <isHexaDigit+0x3a>
     814:	f04f 0301 	mov.w	r3, #1
     818:	e00d      	b.n	836 <isHexaDigit+0x56>
    if ( nibble <  'a' ) return false;
     81a:	79fb      	ldrb	r3, [r7, #7]
     81c:	2b60      	cmp	r3, #96	; 0x60
     81e:	d802      	bhi.n	826 <isHexaDigit+0x46>
     820:	f04f 0300 	mov.w	r3, #0
     824:	e007      	b.n	836 <isHexaDigit+0x56>
    if ( nibble <= 'f' ) return true;
     826:	79fb      	ldrb	r3, [r7, #7]
     828:	2b66      	cmp	r3, #102	; 0x66
     82a:	d802      	bhi.n	832 <isHexaDigit+0x52>
     82c:	f04f 0301 	mov.w	r3, #1
     830:	e001      	b.n	836 <isHexaDigit+0x56>
    return false;
     832:	f04f 0300 	mov.w	r3, #0
}
     836:	4618      	mov	r0, r3
     838:	f107 070c 	add.w	r7, r7, #12
     83c:	46bd      	mov	sp, r7
     83e:	bc80      	pop	{r7}
     840:	4770      	bx	lr
     842:	bf00      	nop

00000844 <getCharFromUnicode>:

/** Parse 4 characters.
  * @Param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retcal '\0' In other cases. */
static char getCharFromUnicode( char const* str ) {
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
     84c:	f04f 0300 	mov.w	r3, #0
     850:	60fb      	str	r3, [r7, #12]
     852:	e013      	b.n	87c <getCharFromUnicode+0x38>
        if ( !isHexaDigit( str[i] ) )
     854:	687a      	ldr	r2, [r7, #4]
     856:	68fb      	ldr	r3, [r7, #12]
     858:	18d3      	adds	r3, r2, r3
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	4618      	mov	r0, r3
     85e:	f7ff ffbf 	bl	7e0 <isHexaDigit>
     862:	4603      	mov	r3, r0
     864:	f083 0301 	eor.w	r3, r3, #1
     868:	b2db      	uxtb	r3, r3
     86a:	2b00      	cmp	r3, #0
     86c:	d002      	beq.n	874 <getCharFromUnicode+0x30>
            return '\0';
     86e:	f04f 0300 	mov.w	r3, #0
     872:	e008      	b.n	886 <getCharFromUnicode+0x42>
  * @Param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retcal '\0' In other cases. */
static char getCharFromUnicode( char const* str ) {
    unsigned int i;
    for( i = 0; i < 4; ++i )
     874:	68fb      	ldr	r3, [r7, #12]
     876:	f103 0301 	add.w	r3, r3, #1
     87a:	60fb      	str	r3, [r7, #12]
     87c:	68fb      	ldr	r3, [r7, #12]
     87e:	2b03      	cmp	r3, #3
     880:	d9e8      	bls.n	854 <getCharFromUnicode+0x10>
        if ( !isHexaDigit( str[i] ) )
            return '\0';
    return '?';
     882:	f04f 033f 	mov.w	r3, #63	; 0x3f
}
     886:	4618      	mov	r0, r3
     888:	f107 0710 	add.w	r7, r7, #16
     88c:	46bd      	mov	sp, r7
     88e:	bd80      	pop	{r7, pc}

00000890 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
     890:	b580      	push	{r7, lr}
     892:	b086      	sub	sp, #24
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
    char* head = str;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	617b      	str	r3, [r7, #20]
    char* tail = str;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	613b      	str	r3, [r7, #16]
    for( ; *head >= ' '; ++head, ++tail ) {
     8a0:	e04d      	b.n	93e <parseString+0xae>
        if ( *head == '\"' ) {
     8a2:	697b      	ldr	r3, [r7, #20]
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b22      	cmp	r3, #34	; 0x22
     8a8:	d109      	bne.n	8be <parseString+0x2e>
            *tail = '\0';
     8aa:	693b      	ldr	r3, [r7, #16]
     8ac:	f04f 0200 	mov.w	r2, #0
     8b0:	701a      	strb	r2, [r3, #0]
            return ++head;
     8b2:	697b      	ldr	r3, [r7, #20]
     8b4:	f103 0301 	add.w	r3, r3, #1
     8b8:	617b      	str	r3, [r7, #20]
     8ba:	697b      	ldr	r3, [r7, #20]
     8bc:	e045      	b.n	94a <parseString+0xba>
        }
        if ( *head == '\\' ) {
     8be:	697b      	ldr	r3, [r7, #20]
     8c0:	781b      	ldrb	r3, [r3, #0]
     8c2:	2b5c      	cmp	r3, #92	; 0x5c
     8c4:	d12f      	bne.n	926 <parseString+0x96>
            if ( *++head == 'u' ) {
     8c6:	697b      	ldr	r3, [r7, #20]
     8c8:	f103 0301 	add.w	r3, r3, #1
     8cc:	617b      	str	r3, [r7, #20]
     8ce:	697b      	ldr	r3, [r7, #20]
     8d0:	781b      	ldrb	r3, [r3, #0]
     8d2:	2b75      	cmp	r3, #117	; 0x75
     8d4:	d116      	bne.n	904 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
     8d6:	697b      	ldr	r3, [r7, #20]
     8d8:	f103 0301 	add.w	r3, r3, #1
     8dc:	617b      	str	r3, [r7, #20]
     8de:	6978      	ldr	r0, [r7, #20]
     8e0:	f7ff ffb0 	bl	844 <getCharFromUnicode>
     8e4:	4603      	mov	r3, r0
     8e6:	73fb      	strb	r3, [r7, #15]
                if ( ch == '\0' ) return 0;
     8e8:	7bfb      	ldrb	r3, [r7, #15]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d102      	bne.n	8f4 <parseString+0x64>
     8ee:	f04f 0300 	mov.w	r3, #0
     8f2:	e02a      	b.n	94a <parseString+0xba>
                *tail = ch;
     8f4:	693b      	ldr	r3, [r7, #16]
     8f6:	7bfa      	ldrb	r2, [r7, #15]
     8f8:	701a      	strb	r2, [r3, #0]
                head += 3;
     8fa:	697b      	ldr	r3, [r7, #20]
     8fc:	f103 0303 	add.w	r3, r3, #3
     900:	617b      	str	r3, [r7, #20]
     902:	e014      	b.n	92e <parseString+0x9e>
            }
            else {
                char const esc = getEscape( *head );
     904:	697b      	ldr	r3, [r7, #20]
     906:	781b      	ldrb	r3, [r3, #0]
     908:	4618      	mov	r0, r3
     90a:	f7ff ff41 	bl	790 <getEscape>
     90e:	4603      	mov	r3, r0
     910:	73bb      	strb	r3, [r7, #14]
                if ( esc == '\0' ) return 0;
     912:	7bbb      	ldrb	r3, [r7, #14]
     914:	2b00      	cmp	r3, #0
     916:	d102      	bne.n	91e <parseString+0x8e>
     918:	f04f 0300 	mov.w	r3, #0
     91c:	e015      	b.n	94a <parseString+0xba>
                *tail = esc;
     91e:	693b      	ldr	r3, [r7, #16]
     920:	7bba      	ldrb	r2, [r7, #14]
     922:	701a      	strb	r2, [r3, #0]
     924:	e003      	b.n	92e <parseString+0x9e>
            }
        }
        else *tail = *head;
     926:	697b      	ldr	r3, [r7, #20]
     928:	781a      	ldrb	r2, [r3, #0]
     92a:	693b      	ldr	r3, [r7, #16]
     92c:	701a      	strb	r2, [r3, #0]
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
    char* head = str;
    char* tail = str;
    for( ; *head >= ' '; ++head, ++tail ) {
     92e:	697b      	ldr	r3, [r7, #20]
     930:	f103 0301 	add.w	r3, r3, #1
     934:	617b      	str	r3, [r7, #20]
     936:	693b      	ldr	r3, [r7, #16]
     938:	f103 0301 	add.w	r3, r3, #1
     93c:	613b      	str	r3, [r7, #16]
     93e:	697b      	ldr	r3, [r7, #20]
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2b1f      	cmp	r3, #31
     944:	d8ad      	bhi.n	8a2 <parseString+0x12>
                *tail = esc;
            }
        }
        else *tail = *head;
    }
    return 0;
     946:	f04f 0300 	mov.w	r3, #0
}
     94a:	4618      	mov	r0, r3
     94c:	f107 0718 	add.w	r7, r7, #24
     950:	46bd      	mov	sp, r7
     952:	bd80      	pop	{r7, pc}

00000954 <propertyName>:
/** Parse a string to get the name of a property.
  * @param str Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
     95c:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
     95e:	687b      	ldr	r3, [r7, #4]
     960:	f103 0301 	add.w	r3, r3, #1
     964:	607b      	str	r3, [r7, #4]
     966:	683b      	ldr	r3, [r7, #0]
     968:	687a      	ldr	r2, [r7, #4]
     96a:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
     96c:	6878      	ldr	r0, [r7, #4]
     96e:	f7ff ff8f 	bl	890 <parseString>
     972:	6078      	str	r0, [r7, #4]
    if ( !ptr ) return 0;
     974:	687b      	ldr	r3, [r7, #4]
     976:	2b00      	cmp	r3, #0
     978:	d102      	bne.n	980 <propertyName+0x2c>
     97a:	f04f 0300 	mov.w	r3, #0
     97e:	e01d      	b.n	9bc <propertyName+0x68>
    ptr = goBlank( ptr );
     980:	6878      	ldr	r0, [r7, #4]
     982:	f000 fb69 	bl	1058 <goBlank>
     986:	6078      	str	r0, [r7, #4]
    if ( !ptr ) return 0;
     988:	687b      	ldr	r3, [r7, #4]
     98a:	2b00      	cmp	r3, #0
     98c:	d102      	bne.n	994 <propertyName+0x40>
     98e:	f04f 0300 	mov.w	r3, #0
     992:	e013      	b.n	9bc <propertyName+0x68>
    if ( *ptr++ != ':' ) return 0;
     994:	687b      	ldr	r3, [r7, #4]
     996:	781b      	ldrb	r3, [r3, #0]
     998:	2b3a      	cmp	r3, #58	; 0x3a
     99a:	bf0c      	ite	eq
     99c:	2300      	moveq	r3, #0
     99e:	2301      	movne	r3, #1
     9a0:	b2db      	uxtb	r3, r3
     9a2:	687a      	ldr	r2, [r7, #4]
     9a4:	f102 0201 	add.w	r2, r2, #1
     9a8:	607a      	str	r2, [r7, #4]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d002      	beq.n	9b4 <propertyName+0x60>
     9ae:	f04f 0300 	mov.w	r3, #0
     9b2:	e003      	b.n	9bc <propertyName+0x68>
    return goBlank( ptr );
     9b4:	6878      	ldr	r0, [r7, #4]
     9b6:	f000 fb4f 	bl	1058 <goBlank>
     9ba:	4603      	mov	r3, r0
}
     9bc:	4618      	mov	r0, r3
     9be:	f107 0708 	add.w	r7, r7, #8
     9c2:	46bd      	mov	sp, r7
     9c4:	bd80      	pop	{r7, pc}
     9c6:	bf00      	nop

000009c8 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param str Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
     9c8:	b580      	push	{r7, lr}
     9ca:	b082      	sub	sp, #8
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	6039      	str	r1, [r7, #0]
    ++property->u.value;
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	689b      	ldr	r3, [r3, #8]
     9d6:	f103 0201 	add.w	r2, r3, #1
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	f103 0301 	add.w	r3, r3, #1
     9e4:	607b      	str	r3, [r7, #4]
     9e6:	6878      	ldr	r0, [r7, #4]
     9e8:	f7ff ff52 	bl	890 <parseString>
     9ec:	6078      	str	r0, [r7, #4]
    if ( !ptr ) return 0;
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d102      	bne.n	9fa <textValue+0x32>
     9f4:	f04f 0300 	mov.w	r3, #0
     9f8:	e004      	b.n	a04 <textValue+0x3c>
    property->type = JSON_TEXT;
     9fa:	683b      	ldr	r3, [r7, #0]
     9fc:	f04f 0202 	mov.w	r2, #2
     a00:	731a      	strb	r2, [r3, #12]
    return ptr;
     a02:	687b      	ldr	r3, [r7, #4]
}
     a04:	4618      	mov	r0, r3
     a06:	f107 0708 	add.w	r7, r7, #8
     a0a:	46bd      	mov	sp, r7
     a0c:	bd80      	pop	{r7, pc}
     a0e:	bf00      	nop

00000a10 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
     a10:	b480      	push	{r7}
     a12:	b083      	sub	sp, #12
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
     a18:	6039      	str	r1, [r7, #0]
    while( *str )
     a1a:	e015      	b.n	a48 <checkStr+0x38>
        if ( *ptr++ != *str++ )
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	781a      	ldrb	r2, [r3, #0]
     a20:	683b      	ldr	r3, [r7, #0]
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	429a      	cmp	r2, r3
     a26:	bf0c      	ite	eq
     a28:	2300      	moveq	r3, #0
     a2a:	2301      	movne	r3, #1
     a2c:	b2db      	uxtb	r3, r3
     a2e:	687a      	ldr	r2, [r7, #4]
     a30:	f102 0201 	add.w	r2, r2, #1
     a34:	607a      	str	r2, [r7, #4]
     a36:	683a      	ldr	r2, [r7, #0]
     a38:	f102 0201 	add.w	r2, r2, #1
     a3c:	603a      	str	r2, [r7, #0]
     a3e:	2b00      	cmp	r3, #0
     a40:	d002      	beq.n	a48 <checkStr+0x38>
            return 0;
     a42:	f04f 0300 	mov.w	r3, #0
     a46:	e004      	b.n	a52 <checkStr+0x42>
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
    while( *str )
     a48:	683b      	ldr	r3, [r7, #0]
     a4a:	781b      	ldrb	r3, [r3, #0]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d1e5      	bne.n	a1c <checkStr+0xc>
        if ( *ptr++ != *str++ )
            return 0;
    return ptr;
     a50:	687b      	ldr	r3, [r7, #4]
}
     a52:	4618      	mov	r0, r3
     a54:	f107 070c 	add.w	r7, r7, #12
     a58:	46bd      	mov	sp, r7
     a5a:	bc80      	pop	{r7}
     a5c:	4770      	bx	lr
     a5e:	bf00      	nop

00000a60 <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
     a60:	b580      	push	{r7, lr}
     a62:	b084      	sub	sp, #16
     a64:	af00      	add	r7, sp, #0
     a66:	60f8      	str	r0, [r7, #12]
     a68:	60b9      	str	r1, [r7, #8]
     a6a:	607a      	str	r2, [r7, #4]
     a6c:	70fb      	strb	r3, [r7, #3]
    ptr = checkStr( ptr, value );
     a6e:	68f8      	ldr	r0, [r7, #12]
     a70:	6879      	ldr	r1, [r7, #4]
     a72:	f7ff ffcd 	bl	a10 <checkStr>
     a76:	60f8      	str	r0, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d00a      	beq.n	a94 <primitiveValue+0x34>
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	4618      	mov	r0, r3
     a84:	f000 fb56 	bl	1134 <isEndOfPrimitive>
     a88:	4603      	mov	r3, r0
     a8a:	f083 0301 	eor.w	r3, r3, #1
     a8e:	b2db      	uxtb	r3, r3
     a90:	2b00      	cmp	r3, #0
     a92:	d002      	beq.n	a9a <primitiveValue+0x3a>
     a94:	f04f 0300 	mov.w	r3, #0
     a98:	e007      	b.n	aaa <primitiveValue+0x4a>
    ptr = setToNull( ptr );
     a9a:	68f8      	ldr	r0, [r7, #12]
     a9c:	f000 fb28 	bl	10f0 <setToNull>
     aa0:	60f8      	str	r0, [r7, #12]
    property->type = type;
     aa2:	68bb      	ldr	r3, [r7, #8]
     aa4:	78fa      	ldrb	r2, [r7, #3]
     aa6:	731a      	strb	r2, [r3, #12]
    return ptr;
     aa8:	68fb      	ldr	r3, [r7, #12]
}
     aaa:	4618      	mov	r0, r3
     aac:	f107 0710 	add.w	r7, r7, #16
     ab0:	46bd      	mov	sp, r7
     ab2:	bd80      	pop	{r7, pc}

00000ab4 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
     ab4:	b580      	push	{r7, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
     abc:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
     abe:	6878      	ldr	r0, [r7, #4]
     ac0:	6839      	ldr	r1, [r7, #0]
     ac2:	4a05      	ldr	r2, [pc, #20]	; (ad8 <trueValue+0x24>)
     ac4:	f04f 0303 	mov.w	r3, #3
     ac8:	f7ff ffca 	bl	a60 <primitiveValue>
     acc:	4603      	mov	r3, r0
}
     ace:	4618      	mov	r0, r3
     ad0:	f107 0708 	add.w	r7, r7, #8
     ad4:	46bd      	mov	sp, r7
     ad6:	bd80      	pop	{r7, pc}
     ad8:	00008f64 	.word	0x00008f64

00000adc <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
     adc:	b580      	push	{r7, lr}
     ade:	b082      	sub	sp, #8
     ae0:	af00      	add	r7, sp, #0
     ae2:	6078      	str	r0, [r7, #4]
     ae4:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
     ae6:	6878      	ldr	r0, [r7, #4]
     ae8:	6839      	ldr	r1, [r7, #0]
     aea:	4a05      	ldr	r2, [pc, #20]	; (b00 <falseValue+0x24>)
     aec:	f04f 0303 	mov.w	r3, #3
     af0:	f7ff ffb6 	bl	a60 <primitiveValue>
     af4:	4603      	mov	r3, r0
}
     af6:	4618      	mov	r0, r3
     af8:	f107 0708 	add.w	r7, r7, #8
     afc:	46bd      	mov	sp, r7
     afe:	bd80      	pop	{r7, pc}
     b00:	00008f6c 	.word	0x00008f6c

00000b04 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
     b04:	b580      	push	{r7, lr}
     b06:	b082      	sub	sp, #8
     b08:	af00      	add	r7, sp, #0
     b0a:	6078      	str	r0, [r7, #4]
     b0c:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
     b0e:	6878      	ldr	r0, [r7, #4]
     b10:	6839      	ldr	r1, [r7, #0]
     b12:	4a05      	ldr	r2, [pc, #20]	; (b28 <nullValue+0x24>)
     b14:	f04f 0306 	mov.w	r3, #6
     b18:	f7ff ffa2 	bl	a60 <primitiveValue>
     b1c:	4603      	mov	r3, r0
}
     b1e:	4618      	mov	r0, r3
     b20:	f107 0708 	add.w	r7, r7, #8
     b24:	46bd      	mov	sp, r7
     b26:	bd80      	pop	{r7, pc}
     b28:	00008f74 	.word	0x00008f74

00000b2c <expValue>:

/** Analyze the exponential part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
     b2c:	b580      	push	{r7, lr}
     b2e:	b082      	sub	sp, #8
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	781b      	ldrb	r3, [r3, #0]
     b38:	2b2d      	cmp	r3, #45	; 0x2d
     b3a:	d003      	beq.n	b44 <expValue+0x18>
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	2b2b      	cmp	r3, #43	; 0x2b
     b42:	d103      	bne.n	b4c <expValue+0x20>
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	f103 0301 	add.w	r3, r3, #1
     b4a:	607b      	str	r3, [r7, #4]
    if ( !isNum( *ptr ) ) return 0;
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	4618      	mov	r0, r3
     b52:	f000 fa93 	bl	107c <isNum>
     b56:	4603      	mov	r3, r0
     b58:	f083 0301 	eor.w	r3, r3, #1
     b5c:	b2db      	uxtb	r3, r3
     b5e:	2b00      	cmp	r3, #0
     b60:	d002      	beq.n	b68 <expValue+0x3c>
     b62:	f04f 0300 	mov.w	r3, #0
     b66:	e008      	b.n	b7a <expValue+0x4e>
    ptr = goNum( ++ptr );
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	f103 0301 	add.w	r3, r3, #1
     b6e:	607b      	str	r3, [r7, #4]
     b70:	6878      	ldr	r0, [r7, #4]
     b72:	f000 fa9b 	bl	10ac <goNum>
     b76:	6078      	str	r0, [r7, #4]
    return ptr;
     b78:	687b      	ldr	r3, [r7, #4]
}
     b7a:	4618      	mov	r0, r3
     b7c:	f107 0708 	add.w	r7, r7, #8
     b80:	46bd      	mov	sp, r7
     b82:	bd80      	pop	{r7, pc}

00000b84 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param str Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
     b84:	b580      	push	{r7, lr}
     b86:	b082      	sub	sp, #8
     b88:	af00      	add	r7, sp, #0
     b8a:	6078      	str	r0, [r7, #4]
    if ( !isNum( *ptr ) ) return 0;
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	4618      	mov	r0, r3
     b92:	f000 fa73 	bl	107c <isNum>
     b96:	4603      	mov	r3, r0
     b98:	f083 0301 	eor.w	r3, r3, #1
     b9c:	b2db      	uxtb	r3, r3
     b9e:	2b00      	cmp	r3, #0
     ba0:	d002      	beq.n	ba8 <fraqValue+0x24>
     ba2:	f04f 0300 	mov.w	r3, #0
     ba6:	e00e      	b.n	bc6 <fraqValue+0x42>
    ptr = goNum( ++ptr );
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	f103 0301 	add.w	r3, r3, #1
     bae:	607b      	str	r3, [r7, #4]
     bb0:	6878      	ldr	r0, [r7, #4]
     bb2:	f000 fa7b 	bl	10ac <goNum>
     bb6:	6078      	str	r0, [r7, #4]
    if ( !ptr ) return 0;
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2b00      	cmp	r3, #0
     bbc:	d102      	bne.n	bc4 <fraqValue+0x40>
     bbe:	f04f 0300 	mov.w	r3, #0
     bc2:	e000      	b.n	bc6 <fraqValue+0x42>
    return ptr;
     bc4:	687b      	ldr	r3, [r7, #4]
}
     bc6:	4618      	mov	r0, r3
     bc8:	f107 0708 	add.w	r7, r7, #8
     bcc:	46bd      	mov	sp, r7
     bce:	bd80      	pop	{r7, pc}

00000bd0 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param str Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
     bd0:	b580      	push	{r7, lr}
     bd2:	b088      	sub	sp, #32
     bd4:	af00      	add	r7, sp, #0
     bd6:	6078      	str	r0, [r7, #4]
     bd8:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	2b2d      	cmp	r3, #45	; 0x2d
     be0:	d103      	bne.n	bea <numValue+0x1a>
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	f103 0301 	add.w	r3, r3, #1
     be8:	607b      	str	r3, [r7, #4]
    if ( !isNum( *ptr ) ) return 0;
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	4618      	mov	r0, r3
     bf0:	f000 fa44 	bl	107c <isNum>
     bf4:	4603      	mov	r3, r0
     bf6:	f083 0301 	eor.w	r3, r3, #1
     bfa:	b2db      	uxtb	r3, r3
     bfc:	2b00      	cmp	r3, #0
     bfe:	d002      	beq.n	c06 <numValue+0x36>
     c00:	f04f 0300 	mov.w	r3, #0
     c04:	e0a4      	b.n	d50 <numValue+0x180>
    if ( *ptr != '0' ) {
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b30      	cmp	r3, #48	; 0x30
     c0c:	d009      	beq.n	c22 <numValue+0x52>
        ptr = goNum( ptr );
     c0e:	6878      	ldr	r0, [r7, #4]
     c10:	f000 fa4c 	bl	10ac <goNum>
     c14:	6078      	str	r0, [r7, #4]
        if ( !ptr ) return 0;
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	2b00      	cmp	r3, #0
     c1a:	d111      	bne.n	c40 <numValue+0x70>
     c1c:	f04f 0300 	mov.w	r3, #0
     c20:	e096      	b.n	d50 <numValue+0x180>
    }
    else if ( isNum( *++ptr ) ) return 0;
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	f103 0301 	add.w	r3, r3, #1
     c28:	607b      	str	r3, [r7, #4]
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	4618      	mov	r0, r3
     c30:	f000 fa24 	bl	107c <isNum>
     c34:	4603      	mov	r3, r0
     c36:	2b00      	cmp	r3, #0
     c38:	d002      	beq.n	c40 <numValue+0x70>
     c3a:	f04f 0300 	mov.w	r3, #0
     c3e:	e087      	b.n	d50 <numValue+0x180>
    property->type = JSON_INTEGER;
     c40:	683b      	ldr	r3, [r7, #0]
     c42:	f04f 0204 	mov.w	r2, #4
     c46:	731a      	strb	r2, [r3, #12]
    if ( *ptr == '.' ) {
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	2b2e      	cmp	r3, #46	; 0x2e
     c4e:	d111      	bne.n	c74 <numValue+0xa4>
        ptr = fraqValue( ++ptr );
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	f103 0301 	add.w	r3, r3, #1
     c56:	607b      	str	r3, [r7, #4]
     c58:	6878      	ldr	r0, [r7, #4]
     c5a:	f7ff ff93 	bl	b84 <fraqValue>
     c5e:	6078      	str	r0, [r7, #4]
        if ( !ptr ) return 0;
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	2b00      	cmp	r3, #0
     c64:	d102      	bne.n	c6c <numValue+0x9c>
     c66:	f04f 0300 	mov.w	r3, #0
     c6a:	e071      	b.n	d50 <numValue+0x180>
        property->type = JSON_REAL;
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	f04f 0205 	mov.w	r2, #5
     c72:	731a      	strb	r2, [r3, #12]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b65      	cmp	r3, #101	; 0x65
     c7a:	d003      	beq.n	c84 <numValue+0xb4>
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	2b45      	cmp	r3, #69	; 0x45
     c82:	d111      	bne.n	ca8 <numValue+0xd8>
        ptr = expValue( ++ptr );
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	f103 0301 	add.w	r3, r3, #1
     c8a:	607b      	str	r3, [r7, #4]
     c8c:	6878      	ldr	r0, [r7, #4]
     c8e:	f7ff ff4d 	bl	b2c <expValue>
     c92:	6078      	str	r0, [r7, #4]
        if ( !ptr ) return 0;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	2b00      	cmp	r3, #0
     c98:	d102      	bne.n	ca0 <numValue+0xd0>
     c9a:	f04f 0300 	mov.w	r3, #0
     c9e:	e057      	b.n	d50 <numValue+0x180>
        property->type = JSON_REAL;
     ca0:	683b      	ldr	r3, [r7, #0]
     ca2:	f04f 0205 	mov.w	r2, #5
     ca6:	731a      	strb	r2, [r3, #12]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	4618      	mov	r0, r3
     cae:	f000 fa41 	bl	1134 <isEndOfPrimitive>
     cb2:	4603      	mov	r3, r0
     cb4:	f083 0301 	eor.w	r3, r3, #1
     cb8:	b2db      	uxtb	r3, r3
     cba:	2b00      	cmp	r3, #0
     cbc:	d002      	beq.n	cc4 <numValue+0xf4>
     cbe:	f04f 0300 	mov.w	r3, #0
     cc2:	e045      	b.n	d50 <numValue+0x180>
    if ( JSON_INTEGER == property->type ) {
     cc4:	683b      	ldr	r3, [r7, #0]
     cc6:	7b1b      	ldrb	r3, [r3, #12]
     cc8:	2b04      	cmp	r3, #4
     cca:	d13c      	bne.n	d46 <numValue+0x176>
        char const* value = property->u.value;
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	689b      	ldr	r3, [r3, #8]
     cd0:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
     cd2:	69fb      	ldr	r3, [r7, #28]
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	2b2d      	cmp	r3, #45	; 0x2d
     cd8:	bf14      	ite	ne
     cda:	2300      	movne	r3, #0
     cdc:	2301      	moveq	r3, #1
     cde:	76fb      	strb	r3, [r7, #27]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
     ce0:	7efb      	ldrb	r3, [r7, #27]
     ce2:	2b00      	cmp	r3, #0
     ce4:	d002      	beq.n	cec <numValue+0x11c>
     ce6:	f04f 0314 	mov.w	r3, #20
     cea:	e001      	b.n	cf0 <numValue+0x120>
     cec:	f04f 0313 	mov.w	r3, #19
     cf0:	617b      	str	r3, [r7, #20]
        unsigned int const len = ptr - value;
     cf2:	687a      	ldr	r2, [r7, #4]
     cf4:	69fb      	ldr	r3, [r7, #28]
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
     cfa:	693a      	ldr	r2, [r7, #16]
     cfc:	697b      	ldr	r3, [r7, #20]
     cfe:	429a      	cmp	r2, r3
     d00:	d902      	bls.n	d08 <numValue+0x138>
     d02:	f04f 0300 	mov.w	r3, #0
     d06:	e023      	b.n	d50 <numValue+0x180>
        if ( len == maxdigits ) {
     d08:	693a      	ldr	r2, [r7, #16]
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	429a      	cmp	r2, r3
     d0e:	d11a      	bne.n	d46 <numValue+0x176>
            char const tmp = *ptr;
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	73fb      	strb	r3, [r7, #15]
            *ptr = '\0';
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	f04f 0200 	mov.w	r2, #0
     d1c:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
     d1e:	7efb      	ldrb	r3, [r7, #27]
     d20:	2b00      	cmp	r3, #0
     d22:	d001      	beq.n	d28 <numValue+0x158>
     d24:	4b0d      	ldr	r3, [pc, #52]	; (d5c <numValue+0x18c>)
     d26:	e000      	b.n	d2a <numValue+0x15a>
     d28:	4b0d      	ldr	r3, [pc, #52]	; (d60 <numValue+0x190>)
     d2a:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
     d2c:	68b8      	ldr	r0, [r7, #8]
     d2e:	69f9      	ldr	r1, [r7, #28]
     d30:	f007 ff20 	bl	8b74 <strcmp>
     d34:	4603      	mov	r3, r0
     d36:	2b00      	cmp	r3, #0
     d38:	da02      	bge.n	d40 <numValue+0x170>
     d3a:	f04f 0300 	mov.w	r3, #0
     d3e:	e007      	b.n	d50 <numValue+0x180>
            *ptr = tmp;
     d40:	687b      	ldr	r3, [r7, #4]
     d42:	7bfa      	ldrb	r2, [r7, #15]
     d44:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
     d46:	6878      	ldr	r0, [r7, #4]
     d48:	f000 f9d2 	bl	10f0 <setToNull>
     d4c:	6078      	str	r0, [r7, #4]
    return ptr;
     d4e:	687b      	ldr	r3, [r7, #4]
}
     d50:	4618      	mov	r0, r3
     d52:	f107 0720 	add.w	r7, r7, #32
     d56:	46bd      	mov	sp, r7
     d58:	bd80      	pop	{r7, pc}
     d5a:	bf00      	nop
     d5c:	00008f90 	.word	0x00008f90
     d60:	00008fa8 	.word	0x00008fa8

00000d64 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
     d64:	b480      	push	{r7}
     d66:	b085      	sub	sp, #20
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
     d6e:	683b      	ldr	r3, [r7, #0]
     d70:	f04f 0200 	mov.w	r2, #0
     d74:	601a      	str	r2, [r3, #0]
    if ( !obj->u.child ) obj->u.child = property;
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	689b      	ldr	r3, [r3, #8]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d103      	bne.n	d86 <add+0x22>
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	683a      	ldr	r2, [r7, #0]
     d82:	609a      	str	r2, [r3, #8]
     d84:	e00d      	b.n	da2 <add+0x3e>
    else {
        json_t* iter;
        for( iter = obj->u.child; iter->sibling; iter = iter->sibling );
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	689b      	ldr	r3, [r3, #8]
     d8a:	60fb      	str	r3, [r7, #12]
     d8c:	e002      	b.n	d94 <add+0x30>
     d8e:	68fb      	ldr	r3, [r7, #12]
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	60fb      	str	r3, [r7, #12]
     d94:	68fb      	ldr	r3, [r7, #12]
     d96:	681b      	ldr	r3, [r3, #0]
     d98:	2b00      	cmp	r3, #0
     d9a:	d1f8      	bne.n	d8e <add+0x2a>
        iter->sibling = property;
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	683a      	ldr	r2, [r7, #0]
     da0:	601a      	str	r2, [r3, #0]
    }
}
     da2:	f107 0714 	add.w	r7, r7, #20
     da6:	46bd      	mov	sp, r7
     da8:	bc80      	pop	{r7}
     daa:	4770      	bx	lr

00000dac <objValue>:
/** Parser a string to get a json object value.
  * @param str Pointer to first character.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
     dac:	b580      	push	{r7, lr}
     dae:	b088      	sub	sp, #32
     db0:	af00      	add	r7, sp, #0
     db2:	60f8      	str	r0, [r7, #12]
     db4:	60b9      	str	r1, [r7, #8]
     db6:	607a      	str	r2, [r7, #4]
    obj->type    = JSON_OBJ;
     db8:	68bb      	ldr	r3, [r7, #8]
     dba:	f04f 0200 	mov.w	r2, #0
     dbe:	731a      	strb	r2, [r3, #12]
    obj->u.child = 0;
     dc0:	68bb      	ldr	r3, [r7, #8]
     dc2:	f04f 0200 	mov.w	r2, #0
     dc6:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
     dc8:	68bb      	ldr	r3, [r7, #8]
     dca:	f04f 0200 	mov.w	r2, #0
     dce:	601a      	str	r2, [r3, #0]
    ptr++;
     dd0:	68fb      	ldr	r3, [r7, #12]
     dd2:	f103 0301 	add.w	r3, r3, #1
     dd6:	60fb      	str	r3, [r7, #12]
     dd8:	e000      	b.n	ddc <objValue+0x30>
            case 'f':  ptr = falseValue( ptr, property ); break;
            case 'n':  ptr = nullValue( ptr, property );  break;
            default:   ptr = numValue( ptr, property );   break;
        }
        if ( !ptr ) return 0;
    }
     dda:	bf00      	nop
    obj->type    = JSON_OBJ;
    obj->u.child = 0;
    obj->sibling = 0;
    ptr++;
    for(;;) {
        ptr = goBlank( ptr );
     ddc:	68f8      	ldr	r0, [r7, #12]
     dde:	f000 f93b 	bl	1058 <goBlank>
     de2:	60f8      	str	r0, [r7, #12]
        if ( !ptr ) return 0;
     de4:	68fb      	ldr	r3, [r7, #12]
     de6:	2b00      	cmp	r3, #0
     de8:	d102      	bne.n	df0 <objValue+0x44>
     dea:	f04f 0300 	mov.w	r3, #0
     dee:	e0b8      	b.n	f62 <objValue+0x1b6>
        if ( *ptr == ',' ) {
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	781b      	ldrb	r3, [r3, #0]
     df4:	2b2c      	cmp	r3, #44	; 0x2c
     df6:	d104      	bne.n	e02 <objValue+0x56>
            ++ptr;
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	f103 0301 	add.w	r3, r3, #1
     dfe:	60fb      	str	r3, [r7, #12]
            continue;
     e00:	e0ae      	b.n	f60 <objValue+0x1b4>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
     e02:	68bb      	ldr	r3, [r7, #8]
     e04:	7b1b      	ldrb	r3, [r3, #12]
     e06:	2b00      	cmp	r3, #0
     e08:	d102      	bne.n	e10 <objValue+0x64>
     e0a:	f04f 037d 	mov.w	r3, #125	; 0x7d
     e0e:	e001      	b.n	e14 <objValue+0x68>
     e10:	f04f 035d 	mov.w	r3, #93	; 0x5d
     e14:	77fb      	strb	r3, [r7, #31]
        if ( *ptr == endchar ) {
     e16:	68fb      	ldr	r3, [r7, #12]
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	7ffa      	ldrb	r2, [r7, #31]
     e1c:	429a      	cmp	r2, r3
     e1e:	d11a      	bne.n	e56 <objValue+0xaa>
            *ptr = '\0';
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	f04f 0200 	mov.w	r2, #0
     e26:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
     e28:	68bb      	ldr	r3, [r7, #8]
     e2a:	681b      	ldr	r3, [r3, #0]
     e2c:	61bb      	str	r3, [r7, #24]
            if ( !parentObj ) return ++ptr;
     e2e:	69bb      	ldr	r3, [r7, #24]
     e30:	2b00      	cmp	r3, #0
     e32:	d105      	bne.n	e40 <objValue+0x94>
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	f103 0301 	add.w	r3, r3, #1
     e3a:	60fb      	str	r3, [r7, #12]
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	e090      	b.n	f62 <objValue+0x1b6>
            obj->sibling = 0;
     e40:	68bb      	ldr	r3, [r7, #8]
     e42:	f04f 0200 	mov.w	r2, #0
     e46:	601a      	str	r2, [r3, #0]
            obj = parentObj;
     e48:	69bb      	ldr	r3, [r7, #24]
     e4a:	60bb      	str	r3, [r7, #8]
            ++ptr;
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	f103 0301 	add.w	r3, r3, #1
     e52:	60fb      	str	r3, [r7, #12]
            continue;
     e54:	e084      	b.n	f60 <objValue+0x1b4>
        }
        json_t* property = poolNew( pool );
     e56:	6878      	ldr	r0, [r7, #4]
     e58:	f000 f898 	bl	f8c <poolNew>
     e5c:	6178      	str	r0, [r7, #20]
        if ( !property ) return 0;
     e5e:	697b      	ldr	r3, [r7, #20]
     e60:	2b00      	cmp	r3, #0
     e62:	d102      	bne.n	e6a <objValue+0xbe>
     e64:	f04f 0300 	mov.w	r3, #0
     e68:	e07b      	b.n	f62 <objValue+0x1b6>
        if( obj->type != JSON_ARRAY ) {
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	7b1b      	ldrb	r3, [r3, #12]
     e6e:	2b01      	cmp	r3, #1
     e70:	d011      	beq.n	e96 <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	2b22      	cmp	r3, #34	; 0x22
     e78:	d002      	beq.n	e80 <objValue+0xd4>
     e7a:	f04f 0300 	mov.w	r3, #0
     e7e:	e070      	b.n	f62 <objValue+0x1b6>
            ptr = propertyName( ptr, property );
     e80:	68f8      	ldr	r0, [r7, #12]
     e82:	6979      	ldr	r1, [r7, #20]
     e84:	f7ff fd66 	bl	954 <propertyName>
     e88:	60f8      	str	r0, [r7, #12]
            if ( !ptr ) return 0;
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d106      	bne.n	e9e <objValue+0xf2>
     e90:	f04f 0300 	mov.w	r3, #0
     e94:	e065      	b.n	f62 <objValue+0x1b6>
        }
        else property->name = 0;
     e96:	697b      	ldr	r3, [r7, #20]
     e98:	f04f 0200 	mov.w	r2, #0
     e9c:	605a      	str	r2, [r3, #4]
        add( obj, property );
     e9e:	68b8      	ldr	r0, [r7, #8]
     ea0:	6979      	ldr	r1, [r7, #20]
     ea2:	f7ff ff5f 	bl	d64 <add>
        property->u.value = ptr;
     ea6:	697b      	ldr	r3, [r7, #20]
     ea8:	68fa      	ldr	r2, [r7, #12]
     eaa:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	2b6e      	cmp	r3, #110	; 0x6e
     eb2:	d042      	beq.n	f3a <objValue+0x18e>
     eb4:	2b6e      	cmp	r3, #110	; 0x6e
     eb6:	dc06      	bgt.n	ec6 <objValue+0x11a>
     eb8:	2b5b      	cmp	r3, #91	; 0x5b
     eba:	d01a      	beq.n	ef2 <objValue+0x146>
     ebc:	2b66      	cmp	r3, #102	; 0x66
     ebe:	d036      	beq.n	f2e <objValue+0x182>
     ec0:	2b22      	cmp	r3, #34	; 0x22
     ec2:	d028      	beq.n	f16 <objValue+0x16a>
     ec4:	e03f      	b.n	f46 <objValue+0x19a>
     ec6:	2b74      	cmp	r3, #116	; 0x74
     ec8:	d02b      	beq.n	f22 <objValue+0x176>
     eca:	2b7b      	cmp	r3, #123	; 0x7b
     ecc:	d13b      	bne.n	f46 <objValue+0x19a>
            case '{':
                property->type    = JSON_OBJ;
     ece:	697b      	ldr	r3, [r7, #20]
     ed0:	f04f 0200 	mov.w	r2, #0
     ed4:	731a      	strb	r2, [r3, #12]
                property->u.child = 0;
     ed6:	697b      	ldr	r3, [r7, #20]
     ed8:	f04f 0200 	mov.w	r2, #0
     edc:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
     ede:	697b      	ldr	r3, [r7, #20]
     ee0:	68ba      	ldr	r2, [r7, #8]
     ee2:	601a      	str	r2, [r3, #0]
                obj = property;
     ee4:	697b      	ldr	r3, [r7, #20]
     ee6:	60bb      	str	r3, [r7, #8]
                ++ptr;
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	f103 0301 	add.w	r3, r3, #1
     eee:	60fb      	str	r3, [r7, #12]
                break;
     ef0:	e02f      	b.n	f52 <objValue+0x1a6>
            case '[':
                property->type    = JSON_ARRAY;
     ef2:	697b      	ldr	r3, [r7, #20]
     ef4:	f04f 0201 	mov.w	r2, #1
     ef8:	731a      	strb	r2, [r3, #12]
                property->u.child = 0;
     efa:	697b      	ldr	r3, [r7, #20]
     efc:	f04f 0200 	mov.w	r2, #0
     f00:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
     f02:	697b      	ldr	r3, [r7, #20]
     f04:	68ba      	ldr	r2, [r7, #8]
     f06:	601a      	str	r2, [r3, #0]
                obj = property;
     f08:	697b      	ldr	r3, [r7, #20]
     f0a:	60bb      	str	r3, [r7, #8]
                ++ptr;
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	f103 0301 	add.w	r3, r3, #1
     f12:	60fb      	str	r3, [r7, #12]
                break;
     f14:	e01d      	b.n	f52 <objValue+0x1a6>
            case '\"': ptr = textValue( ptr, property );  break;
     f16:	68f8      	ldr	r0, [r7, #12]
     f18:	6979      	ldr	r1, [r7, #20]
     f1a:	f7ff fd55 	bl	9c8 <textValue>
     f1e:	60f8      	str	r0, [r7, #12]
     f20:	e017      	b.n	f52 <objValue+0x1a6>
            case 't':  ptr = trueValue( ptr, property );  break;
     f22:	68f8      	ldr	r0, [r7, #12]
     f24:	6979      	ldr	r1, [r7, #20]
     f26:	f7ff fdc5 	bl	ab4 <trueValue>
     f2a:	60f8      	str	r0, [r7, #12]
     f2c:	e011      	b.n	f52 <objValue+0x1a6>
            case 'f':  ptr = falseValue( ptr, property ); break;
     f2e:	68f8      	ldr	r0, [r7, #12]
     f30:	6979      	ldr	r1, [r7, #20]
     f32:	f7ff fdd3 	bl	adc <falseValue>
     f36:	60f8      	str	r0, [r7, #12]
     f38:	e00b      	b.n	f52 <objValue+0x1a6>
            case 'n':  ptr = nullValue( ptr, property );  break;
     f3a:	68f8      	ldr	r0, [r7, #12]
     f3c:	6979      	ldr	r1, [r7, #20]
     f3e:	f7ff fde1 	bl	b04 <nullValue>
     f42:	60f8      	str	r0, [r7, #12]
     f44:	e005      	b.n	f52 <objValue+0x1a6>
            default:   ptr = numValue( ptr, property );   break;
     f46:	68f8      	ldr	r0, [r7, #12]
     f48:	6979      	ldr	r1, [r7, #20]
     f4a:	f7ff fe41 	bl	bd0 <numValue>
     f4e:	60f8      	str	r0, [r7, #12]
     f50:	bf00      	nop
        }
        if ( !ptr ) return 0;
     f52:	68fb      	ldr	r3, [r7, #12]
     f54:	2b00      	cmp	r3, #0
     f56:	f47f af40 	bne.w	dda <objValue+0x2e>
     f5a:	f04f 0300 	mov.w	r3, #0
     f5e:	e000      	b.n	f62 <objValue+0x1b6>
    }
     f60:	e73c      	b.n	ddc <objValue+0x30>
}
     f62:	4618      	mov	r0, r3
     f64:	f107 0720 	add.w	r7, r7, #32
     f68:	46bd      	mov	sp, r7
     f6a:	bd80      	pop	{r7, pc}

00000f6c <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
     f6c:	b480      	push	{r7}
     f6e:	b083      	sub	sp, #12
     f70:	af00      	add	r7, sp, #0
     f72:	6078      	str	r0, [r7, #4]
    pool->nextFree = 1;
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	f04f 0201 	mov.w	r2, #1
     f7a:	609a      	str	r2, [r3, #8]
    return &pool->mem[0];
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	681b      	ldr	r3, [r3, #0]
}
     f80:	4618      	mov	r0, r3
     f82:	f107 070c 	add.w	r7, r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	bc80      	pop	{r7}
     f8a:	4770      	bx	lr

00000f8c <poolNew>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolNew( jsonPool_t* pool ) {
     f8c:	b480      	push	{r7}
     f8e:	b083      	sub	sp, #12
     f90:	af00      	add	r7, sp, #0
     f92:	6078      	str	r0, [r7, #4]
    if ( pool->nextFree >= pool->qty ) return 0;
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	689a      	ldr	r2, [r3, #8]
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	685b      	ldr	r3, [r3, #4]
     f9c:	429a      	cmp	r2, r3
     f9e:	d302      	bcc.n	fa6 <poolNew+0x1a>
     fa0:	f04f 0300 	mov.w	r3, #0
     fa4:	e00a      	b.n	fbc <poolNew+0x30>
    return &pool->mem[pool->nextFree++];
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	6819      	ldr	r1, [r3, #0]
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	689a      	ldr	r2, [r3, #8]
     fae:	ea4f 1302 	mov.w	r3, r2, lsl #4
     fb2:	18cb      	adds	r3, r1, r3
     fb4:	f102 0101 	add.w	r1, r2, #1
     fb8:	687a      	ldr	r2, [r7, #4]
     fba:	6091      	str	r1, [r2, #8]
}
     fbc:	4618      	mov	r0, r3
     fbe:	f107 070c 	add.w	r7, r7, #12
     fc2:	46bd      	mov	sp, r7
     fc4:	bc80      	pop	{r7}
     fc6:	4770      	bx	lr

00000fc8 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
     fc8:	b480      	push	{r7}
     fca:	b083      	sub	sp, #12
     fcc:	af00      	add	r7, sp, #0
     fce:	4603      	mov	r3, r0
     fd0:	6039      	str	r1, [r7, #0]
     fd2:	71fb      	strb	r3, [r7, #7]
    while( *set != '\0' )
     fd4:	e010      	b.n	ff8 <isOneOfThem+0x30>
        if ( ch == *set++ )
     fd6:	683b      	ldr	r3, [r7, #0]
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	79fa      	ldrb	r2, [r7, #7]
     fdc:	429a      	cmp	r2, r3
     fde:	bf14      	ite	ne
     fe0:	2300      	movne	r3, #0
     fe2:	2301      	moveq	r3, #1
     fe4:	b2db      	uxtb	r3, r3
     fe6:	683a      	ldr	r2, [r7, #0]
     fe8:	f102 0201 	add.w	r2, r2, #1
     fec:	603a      	str	r2, [r7, #0]
     fee:	2b00      	cmp	r3, #0
     ff0:	d002      	beq.n	ff8 <isOneOfThem+0x30>
            return true;
     ff2:	f04f 0301 	mov.w	r3, #1
     ff6:	e005      	b.n	1004 <isOneOfThem+0x3c>
/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
    while( *set != '\0' )
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d1ea      	bne.n	fd6 <isOneOfThem+0xe>
        if ( ch == *set++ )
            return true;
    return false;
    1000:	f04f 0300 	mov.w	r3, #0
}
    1004:	4618      	mov	r0, r3
    1006:	f107 070c 	add.w	r7, r7, #12
    100a:	46bd      	mov	sp, r7
    100c:	bc80      	pop	{r7}
    100e:	4770      	bx	lr

00001010 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
    1016:	6078      	str	r0, [r7, #4]
    1018:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
    101a:	e011      	b.n	1040 <goWhile+0x30>
        if ( !isOneOfThem( *str, set ) )
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	4618      	mov	r0, r3
    1022:	6839      	ldr	r1, [r7, #0]
    1024:	f7ff ffd0 	bl	fc8 <isOneOfThem>
    1028:	4603      	mov	r3, r0
    102a:	f083 0301 	eor.w	r3, r3, #1
    102e:	b2db      	uxtb	r3, r3
    1030:	2b00      	cmp	r3, #0
    1032:	d001      	beq.n	1038 <goWhile+0x28>
            return str;
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	e009      	b.n	104c <goWhile+0x3c>
/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
    for(; *str != '\0'; ++str ) {
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	f103 0301 	add.w	r3, r3, #1
    103e:	607b      	str	r3, [r7, #4]
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	2b00      	cmp	r3, #0
    1046:	d1e9      	bne.n	101c <goWhile+0xc>
        if ( !isOneOfThem( *str, set ) )
            return str;
    }
    return 0;
    1048:	f04f 0300 	mov.w	r3, #0
}
    104c:	4618      	mov	r0, r3
    104e:	f107 0708 	add.w	r7, r7, #8
    1052:	46bd      	mov	sp, r7
    1054:	bd80      	pop	{r7, pc}
    1056:	bf00      	nop

00001058 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
    1058:	b580      	push	{r7, lr}
    105a:	b082      	sub	sp, #8
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <goBlank+0x20>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	6878      	ldr	r0, [r7, #4]
    1066:	4619      	mov	r1, r3
    1068:	f7ff ffd2 	bl	1010 <goWhile>
    106c:	4603      	mov	r3, r0
}
    106e:	4618      	mov	r0, r3
    1070:	f107 0708 	add.w	r7, r7, #8
    1074:	46bd      	mov	sp, r7
    1076:	bd80      	pop	{r7, pc}
    1078:	00008f84 	.word	0x00008f84

0000107c <isNum>:

/** Checks if a character is a decimal digit. */
static bool isNum( unsigned char ch ) {
    107c:	b480      	push	{r7}
    107e:	b083      	sub	sp, #12
    1080:	af00      	add	r7, sp, #0
    1082:	4603      	mov	r3, r0
    1084:	71fb      	strb	r3, [r7, #7]
    return ch >= '0' && ch <= '9';
    1086:	79fb      	ldrb	r3, [r7, #7]
    1088:	2b2f      	cmp	r3, #47	; 0x2f
    108a:	d905      	bls.n	1098 <isNum+0x1c>
    108c:	79fb      	ldrb	r3, [r7, #7]
    108e:	2b39      	cmp	r3, #57	; 0x39
    1090:	d802      	bhi.n	1098 <isNum+0x1c>
    1092:	f04f 0301 	mov.w	r3, #1
    1096:	e001      	b.n	109c <isNum+0x20>
    1098:	f04f 0300 	mov.w	r3, #0
    109c:	b2db      	uxtb	r3, r3
}
    109e:	4618      	mov	r0, r3
    10a0:	f107 070c 	add.w	r7, r7, #12
    10a4:	46bd      	mov	sp, r7
    10a6:	bc80      	pop	{r7}
    10a8:	4770      	bx	lr
    10aa:	bf00      	nop

000010ac <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
    10ac:	b580      	push	{r7, lr}
    10ae:	b082      	sub	sp, #8
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
    10b4:	e010      	b.n	10d8 <goNum+0x2c>
        if ( !isNum( *str ) )
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	781b      	ldrb	r3, [r3, #0]
    10ba:	4618      	mov	r0, r3
    10bc:	f7ff ffde 	bl	107c <isNum>
    10c0:	4603      	mov	r3, r0
    10c2:	f083 0301 	eor.w	r3, r3, #1
    10c6:	b2db      	uxtb	r3, r3
    10c8:	2b00      	cmp	r3, #0
    10ca:	d001      	beq.n	10d0 <goNum+0x24>
            return str;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	e009      	b.n	10e4 <goNum+0x38>

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
    for( ; *str != '\0'; ++str ) {
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	f103 0301 	add.w	r3, r3, #1
    10d6:	607b      	str	r3, [r7, #4]
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	2b00      	cmp	r3, #0
    10de:	d1ea      	bne.n	10b6 <goNum+0xa>
        if ( !isNum( *str ) )
            return str;
    }
    return 0;
    10e0:	f04f 0300 	mov.w	r3, #0
}
    10e4:	4618      	mov	r0, r3
    10e6:	f107 0708 	add.w	r7, r7, #8
    10ea:	46bd      	mov	sp, r7
    10ec:	bd80      	pop	{r7, pc}
    10ee:	bf00      	nop

000010f0 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
    10f0:	b580      	push	{r7, lr}
    10f2:	b082      	sub	sp, #8
    10f4:	af00      	add	r7, sp, #0
    10f6:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	781a      	ldrb	r2, [r3, #0]
    10fc:	4b0c      	ldr	r3, [pc, #48]	; (1130 <setToNull+0x40>)
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	4610      	mov	r0, r2
    1102:	4619      	mov	r1, r3
    1104:	f7ff ff60 	bl	fc8 <isOneOfThem>
    1108:	4603      	mov	r3, r0
    110a:	f083 0301 	eor.w	r3, r3, #1
    110e:	b2db      	uxtb	r3, r3
    1110:	2b00      	cmp	r3, #0
    1112:	d007      	beq.n	1124 <setToNull+0x34>
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	f04f 0200 	mov.w	r2, #0
    111a:	701a      	strb	r2, [r3, #0]
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	f103 0301 	add.w	r3, r3, #1
    1122:	607b      	str	r3, [r7, #4]
    return ch;
    1124:	687b      	ldr	r3, [r7, #4]
}
    1126:	4618      	mov	r0, r3
    1128:	f107 0708 	add.w	r7, r7, #8
    112c:	46bd      	mov	sp, r7
    112e:	bd80      	pop	{r7, pc}
    1130:	00008f8c 	.word	0x00008f8c

00001134 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
    1134:	b580      	push	{r7, lr}
    1136:	b082      	sub	sp, #8
    1138:	af00      	add	r7, sp, #0
    113a:	4603      	mov	r3, r0
    113c:	71fb      	strb	r3, [r7, #7]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
    113e:	79fb      	ldrb	r3, [r7, #7]
    1140:	2b2c      	cmp	r3, #44	; 0x2c
    1142:	d013      	beq.n	116c <isEndOfPrimitive+0x38>
    1144:	4b0f      	ldr	r3, [pc, #60]	; (1184 <isEndOfPrimitive+0x50>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	79fa      	ldrb	r2, [r7, #7]
    114a:	4610      	mov	r0, r2
    114c:	4619      	mov	r1, r3
    114e:	f7ff ff3b 	bl	fc8 <isOneOfThem>
    1152:	4603      	mov	r3, r0
    1154:	2b00      	cmp	r3, #0
    1156:	d109      	bne.n	116c <isEndOfPrimitive+0x38>
    1158:	4b0b      	ldr	r3, [pc, #44]	; (1188 <isEndOfPrimitive+0x54>)
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	79fa      	ldrb	r2, [r7, #7]
    115e:	4610      	mov	r0, r2
    1160:	4619      	mov	r1, r3
    1162:	f7ff ff31 	bl	fc8 <isOneOfThem>
    1166:	4603      	mov	r3, r0
    1168:	2b00      	cmp	r3, #0
    116a:	d002      	beq.n	1172 <isEndOfPrimitive+0x3e>
    116c:	f04f 0301 	mov.w	r3, #1
    1170:	e001      	b.n	1176 <isEndOfPrimitive+0x42>
    1172:	f04f 0300 	mov.w	r3, #0
    1176:	b2db      	uxtb	r3, r3
}
    1178:	4618      	mov	r0, r3
    117a:	f107 0708 	add.w	r7, r7, #8
    117e:	46bd      	mov	sp, r7
    1180:	bd80      	pop	{r7, pc}
    1182:	bf00      	nop
    1184:	00008f84 	.word	0x00008f84
    1188:	00008f8c 	.word	0x00008f8c

0000118c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
    118c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
    1190:	f3ef 8409 	mrs	r4, PSP
    1194:	4620      	mov	r0, r4
    1196:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
    1198:	4623      	mov	r3, r4
}
    119a:	4618      	mov	r0, r3

0000119c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
    119c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
    119e:	f383 8809 	msr	PSP, r3
    11a2:	4770      	bx	lr

000011a4 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
    11a4:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
    11a8:	f3ef 8408 	mrs	r4, MSP
    11ac:	4620      	mov	r0, r4
    11ae:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
    11b0:	4623      	mov	r3, r4
}
    11b2:	4618      	mov	r0, r3

000011b4 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
    11b4:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
    11b6:	f383 8808 	msr	MSP, r3
    11ba:	4770      	bx	lr

000011bc <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
    11bc:	b490      	push	{r4, r7}
    11be:	b082      	sub	sp, #8
    11c0:	af00      	add	r7, sp, #0
  uint32_t result=0;
    11c2:	f04f 0300 	mov.w	r3, #0
    11c6:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
    11c8:	f3ef 8412 	mrs	r4, BASEPRI_MAX
    11cc:	607c      	str	r4, [r7, #4]
  return(result);
    11ce:	687b      	ldr	r3, [r7, #4]
}
    11d0:	4618      	mov	r0, r3
    11d2:	f107 0708 	add.w	r7, r7, #8
    11d6:	46bd      	mov	sp, r7
    11d8:	bc90      	pop	{r4, r7}
    11da:	4770      	bx	lr

000011dc <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
    11dc:	b480      	push	{r7}
    11de:	b083      	sub	sp, #12
    11e0:	af00      	add	r7, sp, #0
    11e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	f383 8811 	msr	BASEPRI, r3
}
    11ea:	f107 070c 	add.w	r7, r7, #12
    11ee:	46bd      	mov	sp, r7
    11f0:	bc80      	pop	{r7}
    11f2:	4770      	bx	lr

000011f4 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
    11f4:	b490      	push	{r4, r7}
    11f6:	b082      	sub	sp, #8
    11f8:	af00      	add	r7, sp, #0
  uint32_t result=0;
    11fa:	f04f 0300 	mov.w	r3, #0
    11fe:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1200:	f3ef 8410 	mrs	r4, PRIMASK
    1204:	607c      	str	r4, [r7, #4]
  return(result);
    1206:	687b      	ldr	r3, [r7, #4]
}
    1208:	4618      	mov	r0, r3
    120a:	f107 0708 	add.w	r7, r7, #8
    120e:	46bd      	mov	sp, r7
    1210:	bc90      	pop	{r4, r7}
    1212:	4770      	bx	lr

00001214 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
    1214:	b480      	push	{r7}
    1216:	b083      	sub	sp, #12
    1218:	af00      	add	r7, sp, #0
    121a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	f383 8810 	msr	PRIMASK, r3
}
    1222:	f107 070c 	add.w	r7, r7, #12
    1226:	46bd      	mov	sp, r7
    1228:	bc80      	pop	{r7}
    122a:	4770      	bx	lr

0000122c <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
    122c:	b490      	push	{r4, r7}
    122e:	b082      	sub	sp, #8
    1230:	af00      	add	r7, sp, #0
  uint32_t result=0;
    1232:	f04f 0300 	mov.w	r3, #0
    1236:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
    1238:	f3ef 8413 	mrs	r4, FAULTMASK
    123c:	607c      	str	r4, [r7, #4]
  return(result);
    123e:	687b      	ldr	r3, [r7, #4]
}
    1240:	4618      	mov	r0, r3
    1242:	f107 0708 	add.w	r7, r7, #8
    1246:	46bd      	mov	sp, r7
    1248:	bc90      	pop	{r4, r7}
    124a:	4770      	bx	lr

0000124c <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
    124c:	b480      	push	{r7}
    124e:	b083      	sub	sp, #12
    1250:	af00      	add	r7, sp, #0
    1252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	f383 8813 	msr	FAULTMASK, r3
}
    125a:	f107 070c 	add.w	r7, r7, #12
    125e:	46bd      	mov	sp, r7
    1260:	bc80      	pop	{r7}
    1262:	4770      	bx	lr

00001264 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
    1264:	b490      	push	{r4, r7}
    1266:	b082      	sub	sp, #8
    1268:	af00      	add	r7, sp, #0
  uint32_t result=0;
    126a:	f04f 0300 	mov.w	r3, #0
    126e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1270:	f3ef 8414 	mrs	r4, CONTROL
    1274:	607c      	str	r4, [r7, #4]
  return(result);
    1276:	687b      	ldr	r3, [r7, #4]
}
    1278:	4618      	mov	r0, r3
    127a:	f107 0708 	add.w	r7, r7, #8
    127e:	46bd      	mov	sp, r7
    1280:	bc90      	pop	{r4, r7}
    1282:	4770      	bx	lr

00001284 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
    1284:	b480      	push	{r7}
    1286:	b083      	sub	sp, #12
    1288:	af00      	add	r7, sp, #0
    128a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	f383 8814 	msr	CONTROL, r3
}
    1292:	f107 070c 	add.w	r7, r7, #12
    1296:	46bd      	mov	sp, r7
    1298:	bc80      	pop	{r7}
    129a:	4770      	bx	lr

0000129c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
    129c:	b490      	push	{r4, r7}
    129e:	b084      	sub	sp, #16
    12a0:	af00      	add	r7, sp, #0
    12a2:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
    12a4:	f04f 0300 	mov.w	r3, #0
    12a8:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	ba1c      	rev	r4, r3
    12ae:	60fc      	str	r4, [r7, #12]
  return(result);
    12b0:	68fb      	ldr	r3, [r7, #12]
}
    12b2:	4618      	mov	r0, r3
    12b4:	f107 0710 	add.w	r7, r7, #16
    12b8:	46bd      	mov	sp, r7
    12ba:	bc90      	pop	{r4, r7}
    12bc:	4770      	bx	lr
    12be:	bf00      	nop

000012c0 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
    12c0:	b490      	push	{r4, r7}
    12c2:	b084      	sub	sp, #16
    12c4:	af00      	add	r7, sp, #0
    12c6:	4603      	mov	r3, r0
    12c8:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
    12ca:	f04f 0300 	mov.w	r3, #0
    12ce:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
    12d0:	88fb      	ldrh	r3, [r7, #6]
    12d2:	ba5c      	rev16	r4, r3
    12d4:	60fc      	str	r4, [r7, #12]
  return(result);
    12d6:	68fb      	ldr	r3, [r7, #12]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0710 	add.w	r7, r7, #16
    12de:	46bd      	mov	sp, r7
    12e0:	bc90      	pop	{r4, r7}
    12e2:	4770      	bx	lr

000012e4 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
    12e4:	b490      	push	{r4, r7}
    12e6:	b084      	sub	sp, #16
    12e8:	af00      	add	r7, sp, #0
    12ea:	4603      	mov	r3, r0
    12ec:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
    12ee:	f04f 0300 	mov.w	r3, #0
    12f2:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
    12f4:	88fb      	ldrh	r3, [r7, #6]
    12f6:	badc      	revsh	r4, r3
    12f8:	60fc      	str	r4, [r7, #12]
  return(result);
    12fa:	68fb      	ldr	r3, [r7, #12]
}
    12fc:	4618      	mov	r0, r3
    12fe:	f107 0710 	add.w	r7, r7, #16
    1302:	46bd      	mov	sp, r7
    1304:	bc90      	pop	{r4, r7}
    1306:	4770      	bx	lr

00001308 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
    1308:	b490      	push	{r4, r7}
    130a:	b084      	sub	sp, #16
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
    1310:	f04f 0300 	mov.w	r3, #0
    1314:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	fa93 f4a3 	rbit	r4, r3
    131c:	60fc      	str	r4, [r7, #12]
   return(result);
    131e:	68fb      	ldr	r3, [r7, #12]
}
    1320:	4618      	mov	r0, r3
    1322:	f107 0710 	add.w	r7, r7, #16
    1326:	46bd      	mov	sp, r7
    1328:	bc90      	pop	{r4, r7}
    132a:	4770      	bx	lr

0000132c <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
    132c:	b490      	push	{r4, r7}
    132e:	b084      	sub	sp, #16
    1330:	af00      	add	r7, sp, #0
    1332:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
    1334:	f04f 0300 	mov.w	r3, #0
    1338:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
    133a:	687b      	ldr	r3, [r7, #4]
    133c:	e8d3 4f4f 	ldrexb	r4, [r3]
    1340:	73fc      	strb	r4, [r7, #15]
   return(result);
    1342:	7bfb      	ldrb	r3, [r7, #15]
}
    1344:	4618      	mov	r0, r3
    1346:	f107 0710 	add.w	r7, r7, #16
    134a:	46bd      	mov	sp, r7
    134c:	bc90      	pop	{r4, r7}
    134e:	4770      	bx	lr

00001350 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
    1350:	b490      	push	{r4, r7}
    1352:	b084      	sub	sp, #16
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
    1358:	f04f 0300 	mov.w	r3, #0
    135c:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	e8d3 4f5f 	ldrexh	r4, [r3]
    1364:	81fc      	strh	r4, [r7, #14]
   return(result);
    1366:	89fb      	ldrh	r3, [r7, #14]
}
    1368:	4618      	mov	r0, r3
    136a:	f107 0710 	add.w	r7, r7, #16
    136e:	46bd      	mov	sp, r7
    1370:	bc90      	pop	{r4, r7}
    1372:	4770      	bx	lr

00001374 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
    1374:	b490      	push	{r4, r7}
    1376:	b084      	sub	sp, #16
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
    137c:	f04f 0300 	mov.w	r3, #0
    1380:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	e853 4f00 	ldrex	r4, [r3]
    1388:	60fc      	str	r4, [r7, #12]
   return(result);
    138a:	68fb      	ldr	r3, [r7, #12]
}
    138c:	4618      	mov	r0, r3
    138e:	f107 0710 	add.w	r7, r7, #16
    1392:	46bd      	mov	sp, r7
    1394:	bc90      	pop	{r4, r7}
    1396:	4770      	bx	lr

00001398 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
    1398:	b490      	push	{r4, r7}
    139a:	b084      	sub	sp, #16
    139c:	af00      	add	r7, sp, #0
    139e:	4603      	mov	r3, r0
    13a0:	6039      	str	r1, [r7, #0]
    13a2:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
    13a4:	f04f 0300 	mov.w	r3, #0
    13a8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13aa:	683b      	ldr	r3, [r7, #0]
    13ac:	79fa      	ldrb	r2, [r7, #7]
    13ae:	e8c3 2f44 	strexb	r4, r2, [r3]
    13b2:	60fc      	str	r4, [r7, #12]
   return(result);
    13b4:	68fb      	ldr	r3, [r7, #12]
}
    13b6:	4618      	mov	r0, r3
    13b8:	f107 0710 	add.w	r7, r7, #16
    13bc:	46bd      	mov	sp, r7
    13be:	bc90      	pop	{r4, r7}
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop

000013c4 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
    13c4:	b490      	push	{r4, r7}
    13c6:	b084      	sub	sp, #16
    13c8:	af00      	add	r7, sp, #0
    13ca:	4603      	mov	r3, r0
    13cc:	6039      	str	r1, [r7, #0]
    13ce:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
    13d0:	f04f 0300 	mov.w	r3, #0
    13d4:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    13d6:	683b      	ldr	r3, [r7, #0]
    13d8:	88fa      	ldrh	r2, [r7, #6]
    13da:	e8c3 2f54 	strexh	r4, r2, [r3]
    13de:	60fc      	str	r4, [r7, #12]
   return(result);
    13e0:	68fb      	ldr	r3, [r7, #12]
}
    13e2:	4618      	mov	r0, r3
    13e4:	f107 0710 	add.w	r7, r7, #16
    13e8:	46bd      	mov	sp, r7
    13ea:	bc90      	pop	{r4, r7}
    13ec:	4770      	bx	lr
    13ee:	bf00      	nop

000013f0 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
    13f0:	b490      	push	{r4, r7}
    13f2:	b084      	sub	sp, #16
    13f4:	af00      	add	r7, sp, #0
    13f6:	6078      	str	r0, [r7, #4]
    13f8:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
    13fa:	f04f 0300 	mov.w	r3, #0
    13fe:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
    1400:	683b      	ldr	r3, [r7, #0]
    1402:	687a      	ldr	r2, [r7, #4]
    1404:	e843 2400 	strex	r4, r2, [r3]
    1408:	60fc      	str	r4, [r7, #12]
   return(result);
    140a:	68fb      	ldr	r3, [r7, #12]
}
    140c:	4618      	mov	r0, r3
    140e:	f107 0710 	add.w	r7, r7, #16
    1412:	46bd      	mov	sp, r7
    1414:	bc90      	pop	{r4, r7}
    1416:	4770      	bx	lr

00001418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
    1418:	b580      	push	{r7, lr}
    141a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    141c:	4b15      	ldr	r3, [pc, #84]	; (1474 <SystemInit+0x5c>)
    141e:	4a15      	ldr	r2, [pc, #84]	; (1474 <SystemInit+0x5c>)
    1420:	6812      	ldr	r2, [r2, #0]
    1422:	f042 0201 	orr.w	r2, r2, #1
    1426:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    1428:	4a12      	ldr	r2, [pc, #72]	; (1474 <SystemInit+0x5c>)
    142a:	4b12      	ldr	r3, [pc, #72]	; (1474 <SystemInit+0x5c>)
    142c:	6859      	ldr	r1, [r3, #4]
    142e:	4b12      	ldr	r3, [pc, #72]	; (1478 <SystemInit+0x60>)
    1430:	ea01 0303 	and.w	r3, r1, r3
    1434:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1436:	4a0f      	ldr	r2, [pc, #60]	; (1474 <SystemInit+0x5c>)
    1438:	4b0e      	ldr	r3, [pc, #56]	; (1474 <SystemInit+0x5c>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1444:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1446:	4b0b      	ldr	r3, [pc, #44]	; (1474 <SystemInit+0x5c>)
    1448:	4a0a      	ldr	r2, [pc, #40]	; (1474 <SystemInit+0x5c>)
    144a:	6812      	ldr	r2, [r2, #0]
    144c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    1450:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1452:	4b08      	ldr	r3, [pc, #32]	; (1474 <SystemInit+0x5c>)
    1454:	4a07      	ldr	r2, [pc, #28]	; (1474 <SystemInit+0x5c>)
    1456:	6852      	ldr	r2, [r2, #4]
    1458:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
    145c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    145e:	4b05      	ldr	r3, [pc, #20]	; (1474 <SystemInit+0x5c>)
    1460:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    1464:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
    1466:	f000 f87d 	bl	1564 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
    146a:	4b04      	ldr	r3, [pc, #16]	; (147c <SystemInit+0x64>)
    146c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1470:	609a      	str	r2, [r3, #8]
#endif 
}
    1472:	bd80      	pop	{r7, pc}
    1474:	40021000 	.word	0x40021000
    1478:	f8ff0000 	.word	0xf8ff0000
    147c:	e000ed00 	.word	0xe000ed00

00001480 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
    1480:	b480      	push	{r7}
    1482:	b085      	sub	sp, #20
    1484:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
    1486:	f04f 0300 	mov.w	r3, #0
    148a:	60fb      	str	r3, [r7, #12]
    148c:	f04f 0300 	mov.w	r3, #0
    1490:	60bb      	str	r3, [r7, #8]
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
    1498:	4b2d      	ldr	r3, [pc, #180]	; (1550 <SystemCoreClockUpdate+0xd0>)
    149a:	685b      	ldr	r3, [r3, #4]
    149c:	f003 030c 	and.w	r3, r3, #12
    14a0:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
    14a2:	68fb      	ldr	r3, [r7, #12]
    14a4:	2b04      	cmp	r3, #4
    14a6:	d007      	beq.n	14b8 <SystemCoreClockUpdate+0x38>
    14a8:	2b08      	cmp	r3, #8
    14aa:	d009      	beq.n	14c0 <SystemCoreClockUpdate+0x40>
    14ac:	2b00      	cmp	r3, #0
    14ae:	d135      	bne.n	151c <SystemCoreClockUpdate+0x9c>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
    14b0:	4b28      	ldr	r3, [pc, #160]	; (1554 <SystemCoreClockUpdate+0xd4>)
    14b2:	4a29      	ldr	r2, [pc, #164]	; (1558 <SystemCoreClockUpdate+0xd8>)
    14b4:	601a      	str	r2, [r3, #0]
      break;
    14b6:	e035      	b.n	1524 <SystemCoreClockUpdate+0xa4>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
    14b8:	4b26      	ldr	r3, [pc, #152]	; (1554 <SystemCoreClockUpdate+0xd4>)
    14ba:	4a27      	ldr	r2, [pc, #156]	; (1558 <SystemCoreClockUpdate+0xd8>)
    14bc:	601a      	str	r2, [r3, #0]
      break;
    14be:	e031      	b.n	1524 <SystemCoreClockUpdate+0xa4>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
    14c0:	4b23      	ldr	r3, [pc, #140]	; (1550 <SystemCoreClockUpdate+0xd0>)
    14c2:	685b      	ldr	r3, [r3, #4]
    14c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    14c8:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    14ca:	4b21      	ldr	r3, [pc, #132]	; (1550 <SystemCoreClockUpdate+0xd0>)
    14cc:	685b      	ldr	r3, [r3, #4]
    14ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    14d2:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    14d4:	68bb      	ldr	r3, [r7, #8]
    14d6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    14da:	f103 0302 	add.w	r3, r3, #2
    14de:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d106      	bne.n	14f4 <SystemCoreClockUpdate+0x74>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    14e6:	68bb      	ldr	r3, [r7, #8]
    14e8:	4a1c      	ldr	r2, [pc, #112]	; (155c <SystemCoreClockUpdate+0xdc>)
    14ea:	fb02 f203 	mul.w	r2, r2, r3
    14ee:	4b19      	ldr	r3, [pc, #100]	; (1554 <SystemCoreClockUpdate+0xd4>)
    14f0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    14f2:	e017      	b.n	1524 <SystemCoreClockUpdate+0xa4>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
    14f4:	4b16      	ldr	r3, [pc, #88]	; (1550 <SystemCoreClockUpdate+0xd0>)
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    14fc:	2b00      	cmp	r3, #0
    14fe:	d006      	beq.n	150e <SystemCoreClockUpdate+0x8e>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
    1500:	68bb      	ldr	r3, [r7, #8]
    1502:	4a16      	ldr	r2, [pc, #88]	; (155c <SystemCoreClockUpdate+0xdc>)
    1504:	fb02 f203 	mul.w	r2, r2, r3
    1508:	4b12      	ldr	r3, [pc, #72]	; (1554 <SystemCoreClockUpdate+0xd4>)
    150a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    150c:	e00a      	b.n	1524 <SystemCoreClockUpdate+0xa4>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
    150e:	68bb      	ldr	r3, [r7, #8]
    1510:	4a11      	ldr	r2, [pc, #68]	; (1558 <SystemCoreClockUpdate+0xd8>)
    1512:	fb02 f203 	mul.w	r2, r2, r3
    1516:	4b0f      	ldr	r3, [pc, #60]	; (1554 <SystemCoreClockUpdate+0xd4>)
    1518:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    151a:	e003      	b.n	1524 <SystemCoreClockUpdate+0xa4>

    default:
      SystemCoreClock = HSI_VALUE;
    151c:	4b0d      	ldr	r3, [pc, #52]	; (1554 <SystemCoreClockUpdate+0xd4>)
    151e:	4a0e      	ldr	r2, [pc, #56]	; (1558 <SystemCoreClockUpdate+0xd8>)
    1520:	601a      	str	r2, [r3, #0]
      break;
    1522:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    1524:	4b0a      	ldr	r3, [pc, #40]	; (1550 <SystemCoreClockUpdate+0xd0>)
    1526:	685b      	ldr	r3, [r3, #4]
    1528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    152c:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1530:	4a0b      	ldr	r2, [pc, #44]	; (1560 <SystemCoreClockUpdate+0xe0>)
    1532:	5cd3      	ldrb	r3, [r2, r3]
    1534:	b2db      	uxtb	r3, r3
    1536:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <SystemCoreClockUpdate+0xd4>)
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	fa22 f203 	lsr.w	r2, r2, r3
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <SystemCoreClockUpdate+0xd4>)
    1544:	601a      	str	r2, [r3, #0]
}
    1546:	f107 0714 	add.w	r7, r7, #20
    154a:	46bd      	mov	sp, r7
    154c:	bc80      	pop	{r7}
    154e:	4770      	bx	lr
    1550:	40021000 	.word	0x40021000
    1554:	20000000 	.word	0x20000000
    1558:	007a1200 	.word	0x007a1200
    155c:	003d0900 	.word	0x003d0900
    1560:	20000004 	.word	0x20000004

00001564 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
    1564:	b580      	push	{r7, lr}
    1566:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
    1568:	f000 f802 	bl	1570 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
    156c:	bd80      	pop	{r7, pc}
    156e:	bf00      	nop

00001570 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
    1570:	b480      	push	{r7}
    1572:	b083      	sub	sp, #12
    1574:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    1576:	f04f 0300 	mov.w	r3, #0
    157a:	607b      	str	r3, [r7, #4]
    157c:	f04f 0300 	mov.w	r3, #0
    1580:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    1582:	4b3b      	ldr	r3, [pc, #236]	; (1670 <SetSysClockTo72+0x100>)
    1584:	4a3a      	ldr	r2, [pc, #232]	; (1670 <SetSysClockTo72+0x100>)
    1586:	6812      	ldr	r2, [r2, #0]
    1588:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    158c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    158e:	4b38      	ldr	r3, [pc, #224]	; (1670 <SetSysClockTo72+0x100>)
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1596:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	f103 0301 	add.w	r3, r3, #1
    159e:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    15a0:	683b      	ldr	r3, [r7, #0]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d103      	bne.n	15ae <SetSysClockTo72+0x3e>
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    15ac:	d1ef      	bne.n	158e <SetSysClockTo72+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    15ae:	4b30      	ldr	r3, [pc, #192]	; (1670 <SetSysClockTo72+0x100>)
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    15b6:	2b00      	cmp	r3, #0
    15b8:	d003      	beq.n	15c2 <SetSysClockTo72+0x52>
  {
    HSEStatus = (uint32_t)0x01;
    15ba:	f04f 0301 	mov.w	r3, #1
    15be:	603b      	str	r3, [r7, #0]
    15c0:	e002      	b.n	15c8 <SetSysClockTo72+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
    15c2:	f04f 0300 	mov.w	r3, #0
    15c6:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
    15c8:	683b      	ldr	r3, [r7, #0]
    15ca:	2b01      	cmp	r3, #1
    15cc:	d14b      	bne.n	1666 <SetSysClockTo72+0xf6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
    15ce:	4b29      	ldr	r3, [pc, #164]	; (1674 <SetSysClockTo72+0x104>)
    15d0:	4a28      	ldr	r2, [pc, #160]	; (1674 <SetSysClockTo72+0x104>)
    15d2:	6812      	ldr	r2, [r2, #0]
    15d4:	f042 0210 	orr.w	r2, r2, #16
    15d8:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    15da:	4b26      	ldr	r3, [pc, #152]	; (1674 <SetSysClockTo72+0x104>)
    15dc:	4a25      	ldr	r2, [pc, #148]	; (1674 <SetSysClockTo72+0x104>)
    15de:	6812      	ldr	r2, [r2, #0]
    15e0:	f022 0203 	bic.w	r2, r2, #3
    15e4:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
    15e6:	4b23      	ldr	r3, [pc, #140]	; (1674 <SetSysClockTo72+0x104>)
    15e8:	4a22      	ldr	r2, [pc, #136]	; (1674 <SetSysClockTo72+0x104>)
    15ea:	6812      	ldr	r2, [r2, #0]
    15ec:	f042 0202 	orr.w	r2, r2, #2
    15f0:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    15f2:	4b1f      	ldr	r3, [pc, #124]	; (1670 <SetSysClockTo72+0x100>)
    15f4:	4a1e      	ldr	r2, [pc, #120]	; (1670 <SetSysClockTo72+0x100>)
    15f6:	6852      	ldr	r2, [r2, #4]
    15f8:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    15fa:	4b1d      	ldr	r3, [pc, #116]	; (1670 <SetSysClockTo72+0x100>)
    15fc:	4a1c      	ldr	r2, [pc, #112]	; (1670 <SetSysClockTo72+0x100>)
    15fe:	6852      	ldr	r2, [r2, #4]
    1600:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
    1602:	4b1b      	ldr	r3, [pc, #108]	; (1670 <SetSysClockTo72+0x100>)
    1604:	4a1a      	ldr	r2, [pc, #104]	; (1670 <SetSysClockTo72+0x100>)
    1606:	6852      	ldr	r2, [r2, #4]
    1608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    160c:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
    160e:	4b18      	ldr	r3, [pc, #96]	; (1670 <SetSysClockTo72+0x100>)
    1610:	4a17      	ldr	r2, [pc, #92]	; (1670 <SetSysClockTo72+0x100>)
    1612:	6852      	ldr	r2, [r2, #4]
    1614:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
    1618:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
    161a:	4b15      	ldr	r3, [pc, #84]	; (1670 <SetSysClockTo72+0x100>)
    161c:	4a14      	ldr	r2, [pc, #80]	; (1670 <SetSysClockTo72+0x100>)
    161e:	6852      	ldr	r2, [r2, #4]
    1620:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
    1624:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
    1626:	4b12      	ldr	r3, [pc, #72]	; (1670 <SetSysClockTo72+0x100>)
    1628:	4a11      	ldr	r2, [pc, #68]	; (1670 <SetSysClockTo72+0x100>)
    162a:	6812      	ldr	r2, [r2, #0]
    162c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1630:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    1632:	bf00      	nop
    1634:	4b0e      	ldr	r3, [pc, #56]	; (1670 <SetSysClockTo72+0x100>)
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    163c:	2b00      	cmp	r3, #0
    163e:	d0f9      	beq.n	1634 <SetSysClockTo72+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    1640:	4b0b      	ldr	r3, [pc, #44]	; (1670 <SetSysClockTo72+0x100>)
    1642:	4a0b      	ldr	r2, [pc, #44]	; (1670 <SetSysClockTo72+0x100>)
    1644:	6852      	ldr	r2, [r2, #4]
    1646:	f022 0203 	bic.w	r2, r2, #3
    164a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    164c:	4b08      	ldr	r3, [pc, #32]	; (1670 <SetSysClockTo72+0x100>)
    164e:	4a08      	ldr	r2, [pc, #32]	; (1670 <SetSysClockTo72+0x100>)
    1650:	6852      	ldr	r2, [r2, #4]
    1652:	f042 0202 	orr.w	r2, r2, #2
    1656:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    1658:	bf00      	nop
    165a:	4b05      	ldr	r3, [pc, #20]	; (1670 <SetSysClockTo72+0x100>)
    165c:	685b      	ldr	r3, [r3, #4]
    165e:	f003 030c 	and.w	r3, r3, #12
    1662:	2b08      	cmp	r3, #8
    1664:	d1f9      	bne.n	165a <SetSysClockTo72+0xea>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
    1666:	f107 070c 	add.w	r7, r7, #12
    166a:	46bd      	mov	sp, r7
    166c:	bc80      	pop	{r7}
    166e:	4770      	bx	lr
    1670:	40021000 	.word	0x40021000
    1674:	40022000 	.word	0x40022000
    1678:	00008fd8 	.word	0x00008fd8
    167c:	20000000 	.word	0x20000000
    1680:	20000030 	.word	0x20000030
    1684:	20000030 	.word	0x20000030
    1688:	200045c8 	.word	0x200045c8

0000168c <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
    168c:	b580      	push	{r7, lr}
    168e:	b082      	sub	sp, #8
    1690:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1692:	f04f 0010 	mov.w	r0, #16
    1696:	f04f 0101 	mov.w	r1, #1
    169a:	f000 fc97 	bl	1fcc <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    169e:	480d      	ldr	r0, [pc, #52]	; (16d4 <init_led+0x48>)
    16a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    16a4:	f04f 0201 	mov.w	r2, #1
    16a8:	f000 ffce 	bl	2648 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    16ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    16b0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    16b2:	f04f 0310 	mov.w	r3, #16
    16b6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    16b8:	f04f 0303 	mov.w	r3, #3
    16bc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    16be:	f107 0304 	add.w	r3, r7, #4
    16c2:	4804      	ldr	r0, [pc, #16]	; (16d4 <init_led+0x48>)
    16c4:	4619      	mov	r1, r3
    16c6:	f000 fe55 	bl	2374 <GPIO_Init>
}
    16ca:	f107 0708 	add.w	r7, r7, #8
    16ce:	46bd      	mov	sp, r7
    16d0:	bd80      	pop	{r7, pc}
    16d2:	bf00      	nop
    16d4:	40011000 	.word	0x40011000

000016d8 <init_button>:

void init_button(void)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b082      	sub	sp, #8
    16dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    16de:	f04f 0004 	mov.w	r0, #4
    16e2:	f04f 0101 	mov.w	r1, #1
    16e6:	f000 fc71 	bl	1fcc <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    16ea:	f04f 0301 	mov.w	r3, #1
    16ee:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    16f0:	f04f 0304 	mov.w	r3, #4
    16f4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    16f6:	f04f 0303 	mov.w	r3, #3
    16fa:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    16fc:	f107 0304 	add.w	r3, r7, #4
    1700:	4803      	ldr	r0, [pc, #12]	; (1710 <init_button+0x38>)
    1702:	4619      	mov	r1, r3
    1704:	f000 fe36 	bl	2374 <GPIO_Init>
}
    1708:	f107 0708 	add.w	r7, r7, #8
    170c:	46bd      	mov	sp, r7
    170e:	bd80      	pop	{r7, pc}
    1710:	40011000 	.word	0x40011000

00001714 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    1714:	b580      	push	{r7, lr}
    1716:	b084      	sub	sp, #16
    1718:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    171a:	f04f 0001 	mov.w	r0, #1
    171e:	f04f 0101 	mov.w	r1, #1
    1722:	f000 fc53 	bl	1fcc <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    1726:	f04f 0000 	mov.w	r0, #0
    172a:	f04f 0100 	mov.w	r1, #0
    172e:	f001 f88f 	bl	2850 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    1732:	f04f 0301 	mov.w	r3, #1
    1736:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    1738:	f04f 0300 	mov.w	r3, #0
    173c:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    173e:	f04f 0308 	mov.w	r3, #8
    1742:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    1744:	f04f 0301 	mov.w	r3, #1
    1748:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    174a:	f107 0308 	add.w	r3, r7, #8
    174e:	4618      	mov	r0, r3
    1750:	f001 fde0 	bl	3314 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    1754:	f04f 0306 	mov.w	r3, #6
    1758:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    175a:	f04f 030f 	mov.w	r3, #15
    175e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    1760:	f04f 030f 	mov.w	r3, #15
    1764:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    1766:	f04f 0301 	mov.w	r3, #1
    176a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    176c:	f107 0304 	add.w	r3, r7, #4
    1770:	4618      	mov	r0, r3
    1772:	f004 ffb1 	bl	66d8 <NVIC_Init>
}
    1776:	f107 0710 	add.w	r7, r7, #16
    177a:	46bd      	mov	sp, r7
    177c:	bd80      	pop	{r7, pc}
    177e:	bf00      	nop

00001780 <init_rs232>:

void init_rs232(void)
{
    1780:	b580      	push	{r7, lr}
    1782:	b086      	sub	sp, #24
    1784:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    1786:	f04f 0005 	mov.w	r0, #5
    178a:	f04f 0101 	mov.w	r1, #1
    178e:	f000 fc1d 	bl	1fcc <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    1792:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1796:	f04f 0101 	mov.w	r1, #1
    179a:	f000 fc39 	bl	2010 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    179e:	f04f 0308 	mov.w	r3, #8
    17a2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    17a4:	f04f 0304 	mov.w	r3, #4
    17a8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    17aa:	f107 0304 	add.w	r3, r7, #4
    17ae:	481a      	ldr	r0, [pc, #104]	; (1818 <init_rs232+0x98>)
    17b0:	4619      	mov	r1, r3
    17b2:	f000 fddf 	bl	2374 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    17b6:	f04f 0304 	mov.w	r3, #4
    17ba:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    17bc:	f04f 0303 	mov.w	r3, #3
    17c0:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    17c2:	f04f 0318 	mov.w	r3, #24
    17c6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    17c8:	f107 0304 	add.w	r3, r7, #4
    17cc:	4812      	ldr	r0, [pc, #72]	; (1818 <init_rs232+0x98>)
    17ce:	4619      	mov	r1, r3
    17d0:	f000 fdd0 	bl	2374 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    17d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    17d8:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    17da:	f04f 0300 	mov.w	r3, #0
    17de:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    17e0:	f04f 0300 	mov.w	r3, #0
    17e4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    17e6:	f04f 0300 	mov.w	r3, #0
    17ea:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    17ec:	f04f 0300 	mov.w	r3, #0
    17f0:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    17f2:	f04f 030c 	mov.w	r3, #12
    17f6:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    17f8:	f107 0308 	add.w	r3, r7, #8
    17fc:	4807      	ldr	r0, [pc, #28]	; (181c <init_rs232+0x9c>)
    17fe:	4619      	mov	r1, r3
    1800:	f001 f8e8 	bl	29d4 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    1804:	4805      	ldr	r0, [pc, #20]	; (181c <init_rs232+0x9c>)
    1806:	f04f 0101 	mov.w	r1, #1
    180a:	f001 fa27 	bl	2c5c <USART_Cmd>
}
    180e:	f107 0718 	add.w	r7, r7, #24
    1812:	46bd      	mov	sp, r7
    1814:	bd80      	pop	{r7, pc}
    1816:	bf00      	nop
    1818:	40010800 	.word	0x40010800
    181c:	40004400 	.word	0x40004400

00001820 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    1820:	b580      	push	{r7, lr}
    1822:	b082      	sub	sp, #8
    1824:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    1826:	4810      	ldr	r0, [pc, #64]	; (1868 <enable_rs232_interrupts+0x48>)
    1828:	f240 7127 	movw	r1, #1831	; 0x727
    182c:	f04f 0200 	mov.w	r2, #0
    1830:	f001 fa34 	bl	2c9c <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    1834:	480c      	ldr	r0, [pc, #48]	; (1868 <enable_rs232_interrupts+0x48>)
    1836:	f240 5125 	movw	r1, #1317	; 0x525
    183a:	f04f 0201 	mov.w	r2, #1
    183e:	f001 fa2d 	bl	2c9c <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    1842:	f04f 0326 	mov.w	r3, #38	; 0x26
    1846:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    1848:	f04f 0300 	mov.w	r3, #0
    184c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    184e:	f04f 0301 	mov.w	r3, #1
    1852:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    1854:	f107 0304 	add.w	r3, r7, #4
    1858:	4618      	mov	r0, r3
    185a:	f004 ff3d 	bl	66d8 <NVIC_Init>
}
    185e:	f107 0708 	add.w	r7, r7, #8
    1862:	46bd      	mov	sp, r7
    1864:	bd80      	pop	{r7, pc}
    1866:	bf00      	nop
    1868:	40004400 	.word	0x40004400

0000186c <enable_rs232>:

void enable_rs232(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    1870:	4802      	ldr	r0, [pc, #8]	; (187c <enable_rs232+0x10>)
    1872:	f04f 0101 	mov.w	r1, #1
    1876:	f001 f9f1 	bl	2c5c <USART_Cmd>
}
    187a:	bd80      	pop	{r7, pc}
    187c:	40004400 	.word	0x40004400

00001880 <rs232_print_str>:

void rs232_print_str(const char *str)
{
    1880:	b580      	push	{r7, lr}
    1882:	b084      	sub	sp, #16
    1884:	af00      	add	r7, sp, #0
    1886:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
    188c:	e012      	b.n	18b4 <rs232_print_str+0x34>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    188e:	bf00      	nop
    1890:	480c      	ldr	r0, [pc, #48]	; (18c4 <rs232_print_str+0x44>)
    1892:	f04f 0180 	mov.w	r1, #128	; 0x80
    1896:	f001 fc67 	bl	3168 <USART_GetFlagStatus>
    189a:	4603      	mov	r3, r0
    189c:	2b00      	cmp	r3, #0
    189e:	d0f7      	beq.n	1890 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
    18a0:	68fb      	ldr	r3, [r7, #12]
    18a2:	781b      	ldrb	r3, [r3, #0]
    18a4:	4807      	ldr	r0, [pc, #28]	; (18c4 <rs232_print_str+0x44>)
    18a6:	4619      	mov	r1, r3
    18a8:	f001 fb08 	bl	2ebc <USART_SendData>
        curr_char++;
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	f103 0301 	add.w	r3, r3, #1
    18b2:	60fb      	str	r3, [r7, #12]

void rs232_print_str(const char *str)
{
    const char *curr_char = str;

    while(*curr_char != '\0') {
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	781b      	ldrb	r3, [r3, #0]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d1e8      	bne.n	188e <rs232_print_str+0xe>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, *curr_char);
        curr_char++;
    }
}
    18bc:	f107 0710 	add.w	r7, r7, #16
    18c0:	46bd      	mov	sp, r7
    18c2:	bd80      	pop	{r7, pc}
    18c4:	40004400 	.word	0x40004400

000018c8 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
    18c8:	b480      	push	{r7}
    18ca:	b083      	sub	sp, #12
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	2b09      	cmp	r3, #9
    18d4:	d805      	bhi.n	18e2 <hex_to_char+0x1a>
        return hex_number + '0';
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	b2db      	uxtb	r3, r3
    18da:	f103 0330 	add.w	r3, r3, #48	; 0x30
    18de:	b2db      	uxtb	r3, r3
    18e0:	e004      	b.n	18ec <hex_to_char+0x24>
    } else {
        return hex_number - 0xA + 'A';
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	b2db      	uxtb	r3, r3
    18e6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    18ea:	b2db      	uxtb	r3, r3
    }
}
    18ec:	4618      	mov	r0, r3
    18ee:	f107 070c 	add.w	r7, r7, #12
    18f2:	46bd      	mov	sp, r7
    18f4:	bc80      	pop	{r7}
    18f6:	4770      	bx	lr

000018f8 <send_byte>:

void send_byte(uint8_t b)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	af00      	add	r7, sp, #0
    18fe:	4603      	mov	r3, r0
    1900:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1902:	bf00      	nop
    1904:	480b      	ldr	r0, [pc, #44]	; (1934 <send_byte+0x3c>)
    1906:	f04f 0180 	mov.w	r1, #128	; 0x80
    190a:	f001 fc2d 	bl	3168 <USART_GetFlagStatus>
    190e:	4603      	mov	r3, r0
    1910:	2b00      	cmp	r3, #0
    1912:	d0f7      	beq.n	1904 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <send_byte+0x40>)
    1916:	4a08      	ldr	r2, [pc, #32]	; (1938 <send_byte+0x40>)
    1918:	68d2      	ldr	r2, [r2, #12]
    191a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    191e:	60da      	str	r2, [r3, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
    1920:	79fb      	ldrb	r3, [r7, #7]
    1922:	b29b      	uxth	r3, r3
    1924:	4803      	ldr	r0, [pc, #12]	; (1934 <send_byte+0x3c>)
    1926:	4619      	mov	r1, r3
    1928:	f001 fac8 	bl	2ebc <USART_SendData>
}
    192c:	f107 0708 	add.w	r7, r7, #8
    1930:	46bd      	mov	sp, r7
    1932:	bd80      	pop	{r7, pc}
    1934:	40004400 	.word	0x40004400
    1938:	40011000 	.word	0x40011000

0000193c <send_number>:

void send_number(unsigned long sample, int radix)
{
    193c:	b580      	push	{r7, lr}
    193e:	b09e      	sub	sp, #120	; 0x78
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
    1944:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
    1946:	f04f 0300 	mov.w	r3, #0
    194a:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
    194c:	683a      	ldr	r2, [r7, #0]
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	fbb3 f1f2 	udiv	r1, r3, r2
    1954:	fb02 f201 	mul.w	r2, r2, r1
    1958:	1a9b      	subs	r3, r3, r2
    195a:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
    195c:	6f38      	ldr	r0, [r7, #112]	; 0x70
    195e:	f7ff ffb3 	bl	18c8 <hex_to_char>
    1962:	4603      	mov	r3, r0
    1964:	461a      	mov	r2, r3
    1966:	f107 010c 	add.w	r1, r7, #12
    196a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    196c:	18cb      	adds	r3, r1, r3
    196e:	701a      	strb	r2, [r3, #0]
        sample /= radix;
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	687a      	ldr	r2, [r7, #4]
    1974:	fbb2 f3f3 	udiv	r3, r2, r3
    1978:	607b      	str	r3, [r7, #4]
        digit++;
    197a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    197c:	f103 0301 	add.w	r3, r3, #1
    1980:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	2b00      	cmp	r3, #0
    1986:	d1e1      	bne.n	194c <send_number+0x10>

    while(digit != 0) {
    1988:	e015      	b.n	19b6 <send_number+0x7a>
        digit--;
    198a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    198c:	f103 33ff 	add.w	r3, r3, #4294967295
    1990:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1992:	bf00      	nop
    1994:	480b      	ldr	r0, [pc, #44]	; (19c4 <send_number+0x88>)
    1996:	f04f 0180 	mov.w	r1, #128	; 0x80
    199a:	f001 fbe5 	bl	3168 <USART_GetFlagStatus>
    199e:	4603      	mov	r3, r0
    19a0:	2b00      	cmp	r3, #0
    19a2:	d0f7      	beq.n	1994 <send_number+0x58>
        USART_SendData(USART2, str[digit]);
    19a4:	f107 020c 	add.w	r2, r7, #12
    19a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    19aa:	18d3      	adds	r3, r2, r3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	4805      	ldr	r0, [pc, #20]	; (19c4 <send_number+0x88>)
    19b0:	4619      	mov	r1, r3
    19b2:	f001 fa83 	bl	2ebc <USART_SendData>
        str[digit] = hex_to_char(mod);
        sample /= radix;
        digit++;
    } while(sample != 0);

    while(digit != 0) {
    19b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    19b8:	2b00      	cmp	r3, #0
    19ba:	d1e6      	bne.n	198a <send_number+0x4e>
        digit--;
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, str[digit]);
    }
}
    19bc:	f107 0778 	add.w	r7, r7, #120	; 0x78
    19c0:	46bd      	mov	sp, r7
    19c2:	bd80      	pop	{r7, pc}
    19c4:	40004400 	.word	0x40004400

000019c8 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    19c8:	b480      	push	{r7}
    19ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    19cc:	4b13      	ldr	r3, [pc, #76]	; (1a1c <RCC_DeInit+0x54>)
    19ce:	4a13      	ldr	r2, [pc, #76]	; (1a1c <RCC_DeInit+0x54>)
    19d0:	6812      	ldr	r2, [r2, #0]
    19d2:	f042 0201 	orr.w	r2, r2, #1
    19d6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    19d8:	4a10      	ldr	r2, [pc, #64]	; (1a1c <RCC_DeInit+0x54>)
    19da:	4b10      	ldr	r3, [pc, #64]	; (1a1c <RCC_DeInit+0x54>)
    19dc:	6859      	ldr	r1, [r3, #4]
    19de:	4b10      	ldr	r3, [pc, #64]	; (1a20 <RCC_DeInit+0x58>)
    19e0:	ea01 0303 	and.w	r3, r1, r3
    19e4:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    19e6:	4a0d      	ldr	r2, [pc, #52]	; (1a1c <RCC_DeInit+0x54>)
    19e8:	4b0c      	ldr	r3, [pc, #48]	; (1a1c <RCC_DeInit+0x54>)
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    19f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    19f4:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    19f6:	4b09      	ldr	r3, [pc, #36]	; (1a1c <RCC_DeInit+0x54>)
    19f8:	4a08      	ldr	r2, [pc, #32]	; (1a1c <RCC_DeInit+0x54>)
    19fa:	6812      	ldr	r2, [r2, #0]
    19fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    1a00:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1a02:	4b06      	ldr	r3, [pc, #24]	; (1a1c <RCC_DeInit+0x54>)
    1a04:	4a05      	ldr	r2, [pc, #20]	; (1a1c <RCC_DeInit+0x54>)
    1a06:	6852      	ldr	r2, [r2, #4]
    1a08:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
    1a0c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    1a0e:	4b03      	ldr	r3, [pc, #12]	; (1a1c <RCC_DeInit+0x54>)
    1a10:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    1a14:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr
    1a1c:	40021000 	.word	0x40021000
    1a20:	f8ff0000 	.word	0xf8ff0000

00001a24 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1a24:	b480      	push	{r7}
    1a26:	b083      	sub	sp, #12
    1a28:	af00      	add	r7, sp, #0
    1a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1a2c:	4b13      	ldr	r3, [pc, #76]	; (1a7c <RCC_HSEConfig+0x58>)
    1a2e:	4a13      	ldr	r2, [pc, #76]	; (1a7c <RCC_HSEConfig+0x58>)
    1a30:	6812      	ldr	r2, [r2, #0]
    1a32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    1a36:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1a38:	4b10      	ldr	r3, [pc, #64]	; (1a7c <RCC_HSEConfig+0x58>)
    1a3a:	4a10      	ldr	r2, [pc, #64]	; (1a7c <RCC_HSEConfig+0x58>)
    1a3c:	6812      	ldr	r2, [r2, #0]
    1a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    1a42:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1a4a:	d003      	beq.n	1a54 <RCC_HSEConfig+0x30>
    1a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1a50:	d007      	beq.n	1a62 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
    1a52:	e00d      	b.n	1a70 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1a54:	4b09      	ldr	r3, [pc, #36]	; (1a7c <RCC_HSEConfig+0x58>)
    1a56:	4a09      	ldr	r2, [pc, #36]	; (1a7c <RCC_HSEConfig+0x58>)
    1a58:	6812      	ldr	r2, [r2, #0]
    1a5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    1a5e:	601a      	str	r2, [r3, #0]
      break;
    1a60:	e006      	b.n	1a70 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <RCC_HSEConfig+0x58>)
    1a64:	4a05      	ldr	r2, [pc, #20]	; (1a7c <RCC_HSEConfig+0x58>)
    1a66:	6812      	ldr	r2, [r2, #0]
    1a68:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
    1a6c:	601a      	str	r2, [r3, #0]
      break;
    1a6e:	bf00      	nop
      
    default:
      break;
  }
}
    1a70:	f107 070c 	add.w	r7, r7, #12
    1a74:	46bd      	mov	sp, r7
    1a76:	bc80      	pop	{r7}
    1a78:	4770      	bx	lr
    1a7a:	bf00      	nop
    1a7c:	40021000 	.word	0x40021000

00001a80 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1a86:	f04f 0300 	mov.w	r3, #0
    1a8a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1a8c:	f04f 0300 	mov.w	r3, #0
    1a90:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    1a92:	f04f 0300 	mov.w	r3, #0
    1a96:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1a98:	f04f 0031 	mov.w	r0, #49	; 0x31
    1a9c:	f000 fb4e 	bl	213c <RCC_GetFlagStatus>
    1aa0:	4603      	mov	r3, r0
    1aa2:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    1aa4:	683b      	ldr	r3, [r7, #0]
    1aa6:	f103 0301 	add.w	r3, r3, #1
    1aaa:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    1aac:	683b      	ldr	r3, [r7, #0]
    1aae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1ab2:	d002      	beq.n	1aba <RCC_WaitForHSEStartUp+0x3a>
    1ab4:	79bb      	ldrb	r3, [r7, #6]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d0ee      	beq.n	1a98 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1aba:	f04f 0031 	mov.w	r0, #49	; 0x31
    1abe:	f000 fb3d 	bl	213c <RCC_GetFlagStatus>
    1ac2:	4603      	mov	r3, r0
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d003      	beq.n	1ad0 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1ac8:	f04f 0301 	mov.w	r3, #1
    1acc:	71fb      	strb	r3, [r7, #7]
    1ace:	e002      	b.n	1ad6 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1ad0:	f04f 0300 	mov.w	r3, #0
    1ad4:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    1ad6:	79fb      	ldrb	r3, [r7, #7]
}
    1ad8:	4618      	mov	r0, r3
    1ada:	f107 0708 	add.w	r7, r7, #8
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	bf00      	nop

00001ae4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1ae4:	b480      	push	{r7}
    1ae6:	b085      	sub	sp, #20
    1ae8:	af00      	add	r7, sp, #0
    1aea:	4603      	mov	r3, r0
    1aec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1aee:	f04f 0300 	mov.w	r3, #0
    1af2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1af4:	4b0a      	ldr	r3, [pc, #40]	; (1b20 <RCC_AdjustHSICalibrationValue+0x3c>)
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1b00:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1b02:	79fb      	ldrb	r3, [r7, #7]
    1b04:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1b08:	68fa      	ldr	r2, [r7, #12]
    1b0a:	ea42 0303 	orr.w	r3, r2, r3
    1b0e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <RCC_AdjustHSICalibrationValue+0x3c>)
    1b12:	68fa      	ldr	r2, [r7, #12]
    1b14:	601a      	str	r2, [r3, #0]
}
    1b16:	f107 0714 	add.w	r7, r7, #20
    1b1a:	46bd      	mov	sp, r7
    1b1c:	bc80      	pop	{r7}
    1b1e:	4770      	bx	lr
    1b20:	40021000 	.word	0x40021000

00001b24 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1b24:	b480      	push	{r7}
    1b26:	b083      	sub	sp, #12
    1b28:	af00      	add	r7, sp, #0
    1b2a:	4603      	mov	r3, r0
    1b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1b2e:	4b04      	ldr	r3, [pc, #16]	; (1b40 <RCC_HSICmd+0x1c>)
    1b30:	79fa      	ldrb	r2, [r7, #7]
    1b32:	601a      	str	r2, [r3, #0]
}
    1b34:	f107 070c 	add.w	r7, r7, #12
    1b38:	46bd      	mov	sp, r7
    1b3a:	bc80      	pop	{r7}
    1b3c:	4770      	bx	lr
    1b3e:	bf00      	nop
    1b40:	42420000 	.word	0x42420000

00001b44 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1b44:	b480      	push	{r7}
    1b46:	b085      	sub	sp, #20
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
    1b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1b4e:	f04f 0300 	mov.w	r3, #0
    1b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1b54:	4b0b      	ldr	r3, [pc, #44]	; (1b84 <RCC_PLLConfig+0x40>)
    1b56:	685b      	ldr	r3, [r3, #4]
    1b58:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1b5a:	68fb      	ldr	r3, [r7, #12]
    1b5c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1b60:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1b62:	687a      	ldr	r2, [r7, #4]
    1b64:	683b      	ldr	r3, [r7, #0]
    1b66:	ea42 0303 	orr.w	r3, r2, r3
    1b6a:	68fa      	ldr	r2, [r7, #12]
    1b6c:	ea42 0303 	orr.w	r3, r2, r3
    1b70:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1b72:	4b04      	ldr	r3, [pc, #16]	; (1b84 <RCC_PLLConfig+0x40>)
    1b74:	68fa      	ldr	r2, [r7, #12]
    1b76:	605a      	str	r2, [r3, #4]
}
    1b78:	f107 0714 	add.w	r7, r7, #20
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bc80      	pop	{r7}
    1b80:	4770      	bx	lr
    1b82:	bf00      	nop
    1b84:	40021000 	.word	0x40021000

00001b88 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1b88:	b480      	push	{r7}
    1b8a:	b083      	sub	sp, #12
    1b8c:	af00      	add	r7, sp, #0
    1b8e:	4603      	mov	r3, r0
    1b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <RCC_PLLCmd+0x1c>)
    1b94:	79fa      	ldrb	r2, [r7, #7]
    1b96:	601a      	str	r2, [r3, #0]
}
    1b98:	f107 070c 	add.w	r7, r7, #12
    1b9c:	46bd      	mov	sp, r7
    1b9e:	bc80      	pop	{r7}
    1ba0:	4770      	bx	lr
    1ba2:	bf00      	nop
    1ba4:	42420060 	.word	0x42420060

00001ba8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1ba8:	b480      	push	{r7}
    1baa:	b085      	sub	sp, #20
    1bac:	af00      	add	r7, sp, #0
    1bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1bb0:	f04f 0300 	mov.w	r3, #0
    1bb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1bb6:	4b0a      	ldr	r3, [pc, #40]	; (1be0 <RCC_SYSCLKConfig+0x38>)
    1bb8:	685b      	ldr	r3, [r3, #4]
    1bba:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	f023 0303 	bic.w	r3, r3, #3
    1bc2:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1bc4:	68fa      	ldr	r2, [r7, #12]
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	ea42 0303 	orr.w	r3, r2, r3
    1bcc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <RCC_SYSCLKConfig+0x38>)
    1bd0:	68fa      	ldr	r2, [r7, #12]
    1bd2:	605a      	str	r2, [r3, #4]
}
    1bd4:	f107 0714 	add.w	r7, r7, #20
    1bd8:	46bd      	mov	sp, r7
    1bda:	bc80      	pop	{r7}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop
    1be0:	40021000 	.word	0x40021000

00001be4 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1be4:	b480      	push	{r7}
    1be6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1be8:	4b04      	ldr	r3, [pc, #16]	; (1bfc <RCC_GetSYSCLKSource+0x18>)
    1bea:	685b      	ldr	r3, [r3, #4]
    1bec:	b2db      	uxtb	r3, r3
    1bee:	f003 030c 	and.w	r3, r3, #12
    1bf2:	b2db      	uxtb	r3, r3
}
    1bf4:	4618      	mov	r0, r3
    1bf6:	46bd      	mov	sp, r7
    1bf8:	bc80      	pop	{r7}
    1bfa:	4770      	bx	lr
    1bfc:	40021000 	.word	0x40021000

00001c00 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1c00:	b480      	push	{r7}
    1c02:	b085      	sub	sp, #20
    1c04:	af00      	add	r7, sp, #0
    1c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1c08:	f04f 0300 	mov.w	r3, #0
    1c0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1c0e:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <RCC_HCLKConfig+0x38>)
    1c10:	685b      	ldr	r3, [r3, #4]
    1c12:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1c14:	68fb      	ldr	r3, [r7, #12]
    1c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1c1a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1c1c:	68fa      	ldr	r2, [r7, #12]
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	ea42 0303 	orr.w	r3, r2, r3
    1c24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1c26:	4b04      	ldr	r3, [pc, #16]	; (1c38 <RCC_HCLKConfig+0x38>)
    1c28:	68fa      	ldr	r2, [r7, #12]
    1c2a:	605a      	str	r2, [r3, #4]
}
    1c2c:	f107 0714 	add.w	r7, r7, #20
    1c30:	46bd      	mov	sp, r7
    1c32:	bc80      	pop	{r7}
    1c34:	4770      	bx	lr
    1c36:	bf00      	nop
    1c38:	40021000 	.word	0x40021000

00001c3c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    1c3c:	b480      	push	{r7}
    1c3e:	b085      	sub	sp, #20
    1c40:	af00      	add	r7, sp, #0
    1c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1c44:	f04f 0300 	mov.w	r3, #0
    1c48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    1c4a:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <RCC_PCLK1Config+0x38>)
    1c4c:	685b      	ldr	r3, [r3, #4]
    1c4e:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    1c50:	68fb      	ldr	r3, [r7, #12]
    1c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1c56:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    1c58:	68fa      	ldr	r2, [r7, #12]
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	ea42 0303 	orr.w	r3, r2, r3
    1c60:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1c62:	4b04      	ldr	r3, [pc, #16]	; (1c74 <RCC_PCLK1Config+0x38>)
    1c64:	68fa      	ldr	r2, [r7, #12]
    1c66:	605a      	str	r2, [r3, #4]
}
    1c68:	f107 0714 	add.w	r7, r7, #20
    1c6c:	46bd      	mov	sp, r7
    1c6e:	bc80      	pop	{r7}
    1c70:	4770      	bx	lr
    1c72:	bf00      	nop
    1c74:	40021000 	.word	0x40021000

00001c78 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    1c78:	b480      	push	{r7}
    1c7a:	b085      	sub	sp, #20
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1c80:	f04f 0300 	mov.w	r3, #0
    1c84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    1c86:	4b0b      	ldr	r3, [pc, #44]	; (1cb4 <RCC_PCLK2Config+0x3c>)
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    1c92:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1c9a:	68fa      	ldr	r2, [r7, #12]
    1c9c:	ea42 0303 	orr.w	r3, r2, r3
    1ca0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1ca2:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <RCC_PCLK2Config+0x3c>)
    1ca4:	68fa      	ldr	r2, [r7, #12]
    1ca6:	605a      	str	r2, [r3, #4]
}
    1ca8:	f107 0714 	add.w	r7, r7, #20
    1cac:	46bd      	mov	sp, r7
    1cae:	bc80      	pop	{r7}
    1cb0:	4770      	bx	lr
    1cb2:	bf00      	nop
    1cb4:	40021000 	.word	0x40021000

00001cb8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    1cb8:	b480      	push	{r7}
    1cba:	b083      	sub	sp, #12
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	4602      	mov	r2, r0
    1cc0:	460b      	mov	r3, r1
    1cc2:	71fa      	strb	r2, [r7, #7]
    1cc4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cc6:	79bb      	ldrb	r3, [r7, #6]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d009      	beq.n	1ce0 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    1ccc:	4b0d      	ldr	r3, [pc, #52]	; (1d04 <RCC_ITConfig+0x4c>)
    1cce:	4a0d      	ldr	r2, [pc, #52]	; (1d04 <RCC_ITConfig+0x4c>)
    1cd0:	7812      	ldrb	r2, [r2, #0]
    1cd2:	b2d1      	uxtb	r1, r2
    1cd4:	79fa      	ldrb	r2, [r7, #7]
    1cd6:	ea41 0202 	orr.w	r2, r1, r2
    1cda:	b2d2      	uxtb	r2, r2
    1cdc:	701a      	strb	r2, [r3, #0]
    1cde:	e00b      	b.n	1cf8 <RCC_ITConfig+0x40>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    1ce0:	4b08      	ldr	r3, [pc, #32]	; (1d04 <RCC_ITConfig+0x4c>)
    1ce2:	4a08      	ldr	r2, [pc, #32]	; (1d04 <RCC_ITConfig+0x4c>)
    1ce4:	7812      	ldrb	r2, [r2, #0]
    1ce6:	b2d1      	uxtb	r1, r2
    1ce8:	79fa      	ldrb	r2, [r7, #7]
    1cea:	ea6f 0202 	mvn.w	r2, r2
    1cee:	b2d2      	uxtb	r2, r2
    1cf0:	ea01 0202 	and.w	r2, r1, r2
    1cf4:	b2d2      	uxtb	r2, r2
    1cf6:	701a      	strb	r2, [r3, #0]
  }
}
    1cf8:	f107 070c 	add.w	r7, r7, #12
    1cfc:	46bd      	mov	sp, r7
    1cfe:	bc80      	pop	{r7}
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop
    1d04:	40021009 	.word	0x40021009

00001d08 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    1d08:	b480      	push	{r7}
    1d0a:	b083      	sub	sp, #12
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    1d10:	4b03      	ldr	r3, [pc, #12]	; (1d20 <RCC_USBCLKConfig+0x18>)
    1d12:	687a      	ldr	r2, [r7, #4]
    1d14:	601a      	str	r2, [r3, #0]
}
    1d16:	f107 070c 	add.w	r7, r7, #12
    1d1a:	46bd      	mov	sp, r7
    1d1c:	bc80      	pop	{r7}
    1d1e:	4770      	bx	lr
    1d20:	424200d8 	.word	0x424200d8

00001d24 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    1d24:	b480      	push	{r7}
    1d26:	b085      	sub	sp, #20
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1d2c:	f04f 0300 	mov.w	r3, #0
    1d30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    1d32:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <RCC_ADCCLKConfig+0x38>)
    1d34:	685b      	ldr	r3, [r3, #4]
    1d36:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    1d38:	68fb      	ldr	r3, [r7, #12]
    1d3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1d3e:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    1d40:	68fa      	ldr	r2, [r7, #12]
    1d42:	687b      	ldr	r3, [r7, #4]
    1d44:	ea42 0303 	orr.w	r3, r2, r3
    1d48:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <RCC_ADCCLKConfig+0x38>)
    1d4c:	68fa      	ldr	r2, [r7, #12]
    1d4e:	605a      	str	r2, [r3, #4]
}
    1d50:	f107 0714 	add.w	r7, r7, #20
    1d54:	46bd      	mov	sp, r7
    1d56:	bc80      	pop	{r7}
    1d58:	4770      	bx	lr
    1d5a:	bf00      	nop
    1d5c:	40021000 	.word	0x40021000

00001d60 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	4603      	mov	r3, r0
    1d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    1d6a:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <RCC_LSEConfig+0x44>)
    1d6c:	f04f 0200 	mov.w	r2, #0
    1d70:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    1d72:	4b0c      	ldr	r3, [pc, #48]	; (1da4 <RCC_LSEConfig+0x44>)
    1d74:	f04f 0200 	mov.w	r2, #0
    1d78:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    1d7a:	79fb      	ldrb	r3, [r7, #7]
    1d7c:	2b01      	cmp	r3, #1
    1d7e:	d002      	beq.n	1d86 <RCC_LSEConfig+0x26>
    1d80:	2b04      	cmp	r3, #4
    1d82:	d005      	beq.n	1d90 <RCC_LSEConfig+0x30>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
    1d84:	e009      	b.n	1d9a <RCC_LSEConfig+0x3a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    1d86:	4b07      	ldr	r3, [pc, #28]	; (1da4 <RCC_LSEConfig+0x44>)
    1d88:	f04f 0201 	mov.w	r2, #1
    1d8c:	701a      	strb	r2, [r3, #0]
      break;
    1d8e:	e004      	b.n	1d9a <RCC_LSEConfig+0x3a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    1d90:	4b04      	ldr	r3, [pc, #16]	; (1da4 <RCC_LSEConfig+0x44>)
    1d92:	f04f 0205 	mov.w	r2, #5
    1d96:	701a      	strb	r2, [r3, #0]
      break;            
    1d98:	bf00      	nop
      
    default:
      break;      
  }
}
    1d9a:	f107 070c 	add.w	r7, r7, #12
    1d9e:	46bd      	mov	sp, r7
    1da0:	bc80      	pop	{r7}
    1da2:	4770      	bx	lr
    1da4:	40021020 	.word	0x40021020

00001da8 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    1da8:	b480      	push	{r7}
    1daa:	b083      	sub	sp, #12
    1dac:	af00      	add	r7, sp, #0
    1dae:	4603      	mov	r3, r0
    1db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    1db2:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <RCC_LSICmd+0x1c>)
    1db4:	79fa      	ldrb	r2, [r7, #7]
    1db6:	601a      	str	r2, [r3, #0]
}
    1db8:	f107 070c 	add.w	r7, r7, #12
    1dbc:	46bd      	mov	sp, r7
    1dbe:	bc80      	pop	{r7}
    1dc0:	4770      	bx	lr
    1dc2:	bf00      	nop
    1dc4:	42420480 	.word	0x42420480

00001dc8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    1dc8:	b480      	push	{r7}
    1dca:	b083      	sub	sp, #12
    1dcc:	af00      	add	r7, sp, #0
    1dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    1dd0:	4b05      	ldr	r3, [pc, #20]	; (1de8 <RCC_RTCCLKConfig+0x20>)
    1dd2:	4a05      	ldr	r2, [pc, #20]	; (1de8 <RCC_RTCCLKConfig+0x20>)
    1dd4:	6a11      	ldr	r1, [r2, #32]
    1dd6:	687a      	ldr	r2, [r7, #4]
    1dd8:	ea41 0202 	orr.w	r2, r1, r2
    1ddc:	621a      	str	r2, [r3, #32]
}
    1dde:	f107 070c 	add.w	r7, r7, #12
    1de2:	46bd      	mov	sp, r7
    1de4:	bc80      	pop	{r7}
    1de6:	4770      	bx	lr
    1de8:	40021000 	.word	0x40021000

00001dec <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    1dec:	b480      	push	{r7}
    1dee:	b083      	sub	sp, #12
    1df0:	af00      	add	r7, sp, #0
    1df2:	4603      	mov	r3, r0
    1df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    1df6:	4b04      	ldr	r3, [pc, #16]	; (1e08 <RCC_RTCCLKCmd+0x1c>)
    1df8:	79fa      	ldrb	r2, [r7, #7]
    1dfa:	601a      	str	r2, [r3, #0]
}
    1dfc:	f107 070c 	add.w	r7, r7, #12
    1e00:	46bd      	mov	sp, r7
    1e02:	bc80      	pop	{r7}
    1e04:	4770      	bx	lr
    1e06:	bf00      	nop
    1e08:	4242043c 	.word	0x4242043c

00001e0c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b087      	sub	sp, #28
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    1e14:	f04f 0300 	mov.w	r3, #0
    1e18:	617b      	str	r3, [r7, #20]
    1e1a:	f04f 0300 	mov.w	r3, #0
    1e1e:	613b      	str	r3, [r7, #16]
    1e20:	f04f 0300 	mov.w	r3, #0
    1e24:	60fb      	str	r3, [r7, #12]
    1e26:	f04f 0300 	mov.w	r3, #0
    1e2a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    1e2c:	4b51      	ldr	r3, [pc, #324]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1e2e:	685b      	ldr	r3, [r3, #4]
    1e30:	f003 030c 	and.w	r3, r3, #12
    1e34:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    1e36:	697b      	ldr	r3, [r7, #20]
    1e38:	2b04      	cmp	r3, #4
    1e3a:	d007      	beq.n	1e4c <RCC_GetClocksFreq+0x40>
    1e3c:	2b08      	cmp	r3, #8
    1e3e:	d009      	beq.n	1e54 <RCC_GetClocksFreq+0x48>
    1e40:	2b00      	cmp	r3, #0
    1e42:	d135      	bne.n	1eb0 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	4a4c      	ldr	r2, [pc, #304]	; (1f78 <RCC_GetClocksFreq+0x16c>)
    1e48:	601a      	str	r2, [r3, #0]
      break;
    1e4a:	e035      	b.n	1eb8 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	4a4a      	ldr	r2, [pc, #296]	; (1f78 <RCC_GetClocksFreq+0x16c>)
    1e50:	601a      	str	r2, [r3, #0]
      break;
    1e52:	e031      	b.n	1eb8 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    1e54:	4b47      	ldr	r3, [pc, #284]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1e56:	685b      	ldr	r3, [r3, #4]
    1e58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    1e5c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    1e5e:	4b45      	ldr	r3, [pc, #276]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    1e66:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    1e68:	693b      	ldr	r3, [r7, #16]
    1e6a:	ea4f 4393 	mov.w	r3, r3, lsr #18
    1e6e:	f103 0302 	add.w	r3, r3, #2
    1e72:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    1e74:	68fb      	ldr	r3, [r7, #12]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d106      	bne.n	1e88 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    1e7a:	693b      	ldr	r3, [r7, #16]
    1e7c:	4a3f      	ldr	r2, [pc, #252]	; (1f7c <RCC_GetClocksFreq+0x170>)
    1e7e:	fb02 f203 	mul.w	r2, r2, r3
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1e86:	e017      	b.n	1eb8 <RCC_GetClocksFreq+0xac>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    1e88:	4b3a      	ldr	r3, [pc, #232]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1e8a:	685b      	ldr	r3, [r3, #4]
    1e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1e90:	2b00      	cmp	r3, #0
    1e92:	d006      	beq.n	1ea2 <RCC_GetClocksFreq+0x96>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    1e94:	693b      	ldr	r3, [r7, #16]
    1e96:	4a39      	ldr	r2, [pc, #228]	; (1f7c <RCC_GetClocksFreq+0x170>)
    1e98:	fb02 f203 	mul.w	r2, r2, r3
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1ea0:	e00a      	b.n	1eb8 <RCC_GetClocksFreq+0xac>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    1ea2:	693b      	ldr	r3, [r7, #16]
    1ea4:	4a34      	ldr	r2, [pc, #208]	; (1f78 <RCC_GetClocksFreq+0x16c>)
    1ea6:	fb02 f203 	mul.w	r2, r2, r3
    1eaa:	687b      	ldr	r3, [r7, #4]
    1eac:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1eae:	e003      	b.n	1eb8 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	4a31      	ldr	r2, [pc, #196]	; (1f78 <RCC_GetClocksFreq+0x16c>)
    1eb4:	601a      	str	r2, [r3, #0]
      break;
    1eb6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1eb8:	4b2e      	ldr	r3, [pc, #184]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1eba:	685b      	ldr	r3, [r3, #4]
    1ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1ec0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    1ec2:	697b      	ldr	r3, [r7, #20]
    1ec4:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1ec8:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1eca:	4a2d      	ldr	r2, [pc, #180]	; (1f80 <RCC_GetClocksFreq+0x174>)
    1ecc:	697b      	ldr	r3, [r7, #20]
    1ece:	18d3      	adds	r3, r2, r3
    1ed0:	781b      	ldrb	r3, [r3, #0]
    1ed2:	b2db      	uxtb	r3, r3
    1ed4:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	681a      	ldr	r2, [r3, #0]
    1eda:	68bb      	ldr	r3, [r7, #8]
    1edc:	fa22 f203 	lsr.w	r2, r2, r3
    1ee0:	687b      	ldr	r3, [r7, #4]
    1ee2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    1ee4:	4b23      	ldr	r3, [pc, #140]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1ee6:	685b      	ldr	r3, [r3, #4]
    1ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1eec:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    1eee:	697b      	ldr	r3, [r7, #20]
    1ef0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1ef4:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1ef6:	4a22      	ldr	r2, [pc, #136]	; (1f80 <RCC_GetClocksFreq+0x174>)
    1ef8:	697b      	ldr	r3, [r7, #20]
    1efa:	18d3      	adds	r3, r2, r3
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	b2db      	uxtb	r3, r3
    1f00:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	685a      	ldr	r2, [r3, #4]
    1f06:	68bb      	ldr	r3, [r7, #8]
    1f08:	fa22 f203 	lsr.w	r2, r2, r3
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    1f10:	4b18      	ldr	r3, [pc, #96]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1f12:	685b      	ldr	r3, [r3, #4]
    1f14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    1f18:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    1f1a:	697b      	ldr	r3, [r7, #20]
    1f1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1f20:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1f22:	4a17      	ldr	r2, [pc, #92]	; (1f80 <RCC_GetClocksFreq+0x174>)
    1f24:	697b      	ldr	r3, [r7, #20]
    1f26:	18d3      	adds	r3, r2, r3
    1f28:	781b      	ldrb	r3, [r3, #0]
    1f2a:	b2db      	uxtb	r3, r3
    1f2c:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	685a      	ldr	r2, [r3, #4]
    1f32:	68bb      	ldr	r3, [r7, #8]
    1f34:	fa22 f203 	lsr.w	r2, r2, r3
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    1f3c:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <RCC_GetClocksFreq+0x168>)
    1f3e:	685b      	ldr	r3, [r3, #4]
    1f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    1f44:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    1f46:	697b      	ldr	r3, [r7, #20]
    1f48:	ea4f 3393 	mov.w	r3, r3, lsr #14
    1f4c:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    1f4e:	4a0d      	ldr	r2, [pc, #52]	; (1f84 <RCC_GetClocksFreq+0x178>)
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	18d3      	adds	r3, r2, r3
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	b2db      	uxtb	r3, r3
    1f58:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	68da      	ldr	r2, [r3, #12]
    1f5e:	68bb      	ldr	r3, [r7, #8]
    1f60:	fbb2 f2f3 	udiv	r2, r2, r3
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	611a      	str	r2, [r3, #16]
}
    1f68:	f107 071c 	add.w	r7, r7, #28
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bc80      	pop	{r7}
    1f70:	4770      	bx	lr
    1f72:	bf00      	nop
    1f74:	40021000 	.word	0x40021000
    1f78:	007a1200 	.word	0x007a1200
    1f7c:	003d0900 	.word	0x003d0900
    1f80:	20000014 	.word	0x20000014
    1f84:	20000024 	.word	0x20000024

00001f88 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    1f88:	b480      	push	{r7}
    1f8a:	b083      	sub	sp, #12
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	6078      	str	r0, [r7, #4]
    1f90:	460b      	mov	r3, r1
    1f92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f94:	78fb      	ldrb	r3, [r7, #3]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d007      	beq.n	1faa <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    1f9a:	4b0b      	ldr	r3, [pc, #44]	; (1fc8 <RCC_AHBPeriphClockCmd+0x40>)
    1f9c:	4a0a      	ldr	r2, [pc, #40]	; (1fc8 <RCC_AHBPeriphClockCmd+0x40>)
    1f9e:	6951      	ldr	r1, [r2, #20]
    1fa0:	687a      	ldr	r2, [r7, #4]
    1fa2:	ea41 0202 	orr.w	r2, r1, r2
    1fa6:	615a      	str	r2, [r3, #20]
    1fa8:	e008      	b.n	1fbc <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    1faa:	4b07      	ldr	r3, [pc, #28]	; (1fc8 <RCC_AHBPeriphClockCmd+0x40>)
    1fac:	4a06      	ldr	r2, [pc, #24]	; (1fc8 <RCC_AHBPeriphClockCmd+0x40>)
    1fae:	6951      	ldr	r1, [r2, #20]
    1fb0:	687a      	ldr	r2, [r7, #4]
    1fb2:	ea6f 0202 	mvn.w	r2, r2
    1fb6:	ea01 0202 	and.w	r2, r1, r2
    1fba:	615a      	str	r2, [r3, #20]
  }
}
    1fbc:	f107 070c 	add.w	r7, r7, #12
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bc80      	pop	{r7}
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop
    1fc8:	40021000 	.word	0x40021000

00001fcc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1fcc:	b480      	push	{r7}
    1fce:	b083      	sub	sp, #12
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
    1fd4:	460b      	mov	r3, r1
    1fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1fd8:	78fb      	ldrb	r3, [r7, #3]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d007      	beq.n	1fee <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    1fde:	4b0b      	ldr	r3, [pc, #44]	; (200c <RCC_APB2PeriphClockCmd+0x40>)
    1fe0:	4a0a      	ldr	r2, [pc, #40]	; (200c <RCC_APB2PeriphClockCmd+0x40>)
    1fe2:	6991      	ldr	r1, [r2, #24]
    1fe4:	687a      	ldr	r2, [r7, #4]
    1fe6:	ea41 0202 	orr.w	r2, r1, r2
    1fea:	619a      	str	r2, [r3, #24]
    1fec:	e008      	b.n	2000 <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    1fee:	4b07      	ldr	r3, [pc, #28]	; (200c <RCC_APB2PeriphClockCmd+0x40>)
    1ff0:	4a06      	ldr	r2, [pc, #24]	; (200c <RCC_APB2PeriphClockCmd+0x40>)
    1ff2:	6991      	ldr	r1, [r2, #24]
    1ff4:	687a      	ldr	r2, [r7, #4]
    1ff6:	ea6f 0202 	mvn.w	r2, r2
    1ffa:	ea01 0202 	and.w	r2, r1, r2
    1ffe:	619a      	str	r2, [r3, #24]
  }
}
    2000:	f107 070c 	add.w	r7, r7, #12
    2004:	46bd      	mov	sp, r7
    2006:	bc80      	pop	{r7}
    2008:	4770      	bx	lr
    200a:	bf00      	nop
    200c:	40021000 	.word	0x40021000

00002010 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2010:	b480      	push	{r7}
    2012:	b083      	sub	sp, #12
    2014:	af00      	add	r7, sp, #0
    2016:	6078      	str	r0, [r7, #4]
    2018:	460b      	mov	r3, r1
    201a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    201c:	78fb      	ldrb	r3, [r7, #3]
    201e:	2b00      	cmp	r3, #0
    2020:	d007      	beq.n	2032 <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    2022:	4b0b      	ldr	r3, [pc, #44]	; (2050 <RCC_APB1PeriphClockCmd+0x40>)
    2024:	4a0a      	ldr	r2, [pc, #40]	; (2050 <RCC_APB1PeriphClockCmd+0x40>)
    2026:	69d1      	ldr	r1, [r2, #28]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	ea41 0202 	orr.w	r2, r1, r2
    202e:	61da      	str	r2, [r3, #28]
    2030:	e008      	b.n	2044 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    2032:	4b07      	ldr	r3, [pc, #28]	; (2050 <RCC_APB1PeriphClockCmd+0x40>)
    2034:	4a06      	ldr	r2, [pc, #24]	; (2050 <RCC_APB1PeriphClockCmd+0x40>)
    2036:	69d1      	ldr	r1, [r2, #28]
    2038:	687a      	ldr	r2, [r7, #4]
    203a:	ea6f 0202 	mvn.w	r2, r2
    203e:	ea01 0202 	and.w	r2, r1, r2
    2042:	61da      	str	r2, [r3, #28]
  }
}
    2044:	f107 070c 	add.w	r7, r7, #12
    2048:	46bd      	mov	sp, r7
    204a:	bc80      	pop	{r7}
    204c:	4770      	bx	lr
    204e:	bf00      	nop
    2050:	40021000 	.word	0x40021000

00002054 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2054:	b480      	push	{r7}
    2056:	b083      	sub	sp, #12
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	460b      	mov	r3, r1
    205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2060:	78fb      	ldrb	r3, [r7, #3]
    2062:	2b00      	cmp	r3, #0
    2064:	d007      	beq.n	2076 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2066:	4b0b      	ldr	r3, [pc, #44]	; (2094 <RCC_APB2PeriphResetCmd+0x40>)
    2068:	4a0a      	ldr	r2, [pc, #40]	; (2094 <RCC_APB2PeriphResetCmd+0x40>)
    206a:	68d1      	ldr	r1, [r2, #12]
    206c:	687a      	ldr	r2, [r7, #4]
    206e:	ea41 0202 	orr.w	r2, r1, r2
    2072:	60da      	str	r2, [r3, #12]
    2074:	e008      	b.n	2088 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2076:	4b07      	ldr	r3, [pc, #28]	; (2094 <RCC_APB2PeriphResetCmd+0x40>)
    2078:	4a06      	ldr	r2, [pc, #24]	; (2094 <RCC_APB2PeriphResetCmd+0x40>)
    207a:	68d1      	ldr	r1, [r2, #12]
    207c:	687a      	ldr	r2, [r7, #4]
    207e:	ea6f 0202 	mvn.w	r2, r2
    2082:	ea01 0202 	and.w	r2, r1, r2
    2086:	60da      	str	r2, [r3, #12]
  }
}
    2088:	f107 070c 	add.w	r7, r7, #12
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr
    2092:	bf00      	nop
    2094:	40021000 	.word	0x40021000

00002098 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2098:	b480      	push	{r7}
    209a:	b083      	sub	sp, #12
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
    20a0:	460b      	mov	r3, r1
    20a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    20a4:	78fb      	ldrb	r3, [r7, #3]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d007      	beq.n	20ba <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    20aa:	4b0b      	ldr	r3, [pc, #44]	; (20d8 <RCC_APB1PeriphResetCmd+0x40>)
    20ac:	4a0a      	ldr	r2, [pc, #40]	; (20d8 <RCC_APB1PeriphResetCmd+0x40>)
    20ae:	6911      	ldr	r1, [r2, #16]
    20b0:	687a      	ldr	r2, [r7, #4]
    20b2:	ea41 0202 	orr.w	r2, r1, r2
    20b6:	611a      	str	r2, [r3, #16]
    20b8:	e008      	b.n	20cc <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    20ba:	4b07      	ldr	r3, [pc, #28]	; (20d8 <RCC_APB1PeriphResetCmd+0x40>)
    20bc:	4a06      	ldr	r2, [pc, #24]	; (20d8 <RCC_APB1PeriphResetCmd+0x40>)
    20be:	6911      	ldr	r1, [r2, #16]
    20c0:	687a      	ldr	r2, [r7, #4]
    20c2:	ea6f 0202 	mvn.w	r2, r2
    20c6:	ea01 0202 	and.w	r2, r1, r2
    20ca:	611a      	str	r2, [r3, #16]
  }
}
    20cc:	f107 070c 	add.w	r7, r7, #12
    20d0:	46bd      	mov	sp, r7
    20d2:	bc80      	pop	{r7}
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	40021000 	.word	0x40021000

000020dc <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    20dc:	b480      	push	{r7}
    20de:	b083      	sub	sp, #12
    20e0:	af00      	add	r7, sp, #0
    20e2:	4603      	mov	r3, r0
    20e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    20e6:	4b04      	ldr	r3, [pc, #16]	; (20f8 <RCC_BackupResetCmd+0x1c>)
    20e8:	79fa      	ldrb	r2, [r7, #7]
    20ea:	601a      	str	r2, [r3, #0]
}
    20ec:	f107 070c 	add.w	r7, r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	bc80      	pop	{r7}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop
    20f8:	42420440 	.word	0x42420440

000020fc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    20fc:	b480      	push	{r7}
    20fe:	b083      	sub	sp, #12
    2100:	af00      	add	r7, sp, #0
    2102:	4603      	mov	r3, r0
    2104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <RCC_ClockSecuritySystemCmd+0x1c>)
    2108:	79fa      	ldrb	r2, [r7, #7]
    210a:	601a      	str	r2, [r3, #0]
}
    210c:	f107 070c 	add.w	r7, r7, #12
    2110:	46bd      	mov	sp, r7
    2112:	bc80      	pop	{r7}
    2114:	4770      	bx	lr
    2116:	bf00      	nop
    2118:	4242004c 	.word	0x4242004c

0000211c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    211c:	b480      	push	{r7}
    211e:	b083      	sub	sp, #12
    2120:	af00      	add	r7, sp, #0
    2122:	4603      	mov	r3, r0
    2124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    2126:	4b04      	ldr	r3, [pc, #16]	; (2138 <RCC_MCOConfig+0x1c>)
    2128:	79fa      	ldrb	r2, [r7, #7]
    212a:	701a      	strb	r2, [r3, #0]
}
    212c:	f107 070c 	add.w	r7, r7, #12
    2130:	46bd      	mov	sp, r7
    2132:	bc80      	pop	{r7}
    2134:	4770      	bx	lr
    2136:	bf00      	nop
    2138:	40021007 	.word	0x40021007

0000213c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    213c:	b480      	push	{r7}
    213e:	b087      	sub	sp, #28
    2140:	af00      	add	r7, sp, #0
    2142:	4603      	mov	r3, r0
    2144:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2146:	f04f 0300 	mov.w	r3, #0
    214a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    214c:	f04f 0300 	mov.w	r3, #0
    2150:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    2152:	f04f 0300 	mov.w	r3, #0
    2156:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2158:	79fb      	ldrb	r3, [r7, #7]
    215a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    215e:	b2db      	uxtb	r3, r3
    2160:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2162:	68fb      	ldr	r3, [r7, #12]
    2164:	2b01      	cmp	r3, #1
    2166:	d103      	bne.n	2170 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2168:	4b14      	ldr	r3, [pc, #80]	; (21bc <RCC_GetFlagStatus+0x80>)
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	617b      	str	r3, [r7, #20]
    216e:	e009      	b.n	2184 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	2b02      	cmp	r3, #2
    2174:	d103      	bne.n	217e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2176:	4b11      	ldr	r3, [pc, #68]	; (21bc <RCC_GetFlagStatus+0x80>)
    2178:	6a1b      	ldr	r3, [r3, #32]
    217a:	617b      	str	r3, [r7, #20]
    217c:	e002      	b.n	2184 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    217e:	4b0f      	ldr	r3, [pc, #60]	; (21bc <RCC_GetFlagStatus+0x80>)
    2180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2182:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2184:	79fb      	ldrb	r3, [r7, #7]
    2186:	f003 031f 	and.w	r3, r3, #31
    218a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    218c:	68fb      	ldr	r3, [r7, #12]
    218e:	697a      	ldr	r2, [r7, #20]
    2190:	fa22 f303 	lsr.w	r3, r2, r3
    2194:	f003 0301 	and.w	r3, r3, #1
    2198:	b2db      	uxtb	r3, r3
    219a:	2b00      	cmp	r3, #0
    219c:	d003      	beq.n	21a6 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    219e:	f04f 0301 	mov.w	r3, #1
    21a2:	74fb      	strb	r3, [r7, #19]
    21a4:	e002      	b.n	21ac <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    21ac:	7cfb      	ldrb	r3, [r7, #19]
}
    21ae:	4618      	mov	r0, r3
    21b0:	f107 071c 	add.w	r7, r7, #28
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	40021000 	.word	0x40021000

000021c0 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    21c0:	b480      	push	{r7}
    21c2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <RCC_ClearFlag+0x18>)
    21c6:	4a04      	ldr	r2, [pc, #16]	; (21d8 <RCC_ClearFlag+0x18>)
    21c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    21ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    21ce:	625a      	str	r2, [r3, #36]	; 0x24
}
    21d0:	46bd      	mov	sp, r7
    21d2:	bc80      	pop	{r7}
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop
    21d8:	40021000 	.word	0x40021000

000021dc <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    21dc:	b480      	push	{r7}
    21de:	b085      	sub	sp, #20
    21e0:	af00      	add	r7, sp, #0
    21e2:	4603      	mov	r3, r0
    21e4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    21e6:	f04f 0300 	mov.w	r3, #0
    21ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    21ec:	4b0a      	ldr	r3, [pc, #40]	; (2218 <RCC_GetITStatus+0x3c>)
    21ee:	689a      	ldr	r2, [r3, #8]
    21f0:	79fb      	ldrb	r3, [r7, #7]
    21f2:	ea02 0303 	and.w	r3, r2, r3
    21f6:	2b00      	cmp	r3, #0
    21f8:	d003      	beq.n	2202 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    21fa:	f04f 0301 	mov.w	r3, #1
    21fe:	73fb      	strb	r3, [r7, #15]
    2200:	e002      	b.n	2208 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    2202:	f04f 0300 	mov.w	r3, #0
    2206:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    2208:	7bfb      	ldrb	r3, [r7, #15]
}
    220a:	4618      	mov	r0, r3
    220c:	f107 0714 	add.w	r7, r7, #20
    2210:	46bd      	mov	sp, r7
    2212:	bc80      	pop	{r7}
    2214:	4770      	bx	lr
    2216:	bf00      	nop
    2218:	40021000 	.word	0x40021000

0000221c <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    221c:	b480      	push	{r7}
    221e:	b083      	sub	sp, #12
    2220:	af00      	add	r7, sp, #0
    2222:	4603      	mov	r3, r0
    2224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    2226:	4b04      	ldr	r3, [pc, #16]	; (2238 <RCC_ClearITPendingBit+0x1c>)
    2228:	79fa      	ldrb	r2, [r7, #7]
    222a:	701a      	strb	r2, [r3, #0]
}
    222c:	f107 070c 	add.w	r7, r7, #12
    2230:	46bd      	mov	sp, r7
    2232:	bc80      	pop	{r7}
    2234:	4770      	bx	lr
    2236:	bf00      	nop
    2238:	4002100a 	.word	0x4002100a

0000223c <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    2244:	687a      	ldr	r2, [r7, #4]
    2246:	4b3c      	ldr	r3, [pc, #240]	; (2338 <GPIO_DeInit+0xfc>)
    2248:	429a      	cmp	r2, r3
    224a:	d10c      	bne.n	2266 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    224c:	f04f 0004 	mov.w	r0, #4
    2250:	f04f 0101 	mov.w	r1, #1
    2254:	f7ff fefe 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    2258:	f04f 0004 	mov.w	r0, #4
    225c:	f04f 0100 	mov.w	r1, #0
    2260:	f7ff fef8 	bl	2054 <RCC_APB2PeriphResetCmd>
    2264:	e064      	b.n	2330 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    2266:	687a      	ldr	r2, [r7, #4]
    2268:	4b34      	ldr	r3, [pc, #208]	; (233c <GPIO_DeInit+0x100>)
    226a:	429a      	cmp	r2, r3
    226c:	d10c      	bne.n	2288 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    226e:	f04f 0008 	mov.w	r0, #8
    2272:	f04f 0101 	mov.w	r1, #1
    2276:	f7ff feed 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    227a:	f04f 0008 	mov.w	r0, #8
    227e:	f04f 0100 	mov.w	r1, #0
    2282:	f7ff fee7 	bl	2054 <RCC_APB2PeriphResetCmd>
    2286:	e053      	b.n	2330 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    2288:	687a      	ldr	r2, [r7, #4]
    228a:	4b2d      	ldr	r3, [pc, #180]	; (2340 <GPIO_DeInit+0x104>)
    228c:	429a      	cmp	r2, r3
    228e:	d10c      	bne.n	22aa <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    2290:	f04f 0010 	mov.w	r0, #16
    2294:	f04f 0101 	mov.w	r1, #1
    2298:	f7ff fedc 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    229c:	f04f 0010 	mov.w	r0, #16
    22a0:	f04f 0100 	mov.w	r1, #0
    22a4:	f7ff fed6 	bl	2054 <RCC_APB2PeriphResetCmd>
    22a8:	e042      	b.n	2330 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    22aa:	687a      	ldr	r2, [r7, #4]
    22ac:	4b25      	ldr	r3, [pc, #148]	; (2344 <GPIO_DeInit+0x108>)
    22ae:	429a      	cmp	r2, r3
    22b0:	d10c      	bne.n	22cc <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    22b2:	f04f 0020 	mov.w	r0, #32
    22b6:	f04f 0101 	mov.w	r1, #1
    22ba:	f7ff fecb 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    22be:	f04f 0020 	mov.w	r0, #32
    22c2:	f04f 0100 	mov.w	r1, #0
    22c6:	f7ff fec5 	bl	2054 <RCC_APB2PeriphResetCmd>
    22ca:	e031      	b.n	2330 <GPIO_DeInit+0xf4>
  }    
  else if (GPIOx == GPIOE)
    22cc:	687a      	ldr	r2, [r7, #4]
    22ce:	4b1e      	ldr	r3, [pc, #120]	; (2348 <GPIO_DeInit+0x10c>)
    22d0:	429a      	cmp	r2, r3
    22d2:	d10c      	bne.n	22ee <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    22d4:	f04f 0040 	mov.w	r0, #64	; 0x40
    22d8:	f04f 0101 	mov.w	r1, #1
    22dc:	f7ff feba 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    22e0:	f04f 0040 	mov.w	r0, #64	; 0x40
    22e4:	f04f 0100 	mov.w	r1, #0
    22e8:	f7ff feb4 	bl	2054 <RCC_APB2PeriphResetCmd>
    22ec:	e020      	b.n	2330 <GPIO_DeInit+0xf4>
  } 
  else if (GPIOx == GPIOF)
    22ee:	687a      	ldr	r2, [r7, #4]
    22f0:	4b16      	ldr	r3, [pc, #88]	; (234c <GPIO_DeInit+0x110>)
    22f2:	429a      	cmp	r2, r3
    22f4:	d10c      	bne.n	2310 <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    22f6:	f04f 0080 	mov.w	r0, #128	; 0x80
    22fa:	f04f 0101 	mov.w	r1, #1
    22fe:	f7ff fea9 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    2302:	f04f 0080 	mov.w	r0, #128	; 0x80
    2306:	f04f 0100 	mov.w	r1, #0
    230a:	f7ff fea3 	bl	2054 <RCC_APB2PeriphResetCmd>
    230e:	e00f      	b.n	2330 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    2310:	687a      	ldr	r2, [r7, #4]
    2312:	4b0f      	ldr	r3, [pc, #60]	; (2350 <GPIO_DeInit+0x114>)
    2314:	429a      	cmp	r2, r3
    2316:	d10b      	bne.n	2330 <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    2318:	f44f 7080 	mov.w	r0, #256	; 0x100
    231c:	f04f 0101 	mov.w	r1, #1
    2320:	f7ff fe98 	bl	2054 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    2324:	f44f 7080 	mov.w	r0, #256	; 0x100
    2328:	f04f 0100 	mov.w	r1, #0
    232c:	f7ff fe92 	bl	2054 <RCC_APB2PeriphResetCmd>
    }
  }
}
    2330:	f107 0708 	add.w	r7, r7, #8
    2334:	46bd      	mov	sp, r7
    2336:	bd80      	pop	{r7, pc}
    2338:	40010800 	.word	0x40010800
    233c:	40010c00 	.word	0x40010c00
    2340:	40011000 	.word	0x40011000
    2344:	40011400 	.word	0x40011400
    2348:	40011800 	.word	0x40011800
    234c:	40011c00 	.word	0x40011c00
    2350:	40012000 	.word	0x40012000

00002354 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    2358:	f04f 0001 	mov.w	r0, #1
    235c:	f04f 0101 	mov.w	r1, #1
    2360:	f7ff fe78 	bl	2054 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    2364:	f04f 0001 	mov.w	r0, #1
    2368:	f04f 0100 	mov.w	r1, #0
    236c:	f7ff fe72 	bl	2054 <RCC_APB2PeriphResetCmd>
}
    2370:	bd80      	pop	{r7, pc}
    2372:	bf00      	nop

00002374 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    2374:	b480      	push	{r7}
    2376:	b089      	sub	sp, #36	; 0x24
    2378:	af00      	add	r7, sp, #0
    237a:	6078      	str	r0, [r7, #4]
    237c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    237e:	f04f 0300 	mov.w	r3, #0
    2382:	61fb      	str	r3, [r7, #28]
    2384:	f04f 0300 	mov.w	r3, #0
    2388:	613b      	str	r3, [r7, #16]
    238a:	f04f 0300 	mov.w	r3, #0
    238e:	61bb      	str	r3, [r7, #24]
    2390:	f04f 0300 	mov.w	r3, #0
    2394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    2396:	f04f 0300 	mov.w	r3, #0
    239a:	617b      	str	r3, [r7, #20]
    239c:	f04f 0300 	mov.w	r3, #0
    23a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    23a2:	683b      	ldr	r3, [r7, #0]
    23a4:	78db      	ldrb	r3, [r3, #3]
    23a6:	f003 030f 	and.w	r3, r3, #15
    23aa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    23ac:	683b      	ldr	r3, [r7, #0]
    23ae:	78db      	ldrb	r3, [r3, #3]
    23b0:	f003 0310 	and.w	r3, r3, #16
    23b4:	2b00      	cmp	r3, #0
    23b6:	d005      	beq.n	23c4 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    23b8:	683b      	ldr	r3, [r7, #0]
    23ba:	789b      	ldrb	r3, [r3, #2]
    23bc:	69fa      	ldr	r2, [r7, #28]
    23be:	ea42 0303 	orr.w	r3, r2, r3
    23c2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    23c4:	683b      	ldr	r3, [r7, #0]
    23c6:	881b      	ldrh	r3, [r3, #0]
    23c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    23cc:	2b00      	cmp	r3, #0
    23ce:	d051      	beq.n	2474 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	681b      	ldr	r3, [r3, #0]
    23d4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    23d6:	f04f 0300 	mov.w	r3, #0
    23da:	61bb      	str	r3, [r7, #24]
    23dc:	e044      	b.n	2468 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
    23de:	69bb      	ldr	r3, [r7, #24]
    23e0:	f04f 0201 	mov.w	r2, #1
    23e4:	fa02 f303 	lsl.w	r3, r2, r3
    23e8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    23ea:	683b      	ldr	r3, [r7, #0]
    23ec:	881b      	ldrh	r3, [r3, #0]
    23ee:	461a      	mov	r2, r3
    23f0:	68fb      	ldr	r3, [r7, #12]
    23f2:	ea02 0303 	and.w	r3, r2, r3
    23f6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    23f8:	693a      	ldr	r2, [r7, #16]
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	429a      	cmp	r2, r3
    23fe:	d12f      	bne.n	2460 <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
    2400:	69bb      	ldr	r3, [r7, #24]
    2402:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2406:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	f04f 020f 	mov.w	r2, #15
    240e:	fa02 f303 	lsl.w	r3, r2, r3
    2412:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    2414:	68bb      	ldr	r3, [r7, #8]
    2416:	ea6f 0303 	mvn.w	r3, r3
    241a:	697a      	ldr	r2, [r7, #20]
    241c:	ea02 0303 	and.w	r3, r2, r3
    2420:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	69fa      	ldr	r2, [r7, #28]
    2426:	fa02 f303 	lsl.w	r3, r2, r3
    242a:	697a      	ldr	r2, [r7, #20]
    242c:	ea42 0303 	orr.w	r3, r2, r3
    2430:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	78db      	ldrb	r3, [r3, #3]
    2436:	2b28      	cmp	r3, #40	; 0x28
    2438:	d107      	bne.n	244a <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    243a:	69bb      	ldr	r3, [r7, #24]
    243c:	f04f 0201 	mov.w	r2, #1
    2440:	fa02 f203 	lsl.w	r2, r2, r3
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	615a      	str	r2, [r3, #20]
    2448:	e00a      	b.n	2460 <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	78db      	ldrb	r3, [r3, #3]
    244e:	2b48      	cmp	r3, #72	; 0x48
    2450:	d106      	bne.n	2460 <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    2452:	69bb      	ldr	r3, [r7, #24]
    2454:	f04f 0201 	mov.w	r2, #1
    2458:	fa02 f203 	lsl.w	r2, r2, r3
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    2460:	69bb      	ldr	r3, [r7, #24]
    2462:	f103 0301 	add.w	r3, r3, #1
    2466:	61bb      	str	r3, [r7, #24]
    2468:	69bb      	ldr	r3, [r7, #24]
    246a:	2b07      	cmp	r3, #7
    246c:	d9b7      	bls.n	23de <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	697a      	ldr	r2, [r7, #20]
    2472:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    2474:	683b      	ldr	r3, [r7, #0]
    2476:	881b      	ldrh	r3, [r3, #0]
    2478:	2bff      	cmp	r3, #255	; 0xff
    247a:	d956      	bls.n	252a <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	685b      	ldr	r3, [r3, #4]
    2480:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    2482:	f04f 0300 	mov.w	r3, #0
    2486:	61bb      	str	r3, [r7, #24]
    2488:	e049      	b.n	251e <GPIO_Init+0x1aa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    248a:	69bb      	ldr	r3, [r7, #24]
    248c:	f103 0308 	add.w	r3, r3, #8
    2490:	f04f 0201 	mov.w	r2, #1
    2494:	fa02 f303 	lsl.w	r3, r2, r3
    2498:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	881b      	ldrh	r3, [r3, #0]
    249e:	461a      	mov	r2, r3
    24a0:	68fb      	ldr	r3, [r7, #12]
    24a2:	ea02 0303 	and.w	r3, r2, r3
    24a6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    24a8:	693a      	ldr	r2, [r7, #16]
    24aa:	68fb      	ldr	r3, [r7, #12]
    24ac:	429a      	cmp	r2, r3
    24ae:	d132      	bne.n	2516 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
    24b0:	69bb      	ldr	r3, [r7, #24]
    24b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    24b6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	f04f 020f 	mov.w	r2, #15
    24be:	fa02 f303 	lsl.w	r3, r2, r3
    24c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    24c4:	68bb      	ldr	r3, [r7, #8]
    24c6:	ea6f 0303 	mvn.w	r3, r3
    24ca:	697a      	ldr	r2, [r7, #20]
    24cc:	ea02 0303 	and.w	r3, r2, r3
    24d0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    24d2:	68fb      	ldr	r3, [r7, #12]
    24d4:	69fa      	ldr	r2, [r7, #28]
    24d6:	fa02 f303 	lsl.w	r3, r2, r3
    24da:	697a      	ldr	r2, [r7, #20]
    24dc:	ea42 0303 	orr.w	r3, r2, r3
    24e0:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    24e2:	683b      	ldr	r3, [r7, #0]
    24e4:	78db      	ldrb	r3, [r3, #3]
    24e6:	2b28      	cmp	r3, #40	; 0x28
    24e8:	d108      	bne.n	24fc <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    24ea:	69bb      	ldr	r3, [r7, #24]
    24ec:	f103 0308 	add.w	r3, r3, #8
    24f0:	f04f 0201 	mov.w	r2, #1
    24f4:	fa02 f203 	lsl.w	r2, r2, r3
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	78db      	ldrb	r3, [r3, #3]
    2500:	2b48      	cmp	r3, #72	; 0x48
    2502:	d108      	bne.n	2516 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    2504:	69bb      	ldr	r3, [r7, #24]
    2506:	f103 0308 	add.w	r3, r3, #8
    250a:	f04f 0201 	mov.w	r2, #1
    250e:	fa02 f203 	lsl.w	r2, r2, r3
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    2516:	69bb      	ldr	r3, [r7, #24]
    2518:	f103 0301 	add.w	r3, r3, #1
    251c:	61bb      	str	r3, [r7, #24]
    251e:	69bb      	ldr	r3, [r7, #24]
    2520:	2b07      	cmp	r3, #7
    2522:	d9b2      	bls.n	248a <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	697a      	ldr	r2, [r7, #20]
    2528:	605a      	str	r2, [r3, #4]
  }
}
    252a:	f107 0724 	add.w	r7, r7, #36	; 0x24
    252e:	46bd      	mov	sp, r7
    2530:	bc80      	pop	{r7}
    2532:	4770      	bx	lr

00002534 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    2534:	b480      	push	{r7}
    2536:	b083      	sub	sp, #12
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2542:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	f04f 0202 	mov.w	r2, #2
    254a:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	f04f 0204 	mov.w	r2, #4
    2552:	70da      	strb	r2, [r3, #3]
}
    2554:	f107 070c 	add.w	r7, r7, #12
    2558:	46bd      	mov	sp, r7
    255a:	bc80      	pop	{r7}
    255c:	4770      	bx	lr
    255e:	bf00      	nop

00002560 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    2560:	b480      	push	{r7}
    2562:	b085      	sub	sp, #20
    2564:	af00      	add	r7, sp, #0
    2566:	6078      	str	r0, [r7, #4]
    2568:	460b      	mov	r3, r1
    256a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    256c:	f04f 0300 	mov.w	r3, #0
    2570:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	689a      	ldr	r2, [r3, #8]
    2576:	887b      	ldrh	r3, [r7, #2]
    2578:	ea02 0303 	and.w	r3, r2, r3
    257c:	2b00      	cmp	r3, #0
    257e:	d003      	beq.n	2588 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    2580:	f04f 0301 	mov.w	r3, #1
    2584:	73fb      	strb	r3, [r7, #15]
    2586:	e002      	b.n	258e <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    2588:	f04f 0300 	mov.w	r3, #0
    258c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    258e:	7bfb      	ldrb	r3, [r7, #15]
}
    2590:	4618      	mov	r0, r3
    2592:	f107 0714 	add.w	r7, r7, #20
    2596:	46bd      	mov	sp, r7
    2598:	bc80      	pop	{r7}
    259a:	4770      	bx	lr

0000259c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	689b      	ldr	r3, [r3, #8]
    25a8:	b29b      	uxth	r3, r3
}
    25aa:	4618      	mov	r0, r3
    25ac:	f107 070c 	add.w	r7, r7, #12
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	bf00      	nop

000025b8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    25b8:	b480      	push	{r7}
    25ba:	b085      	sub	sp, #20
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]
    25c0:	460b      	mov	r3, r1
    25c2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    25c4:	f04f 0300 	mov.w	r3, #0
    25c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	68da      	ldr	r2, [r3, #12]
    25ce:	887b      	ldrh	r3, [r7, #2]
    25d0:	ea02 0303 	and.w	r3, r2, r3
    25d4:	2b00      	cmp	r3, #0
    25d6:	d003      	beq.n	25e0 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    25d8:	f04f 0301 	mov.w	r3, #1
    25dc:	73fb      	strb	r3, [r7, #15]
    25de:	e002      	b.n	25e6 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    25e0:	f04f 0300 	mov.w	r3, #0
    25e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    25e6:	7bfb      	ldrb	r3, [r7, #15]
}
    25e8:	4618      	mov	r0, r3
    25ea:	f107 0714 	add.w	r7, r7, #20
    25ee:	46bd      	mov	sp, r7
    25f0:	bc80      	pop	{r7}
    25f2:	4770      	bx	lr

000025f4 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    25f4:	b480      	push	{r7}
    25f6:	b083      	sub	sp, #12
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	68db      	ldr	r3, [r3, #12]
    2600:	b29b      	uxth	r3, r3
}
    2602:	4618      	mov	r0, r3
    2604:	f107 070c 	add.w	r7, r7, #12
    2608:	46bd      	mov	sp, r7
    260a:	bc80      	pop	{r7}
    260c:	4770      	bx	lr
    260e:	bf00      	nop

00002610 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    2610:	b480      	push	{r7}
    2612:	b083      	sub	sp, #12
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	460b      	mov	r3, r1
    261a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    261c:	887a      	ldrh	r2, [r7, #2]
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	611a      	str	r2, [r3, #16]
}
    2622:	f107 070c 	add.w	r7, r7, #12
    2626:	46bd      	mov	sp, r7
    2628:	bc80      	pop	{r7}
    262a:	4770      	bx	lr

0000262c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    262c:	b480      	push	{r7}
    262e:	b083      	sub	sp, #12
    2630:	af00      	add	r7, sp, #0
    2632:	6078      	str	r0, [r7, #4]
    2634:	460b      	mov	r3, r1
    2636:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    2638:	887a      	ldrh	r2, [r7, #2]
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	615a      	str	r2, [r3, #20]
}
    263e:	f107 070c 	add.w	r7, r7, #12
    2642:	46bd      	mov	sp, r7
    2644:	bc80      	pop	{r7}
    2646:	4770      	bx	lr

00002648 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    2648:	b480      	push	{r7}
    264a:	b083      	sub	sp, #12
    264c:	af00      	add	r7, sp, #0
    264e:	6078      	str	r0, [r7, #4]
    2650:	4613      	mov	r3, r2
    2652:	460a      	mov	r2, r1
    2654:	807a      	strh	r2, [r7, #2]
    2656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    2658:	787b      	ldrb	r3, [r7, #1]
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    265e:	887a      	ldrh	r2, [r7, #2]
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	611a      	str	r2, [r3, #16]
    2664:	e002      	b.n	266c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    2666:	887a      	ldrh	r2, [r7, #2]
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	615a      	str	r2, [r3, #20]
  }
}
    266c:	f107 070c 	add.w	r7, r7, #12
    2670:	46bd      	mov	sp, r7
    2672:	bc80      	pop	{r7}
    2674:	4770      	bx	lr
    2676:	bf00      	nop

00002678 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    2678:	b480      	push	{r7}
    267a:	b083      	sub	sp, #12
    267c:	af00      	add	r7, sp, #0
    267e:	6078      	str	r0, [r7, #4]
    2680:	460b      	mov	r3, r1
    2682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    2684:	887a      	ldrh	r2, [r7, #2]
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	60da      	str	r2, [r3, #12]
}
    268a:	f107 070c 	add.w	r7, r7, #12
    268e:	46bd      	mov	sp, r7
    2690:	bc80      	pop	{r7}
    2692:	4770      	bx	lr

00002694 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    2694:	b480      	push	{r7}
    2696:	b085      	sub	sp, #20
    2698:	af00      	add	r7, sp, #0
    269a:	6078      	str	r0, [r7, #4]
    269c:	460b      	mov	r3, r1
    269e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    26a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    26a6:	887b      	ldrh	r3, [r7, #2]
    26a8:	68fa      	ldr	r2, [r7, #12]
    26aa:	ea42 0303 	orr.w	r3, r2, r3
    26ae:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	68fa      	ldr	r2, [r7, #12]
    26b4:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    26b6:	887a      	ldrh	r2, [r7, #2]
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	68fa      	ldr	r2, [r7, #12]
    26c0:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	699b      	ldr	r3, [r3, #24]
    26c6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	699b      	ldr	r3, [r3, #24]
    26cc:	60fb      	str	r3, [r7, #12]
}
    26ce:	f107 0714 	add.w	r7, r7, #20
    26d2:	46bd      	mov	sp, r7
    26d4:	bc80      	pop	{r7}
    26d6:	4770      	bx	lr

000026d8 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    26d8:	b480      	push	{r7}
    26da:	b085      	sub	sp, #20
    26dc:	af00      	add	r7, sp, #0
    26de:	4602      	mov	r2, r0
    26e0:	460b      	mov	r3, r1
    26e2:	71fa      	strb	r2, [r7, #7]
    26e4:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    26e6:	f04f 0300 	mov.w	r3, #0
    26ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    26ec:	4b0e      	ldr	r3, [pc, #56]	; (2728 <GPIO_EventOutputConfig+0x50>)
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    26f2:	68fa      	ldr	r2, [r7, #12]
    26f4:	f64f 7380 	movw	r3, #65408	; 0xff80
    26f8:	ea02 0303 	and.w	r3, r2, r3
    26fc:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    26fe:	79fb      	ldrb	r3, [r7, #7]
    2700:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2704:	68fa      	ldr	r2, [r7, #12]
    2706:	ea42 0303 	orr.w	r3, r2, r3
    270a:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    270c:	79bb      	ldrb	r3, [r7, #6]
    270e:	68fa      	ldr	r2, [r7, #12]
    2710:	ea42 0303 	orr.w	r3, r2, r3
    2714:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    2716:	4b04      	ldr	r3, [pc, #16]	; (2728 <GPIO_EventOutputConfig+0x50>)
    2718:	68fa      	ldr	r2, [r7, #12]
    271a:	601a      	str	r2, [r3, #0]
}
    271c:	f107 0714 	add.w	r7, r7, #20
    2720:	46bd      	mov	sp, r7
    2722:	bc80      	pop	{r7}
    2724:	4770      	bx	lr
    2726:	bf00      	nop
    2728:	40010000 	.word	0x40010000

0000272c <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    272c:	b480      	push	{r7}
    272e:	b083      	sub	sp, #12
    2730:	af00      	add	r7, sp, #0
    2732:	4603      	mov	r3, r0
    2734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    2736:	4b04      	ldr	r3, [pc, #16]	; (2748 <GPIO_EventOutputCmd+0x1c>)
    2738:	79fa      	ldrb	r2, [r7, #7]
    273a:	601a      	str	r2, [r3, #0]
}
    273c:	f107 070c 	add.w	r7, r7, #12
    2740:	46bd      	mov	sp, r7
    2742:	bc80      	pop	{r7}
    2744:	4770      	bx	lr
    2746:	bf00      	nop
    2748:	4220001c 	.word	0x4220001c

0000274c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    274c:	b480      	push	{r7}
    274e:	b087      	sub	sp, #28
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]
    2754:	460b      	mov	r3, r1
    2756:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    2758:	f04f 0300 	mov.w	r3, #0
    275c:	613b      	str	r3, [r7, #16]
    275e:	f04f 0300 	mov.w	r3, #0
    2762:	60fb      	str	r3, [r7, #12]
    2764:	f04f 0300 	mov.w	r3, #0
    2768:	617b      	str	r3, [r7, #20]
    276a:	f04f 0300 	mov.w	r3, #0
    276e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	2b00      	cmp	r3, #0
    2774:	da03      	bge.n	277e <GPIO_PinRemapConfig+0x32>
  {
    tmpreg = AFIO->MAPR2;
    2776:	4b35      	ldr	r3, [pc, #212]	; (284c <GPIO_PinRemapConfig+0x100>)
    2778:	69db      	ldr	r3, [r3, #28]
    277a:	617b      	str	r3, [r7, #20]
    277c:	e002      	b.n	2784 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    277e:	4b33      	ldr	r3, [pc, #204]	; (284c <GPIO_PinRemapConfig+0x100>)
    2780:	685b      	ldr	r3, [r3, #4]
    2782:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    278a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    278e:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2796:	ea4f 4313 	mov.w	r3, r3, lsr #16
    279a:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    27a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    27a6:	d10a      	bne.n	27be <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    27a8:	697b      	ldr	r3, [r7, #20]
    27aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    27ae:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    27b0:	4b26      	ldr	r3, [pc, #152]	; (284c <GPIO_PinRemapConfig+0x100>)
    27b2:	4a26      	ldr	r2, [pc, #152]	; (284c <GPIO_PinRemapConfig+0x100>)
    27b4:	6852      	ldr	r2, [r2, #4]
    27b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    27ba:	605a      	str	r2, [r3, #4]
    27bc:	e028      	b.n	2810 <GPIO_PinRemapConfig+0xc4>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    27c4:	2b00      	cmp	r3, #0
    27c6:	d011      	beq.n	27ec <GPIO_PinRemapConfig+0xa0>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    27c8:	68bb      	ldr	r3, [r7, #8]
    27ca:	f04f 0203 	mov.w	r2, #3
    27ce:	fa02 f303 	lsl.w	r3, r2, r3
    27d2:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    27d4:	68fb      	ldr	r3, [r7, #12]
    27d6:	ea6f 0303 	mvn.w	r3, r3
    27da:	697a      	ldr	r2, [r7, #20]
    27dc:	ea02 0303 	and.w	r3, r2, r3
    27e0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    27e2:	697b      	ldr	r3, [r7, #20]
    27e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    27e8:	617b      	str	r3, [r7, #20]
    27ea:	e011      	b.n	2810 <GPIO_PinRemapConfig+0xc4>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	ea4f 5353 	mov.w	r3, r3, lsr #21
    27f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    27f6:	693a      	ldr	r2, [r7, #16]
    27f8:	fa02 f303 	lsl.w	r3, r2, r3
    27fc:	ea6f 0303 	mvn.w	r3, r3
    2800:	697a      	ldr	r2, [r7, #20]
    2802:	ea02 0303 	and.w	r3, r2, r3
    2806:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    2808:	697b      	ldr	r3, [r7, #20]
    280a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    280e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    2810:	78fb      	ldrb	r3, [r7, #3]
    2812:	2b00      	cmp	r3, #0
    2814:	d00b      	beq.n	282e <GPIO_PinRemapConfig+0xe2>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	ea4f 5353 	mov.w	r3, r3, lsr #21
    281c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2820:	693a      	ldr	r2, [r7, #16]
    2822:	fa02 f303 	lsl.w	r3, r2, r3
    2826:	697a      	ldr	r2, [r7, #20]
    2828:	ea42 0303 	orr.w	r3, r2, r3
    282c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	2b00      	cmp	r3, #0
    2832:	da03      	bge.n	283c <GPIO_PinRemapConfig+0xf0>
  {
    AFIO->MAPR2 = tmpreg;
    2834:	4b05      	ldr	r3, [pc, #20]	; (284c <GPIO_PinRemapConfig+0x100>)
    2836:	697a      	ldr	r2, [r7, #20]
    2838:	61da      	str	r2, [r3, #28]
    283a:	e002      	b.n	2842 <GPIO_PinRemapConfig+0xf6>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    283c:	4b03      	ldr	r3, [pc, #12]	; (284c <GPIO_PinRemapConfig+0x100>)
    283e:	697a      	ldr	r2, [r7, #20]
    2840:	605a      	str	r2, [r3, #4]
  }  
}
    2842:	f107 071c 	add.w	r7, r7, #28
    2846:	46bd      	mov	sp, r7
    2848:	bc80      	pop	{r7}
    284a:	4770      	bx	lr
    284c:	40010000 	.word	0x40010000

00002850 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    2850:	b490      	push	{r4, r7}
    2852:	b084      	sub	sp, #16
    2854:	af00      	add	r7, sp, #0
    2856:	4602      	mov	r2, r0
    2858:	460b      	mov	r3, r1
    285a:	71fa      	strb	r2, [r7, #7]
    285c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    285e:	f04f 0300 	mov.w	r3, #0
    2862:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    2864:	79bb      	ldrb	r3, [r7, #6]
    2866:	f003 0303 	and.w	r3, r3, #3
    286a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    286e:	f04f 020f 	mov.w	r2, #15
    2872:	fa02 f303 	lsl.w	r3, r2, r3
    2876:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    2878:	4b1b      	ldr	r3, [pc, #108]	; (28e8 <GPIO_EXTILineConfig+0x98>)
    287a:	79ba      	ldrb	r2, [r7, #6]
    287c:	ea4f 0292 	mov.w	r2, r2, lsr #2
    2880:	b2d2      	uxtb	r2, r2
    2882:	4919      	ldr	r1, [pc, #100]	; (28e8 <GPIO_EXTILineConfig+0x98>)
    2884:	79b8      	ldrb	r0, [r7, #6]
    2886:	ea4f 0090 	mov.w	r0, r0, lsr #2
    288a:	b2c0      	uxtb	r0, r0
    288c:	f100 0002 	add.w	r0, r0, #2
    2890:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2894:	68f9      	ldr	r1, [r7, #12]
    2896:	ea6f 0101 	mvn.w	r1, r1
    289a:	ea00 0101 	and.w	r1, r0, r1
    289e:	f102 0202 	add.w	r2, r2, #2
    28a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    28a6:	4b10      	ldr	r3, [pc, #64]	; (28e8 <GPIO_EXTILineConfig+0x98>)
    28a8:	79ba      	ldrb	r2, [r7, #6]
    28aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
    28ae:	b2d2      	uxtb	r2, r2
    28b0:	490d      	ldr	r1, [pc, #52]	; (28e8 <GPIO_EXTILineConfig+0x98>)
    28b2:	79b8      	ldrb	r0, [r7, #6]
    28b4:	ea4f 0090 	mov.w	r0, r0, lsr #2
    28b8:	b2c0      	uxtb	r0, r0
    28ba:	f100 0002 	add.w	r0, r0, #2
    28be:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    28c2:	79fc      	ldrb	r4, [r7, #7]
    28c4:	79b9      	ldrb	r1, [r7, #6]
    28c6:	f001 0103 	and.w	r1, r1, #3
    28ca:	ea4f 0181 	mov.w	r1, r1, lsl #2
    28ce:	fa04 f101 	lsl.w	r1, r4, r1
    28d2:	ea40 0101 	orr.w	r1, r0, r1
    28d6:	f102 0202 	add.w	r2, r2, #2
    28da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    28de:	f107 0710 	add.w	r7, r7, #16
    28e2:	46bd      	mov	sp, r7
    28e4:	bc90      	pop	{r4, r7}
    28e6:	4770      	bx	lr
    28e8:	40010000 	.word	0x40010000

000028ec <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    28ec:	b480      	push	{r7}
    28ee:	b083      	sub	sp, #12
    28f0:	af00      	add	r7, sp, #0
    28f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    28f4:	4b03      	ldr	r3, [pc, #12]	; (2904 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    28f6:	687a      	ldr	r2, [r7, #4]
    28f8:	601a      	str	r2, [r3, #0]
}
    28fa:	f107 070c 	add.w	r7, r7, #12
    28fe:	46bd      	mov	sp, r7
    2900:	bc80      	pop	{r7}
    2902:	4770      	bx	lr
    2904:	422000dc 	.word	0x422000dc

00002908 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    2910:	687a      	ldr	r2, [r7, #4]
    2912:	4b2b      	ldr	r3, [pc, #172]	; (29c0 <USART_DeInit+0xb8>)
    2914:	429a      	cmp	r2, r3
    2916:	d10c      	bne.n	2932 <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    2918:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    291c:	f04f 0101 	mov.w	r1, #1
    2920:	f7ff fb98 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    2924:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2928:	f04f 0100 	mov.w	r1, #0
    292c:	f7ff fb92 	bl	2054 <RCC_APB2PeriphResetCmd>
    2930:	e042      	b.n	29b8 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    2932:	687a      	ldr	r2, [r7, #4]
    2934:	4b23      	ldr	r3, [pc, #140]	; (29c4 <USART_DeInit+0xbc>)
    2936:	429a      	cmp	r2, r3
    2938:	d10c      	bne.n	2954 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    293a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    293e:	f04f 0101 	mov.w	r1, #1
    2942:	f7ff fba9 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    2946:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    294a:	f04f 0100 	mov.w	r1, #0
    294e:	f7ff fba3 	bl	2098 <RCC_APB1PeriphResetCmd>
    2952:	e031      	b.n	29b8 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    2954:	687a      	ldr	r2, [r7, #4]
    2956:	4b1c      	ldr	r3, [pc, #112]	; (29c8 <USART_DeInit+0xc0>)
    2958:	429a      	cmp	r2, r3
    295a:	d10c      	bne.n	2976 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    295c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2960:	f04f 0101 	mov.w	r1, #1
    2964:	f7ff fb98 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    2968:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    296c:	f04f 0100 	mov.w	r1, #0
    2970:	f7ff fb92 	bl	2098 <RCC_APB1PeriphResetCmd>
    2974:	e020      	b.n	29b8 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    2976:	687a      	ldr	r2, [r7, #4]
    2978:	4b14      	ldr	r3, [pc, #80]	; (29cc <USART_DeInit+0xc4>)
    297a:	429a      	cmp	r2, r3
    297c:	d10c      	bne.n	2998 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    297e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2982:	f04f 0101 	mov.w	r1, #1
    2986:	f7ff fb87 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    298a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    298e:	f04f 0100 	mov.w	r1, #0
    2992:	f7ff fb81 	bl	2098 <RCC_APB1PeriphResetCmd>
    2996:	e00f      	b.n	29b8 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    2998:	687a      	ldr	r2, [r7, #4]
    299a:	4b0d      	ldr	r3, [pc, #52]	; (29d0 <USART_DeInit+0xc8>)
    299c:	429a      	cmp	r2, r3
    299e:	d10b      	bne.n	29b8 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    29a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    29a4:	f04f 0101 	mov.w	r1, #1
    29a8:	f7ff fb76 	bl	2098 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    29ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    29b0:	f04f 0100 	mov.w	r1, #0
    29b4:	f7ff fb70 	bl	2098 <RCC_APB1PeriphResetCmd>
    }
  }
}
    29b8:	f107 0708 	add.w	r7, r7, #8
    29bc:	46bd      	mov	sp, r7
    29be:	bd80      	pop	{r7, pc}
    29c0:	40013800 	.word	0x40013800
    29c4:	40004400 	.word	0x40004400
    29c8:	40004800 	.word	0x40004800
    29cc:	40004c00 	.word	0x40004c00
    29d0:	40005000 	.word	0x40005000

000029d4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b08c      	sub	sp, #48	; 0x30
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
    29dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    29de:	f04f 0300 	mov.w	r3, #0
    29e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    29e4:	f04f 0300 	mov.w	r3, #0
    29e8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    29ea:	f04f 0300 	mov.w	r3, #0
    29ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    29f0:	f04f 0300 	mov.w	r3, #0
    29f4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    29f6:	f04f 0300 	mov.w	r3, #0
    29fa:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	8a1b      	ldrh	r3, [r3, #16]
    2a04:	b29b      	uxth	r3, r3
    2a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    2a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a0a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    2a0e:	ea02 0303 	and.w	r3, r2, r3
    2a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    2a14:	683b      	ldr	r3, [r7, #0]
    2a16:	88db      	ldrh	r3, [r3, #6]
    2a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a1a:	ea42 0303 	orr.w	r3, r2, r3
    2a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a22:	b29a      	uxth	r2, r3
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	899b      	ldrh	r3, [r3, #12]
    2a2c:	b29b      	uxth	r3, r3
    2a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    2a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a32:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    2a36:	ea02 0303 	and.w	r3, r2, r3
    2a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    2a3c:	683b      	ldr	r3, [r7, #0]
    2a3e:	889a      	ldrh	r2, [r3, #4]
    2a40:	683b      	ldr	r3, [r7, #0]
    2a42:	891b      	ldrh	r3, [r3, #8]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    2a4a:	683b      	ldr	r3, [r7, #0]
    2a4c:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    2a4e:	ea42 0303 	orr.w	r3, r2, r3
    2a52:	b29b      	uxth	r3, r3
    2a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    2a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a5e:	b29a      	uxth	r2, r3
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	8a9b      	ldrh	r3, [r3, #20]
    2a68:	b29b      	uxth	r3, r3
    2a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    2a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a6e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    2a72:	ea02 0303 	and.w	r3, r2, r3
    2a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    2a78:	683b      	ldr	r3, [r7, #0]
    2a7a:	899b      	ldrh	r3, [r3, #12]
    2a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a7e:	ea42 0303 	orr.w	r3, r2, r3
    2a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    2a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a86:	b29a      	uxth	r2, r3
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    2a8c:	f107 0308 	add.w	r3, r7, #8
    2a90:	4618      	mov	r0, r3
    2a92:	f7ff f9bb 	bl	1e0c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    2a96:	69fa      	ldr	r2, [r7, #28]
    2a98:	4b38      	ldr	r3, [pc, #224]	; (2b7c <USART_Init+0x1a8>)
    2a9a:	429a      	cmp	r2, r3
    2a9c:	d102      	bne.n	2aa4 <USART_Init+0xd0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    2a9e:	697b      	ldr	r3, [r7, #20]
    2aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    2aa2:	e001      	b.n	2aa8 <USART_Init+0xd4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    2aa4:	693b      	ldr	r3, [r7, #16]
    2aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	899b      	ldrh	r3, [r3, #12]
    2aac:	b29b      	uxth	r3, r3
    2aae:	b29b      	uxth	r3, r3
    2ab0:	b21b      	sxth	r3, r3
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	da0f      	bge.n	2ad6 <USART_Init+0x102>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    2ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2ab8:	4613      	mov	r3, r2
    2aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2abe:	189b      	adds	r3, r3, r2
    2ac0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    2ac4:	189a      	adds	r2, r3, r2
    2ac6:	683b      	ldr	r3, [r7, #0]
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2ace:	fbb2 f3f3 	udiv	r3, r2, r3
    2ad2:	627b      	str	r3, [r7, #36]	; 0x24
    2ad4:	e00e      	b.n	2af4 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    2ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2ad8:	4613      	mov	r3, r2
    2ada:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ade:	189b      	adds	r3, r3, r2
    2ae0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    2ae4:	189a      	adds	r2, r3, r2
    2ae6:	683b      	ldr	r3, [r7, #0]
    2ae8:	681b      	ldr	r3, [r3, #0]
    2aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2aee:	fbb2 f3f3 	udiv	r3, r2, r3
    2af2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    2af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2af6:	4b22      	ldr	r3, [pc, #136]	; (2b80 <USART_Init+0x1ac>)
    2af8:	fba3 1302 	umull	r1, r3, r3, r2
    2afc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2b00:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2b04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	ea4f 1313 	mov.w	r3, r3, lsr #4
    2b0c:	f04f 0264 	mov.w	r2, #100	; 0x64
    2b10:	fb02 f303 	mul.w	r3, r2, r3
    2b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b16:	1ad3      	subs	r3, r2, r3
    2b18:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	899b      	ldrh	r3, [r3, #12]
    2b1e:	b29b      	uxth	r3, r3
    2b20:	b29b      	uxth	r3, r3
    2b22:	b21b      	sxth	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	da10      	bge.n	2b4a <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    2b28:	6a3b      	ldr	r3, [r7, #32]
    2b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    2b32:	4b13      	ldr	r3, [pc, #76]	; (2b80 <USART_Init+0x1ac>)
    2b34:	fba3 1302 	umull	r1, r3, r3, r2
    2b38:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2b3c:	f003 0307 	and.w	r3, r3, #7
    2b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b42:	ea42 0303 	orr.w	r3, r2, r3
    2b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b48:	e00f      	b.n	2b6a <USART_Init+0x196>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    2b4a:	6a3b      	ldr	r3, [r7, #32]
    2b4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2b50:	f103 0232 	add.w	r2, r3, #50	; 0x32
    2b54:	4b0a      	ldr	r3, [pc, #40]	; (2b80 <USART_Init+0x1ac>)
    2b56:	fba3 1302 	umull	r1, r3, r3, r2
    2b5a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2b5e:	f003 030f 	and.w	r3, r3, #15
    2b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b64:	ea42 0303 	orr.w	r3, r2, r3
    2b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    2b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b6c:	b29a      	uxth	r2, r3
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	811a      	strh	r2, [r3, #8]
}
    2b72:	f107 0730 	add.w	r7, r7, #48	; 0x30
    2b76:	46bd      	mov	sp, r7
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	bf00      	nop
    2b7c:	40013800 	.word	0x40013800
    2b80:	51eb851f 	.word	0x51eb851f

00002b84 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    2b84:	b480      	push	{r7}
    2b86:	b083      	sub	sp, #12
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    2b92:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	f04f 0200 	mov.w	r2, #0
    2b9a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	f04f 0200 	mov.w	r2, #0
    2ba2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	f04f 0200 	mov.w	r2, #0
    2baa:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	f04f 020c 	mov.w	r2, #12
    2bb2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	f04f 0200 	mov.w	r2, #0
    2bba:	819a      	strh	r2, [r3, #12]
}
    2bbc:	f107 070c 	add.w	r7, r7, #12
    2bc0:	46bd      	mov	sp, r7
    2bc2:	bc80      	pop	{r7}
    2bc4:	4770      	bx	lr
    2bc6:	bf00      	nop

00002bc8 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    2bc8:	b480      	push	{r7}
    2bca:	b085      	sub	sp, #20
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
    2bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    2bd2:	f04f 0300 	mov.w	r3, #0
    2bd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    2bd8:	687b      	ldr	r3, [r7, #4]
    2bda:	8a1b      	ldrh	r3, [r3, #16]
    2bdc:	b29b      	uxth	r3, r3
    2bde:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    2be0:	68fa      	ldr	r2, [r7, #12]
    2be2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    2be6:	ea02 0303 	and.w	r3, r2, r3
    2bea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    2bec:	683b      	ldr	r3, [r7, #0]
    2bee:	881a      	ldrh	r2, [r3, #0]
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    2bf4:	ea42 0303 	orr.w	r3, r2, r3
    2bf8:	b29a      	uxth	r2, r3
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	889b      	ldrh	r3, [r3, #4]
    2bfe:	ea42 0303 	orr.w	r3, r2, r3
    2c02:	b29a      	uxth	r2, r3
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	88db      	ldrh	r3, [r3, #6]
    2c08:	ea42 0303 	orr.w	r3, r2, r3
    2c0c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    2c0e:	68fa      	ldr	r2, [r7, #12]
    2c10:	ea42 0303 	orr.w	r3, r2, r3
    2c14:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	b29a      	uxth	r2, r3
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	821a      	strh	r2, [r3, #16]
}
    2c1e:	f107 0714 	add.w	r7, r7, #20
    2c22:	46bd      	mov	sp, r7
    2c24:	bc80      	pop	{r7}
    2c26:	4770      	bx	lr

00002c28 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    2c28:	b480      	push	{r7}
    2c2a:	b083      	sub	sp, #12
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	f04f 0200 	mov.w	r2, #0
    2c36:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	f04f 0200 	mov.w	r2, #0
    2c3e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	f04f 0200 	mov.w	r2, #0
    2c46:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	f04f 0200 	mov.w	r2, #0
    2c4e:	80da      	strh	r2, [r3, #6]
}
    2c50:	f107 070c 	add.w	r7, r7, #12
    2c54:	46bd      	mov	sp, r7
    2c56:	bc80      	pop	{r7}
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop

00002c5c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2c5c:	b480      	push	{r7}
    2c5e:	b083      	sub	sp, #12
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	460b      	mov	r3, r1
    2c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2c68:	78fb      	ldrb	r3, [r7, #3]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d008      	beq.n	2c80 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	899b      	ldrh	r3, [r3, #12]
    2c72:	b29b      	uxth	r3, r3
    2c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2c78:	b29a      	uxth	r2, r3
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	819a      	strh	r2, [r3, #12]
    2c7e:	e007      	b.n	2c90 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	899b      	ldrh	r3, [r3, #12]
    2c84:	b29b      	uxth	r3, r3
    2c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2c8a:	b29a      	uxth	r2, r3
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	819a      	strh	r2, [r3, #12]
  }
}
    2c90:	f107 070c 	add.w	r7, r7, #12
    2c94:	46bd      	mov	sp, r7
    2c96:	bc80      	pop	{r7}
    2c98:	4770      	bx	lr
    2c9a:	bf00      	nop

00002c9c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    2c9c:	b480      	push	{r7}
    2c9e:	b087      	sub	sp, #28
    2ca0:	af00      	add	r7, sp, #0
    2ca2:	6078      	str	r0, [r7, #4]
    2ca4:	4613      	mov	r3, r2
    2ca6:	460a      	mov	r2, r1
    2ca8:	807a      	strh	r2, [r7, #2]
    2caa:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    2cac:	f04f 0300 	mov.w	r3, #0
    2cb0:	613b      	str	r3, [r7, #16]
    2cb2:	f04f 0300 	mov.w	r3, #0
    2cb6:	60fb      	str	r3, [r7, #12]
    2cb8:	f04f 0300 	mov.w	r3, #0
    2cbc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    2cbe:	f04f 0300 	mov.w	r3, #0
    2cc2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2cc8:	887b      	ldrh	r3, [r7, #2]
    2cca:	b2db      	uxtb	r3, r3
    2ccc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2cd0:	b2db      	uxtb	r3, r3
    2cd2:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    2cd4:	887b      	ldrh	r3, [r7, #2]
    2cd6:	f003 031f 	and.w	r3, r3, #31
    2cda:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    2cdc:	68fb      	ldr	r3, [r7, #12]
    2cde:	f04f 0201 	mov.w	r2, #1
    2ce2:	fa02 f303 	lsl.w	r3, r2, r3
    2ce6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    2ce8:	693b      	ldr	r3, [r7, #16]
    2cea:	2b01      	cmp	r3, #1
    2cec:	d104      	bne.n	2cf8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    2cee:	697b      	ldr	r3, [r7, #20]
    2cf0:	f103 030c 	add.w	r3, r3, #12
    2cf4:	617b      	str	r3, [r7, #20]
    2cf6:	e00b      	b.n	2d10 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    2cf8:	693b      	ldr	r3, [r7, #16]
    2cfa:	2b02      	cmp	r3, #2
    2cfc:	d104      	bne.n	2d08 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    2cfe:	697b      	ldr	r3, [r7, #20]
    2d00:	f103 0310 	add.w	r3, r3, #16
    2d04:	617b      	str	r3, [r7, #20]
    2d06:	e003      	b.n	2d10 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	f103 0314 	add.w	r3, r3, #20
    2d0e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    2d10:	787b      	ldrb	r3, [r7, #1]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d007      	beq.n	2d26 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    2d16:	697b      	ldr	r3, [r7, #20]
    2d18:	697a      	ldr	r2, [r7, #20]
    2d1a:	6811      	ldr	r1, [r2, #0]
    2d1c:	68ba      	ldr	r2, [r7, #8]
    2d1e:	ea41 0202 	orr.w	r2, r1, r2
    2d22:	601a      	str	r2, [r3, #0]
    2d24:	e008      	b.n	2d38 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	697a      	ldr	r2, [r7, #20]
    2d2a:	6811      	ldr	r1, [r2, #0]
    2d2c:	68ba      	ldr	r2, [r7, #8]
    2d2e:	ea6f 0202 	mvn.w	r2, r2
    2d32:	ea01 0202 	and.w	r2, r1, r2
    2d36:	601a      	str	r2, [r3, #0]
  }
}
    2d38:	f107 071c 	add.w	r7, r7, #28
    2d3c:	46bd      	mov	sp, r7
    2d3e:	bc80      	pop	{r7}
    2d40:	4770      	bx	lr
    2d42:	bf00      	nop

00002d44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    2d44:	b480      	push	{r7}
    2d46:	b083      	sub	sp, #12
    2d48:	af00      	add	r7, sp, #0
    2d4a:	6078      	str	r0, [r7, #4]
    2d4c:	4613      	mov	r3, r2
    2d4e:	460a      	mov	r2, r1
    2d50:	807a      	strh	r2, [r7, #2]
    2d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    2d54:	787b      	ldrb	r3, [r7, #1]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d009      	beq.n	2d6e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	8a9b      	ldrh	r3, [r3, #20]
    2d5e:	b29a      	uxth	r2, r3
    2d60:	887b      	ldrh	r3, [r7, #2]
    2d62:	ea42 0303 	orr.w	r3, r2, r3
    2d66:	b29a      	uxth	r2, r3
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	829a      	strh	r2, [r3, #20]
    2d6c:	e00b      	b.n	2d86 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	8a9b      	ldrh	r3, [r3, #20]
    2d72:	b29a      	uxth	r2, r3
    2d74:	887b      	ldrh	r3, [r7, #2]
    2d76:	ea6f 0303 	mvn.w	r3, r3
    2d7a:	b29b      	uxth	r3, r3
    2d7c:	ea02 0303 	and.w	r3, r2, r3
    2d80:	b29a      	uxth	r2, r3
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	829a      	strh	r2, [r3, #20]
  }
}
    2d86:	f107 070c 	add.w	r7, r7, #12
    2d8a:	46bd      	mov	sp, r7
    2d8c:	bc80      	pop	{r7}
    2d8e:	4770      	bx	lr

00002d90 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    2d90:	b480      	push	{r7}
    2d92:	b083      	sub	sp, #12
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
    2d98:	460b      	mov	r3, r1
    2d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	8a1b      	ldrh	r3, [r3, #16]
    2da0:	b29b      	uxth	r3, r3
    2da2:	f023 030f 	bic.w	r3, r3, #15
    2da6:	b29a      	uxth	r2, r3
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	8a1b      	ldrh	r3, [r3, #16]
    2db0:	b29a      	uxth	r2, r3
    2db2:	78fb      	ldrb	r3, [r7, #3]
    2db4:	b29b      	uxth	r3, r3
    2db6:	ea42 0303 	orr.w	r3, r2, r3
    2dba:	b29a      	uxth	r2, r3
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	821a      	strh	r2, [r3, #16]
}
    2dc0:	f107 070c 	add.w	r7, r7, #12
    2dc4:	46bd      	mov	sp, r7
    2dc6:	bc80      	pop	{r7}
    2dc8:	4770      	bx	lr
    2dca:	bf00      	nop

00002dcc <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    2dcc:	b480      	push	{r7}
    2dce:	b083      	sub	sp, #12
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    2dd4:	460b      	mov	r3, r1
    2dd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	899b      	ldrh	r3, [r3, #12]
    2ddc:	b29b      	uxth	r3, r3
    2dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2de2:	b29a      	uxth	r2, r3
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	899b      	ldrh	r3, [r3, #12]
    2dec:	b29a      	uxth	r2, r3
    2dee:	887b      	ldrh	r3, [r7, #2]
    2df0:	ea42 0303 	orr.w	r3, r2, r3
    2df4:	b29a      	uxth	r2, r3
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	819a      	strh	r2, [r3, #12]
}
    2dfa:	f107 070c 	add.w	r7, r7, #12
    2dfe:	46bd      	mov	sp, r7
    2e00:	bc80      	pop	{r7}
    2e02:	4770      	bx	lr

00002e04 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2e04:	b480      	push	{r7}
    2e06:	b083      	sub	sp, #12
    2e08:	af00      	add	r7, sp, #0
    2e0a:	6078      	str	r0, [r7, #4]
    2e0c:	460b      	mov	r3, r1
    2e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    2e10:	78fb      	ldrb	r3, [r7, #3]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d008      	beq.n	2e28 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	899b      	ldrh	r3, [r3, #12]
    2e1a:	b29b      	uxth	r3, r3
    2e1c:	f043 0302 	orr.w	r3, r3, #2
    2e20:	b29a      	uxth	r2, r3
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	819a      	strh	r2, [r3, #12]
    2e26:	e007      	b.n	2e38 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	899b      	ldrh	r3, [r3, #12]
    2e2c:	b29b      	uxth	r3, r3
    2e2e:	f023 0302 	bic.w	r3, r3, #2
    2e32:	b29a      	uxth	r2, r3
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	819a      	strh	r2, [r3, #12]
  }
}
    2e38:	f107 070c 	add.w	r7, r7, #12
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bc80      	pop	{r7}
    2e40:	4770      	bx	lr
    2e42:	bf00      	nop

00002e44 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    2e44:	b480      	push	{r7}
    2e46:	b083      	sub	sp, #12
    2e48:	af00      	add	r7, sp, #0
    2e4a:	6078      	str	r0, [r7, #4]
    2e4c:	460b      	mov	r3, r1
    2e4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	8a1b      	ldrh	r3, [r3, #16]
    2e54:	b29b      	uxth	r3, r3
    2e56:	f023 0320 	bic.w	r3, r3, #32
    2e5a:	b29a      	uxth	r2, r3
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	8a1b      	ldrh	r3, [r3, #16]
    2e64:	b29a      	uxth	r2, r3
    2e66:	887b      	ldrh	r3, [r7, #2]
    2e68:	ea42 0303 	orr.w	r3, r2, r3
    2e6c:	b29a      	uxth	r2, r3
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	821a      	strh	r2, [r3, #16]
}
    2e72:	f107 070c 	add.w	r7, r7, #12
    2e76:	46bd      	mov	sp, r7
    2e78:	bc80      	pop	{r7}
    2e7a:	4770      	bx	lr

00002e7c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2e7c:	b480      	push	{r7}
    2e7e:	b083      	sub	sp, #12
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    2e84:	460b      	mov	r3, r1
    2e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2e88:	78fb      	ldrb	r3, [r7, #3]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d008      	beq.n	2ea0 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	8a1b      	ldrh	r3, [r3, #16]
    2e92:	b29b      	uxth	r3, r3
    2e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2e98:	b29a      	uxth	r2, r3
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	821a      	strh	r2, [r3, #16]
    2e9e:	e007      	b.n	2eb0 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    2ea0:	687b      	ldr	r3, [r7, #4]
    2ea2:	8a1b      	ldrh	r3, [r3, #16]
    2ea4:	b29b      	uxth	r3, r3
    2ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2eaa:	b29a      	uxth	r2, r3
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	821a      	strh	r2, [r3, #16]
  }
}
    2eb0:	f107 070c 	add.w	r7, r7, #12
    2eb4:	46bd      	mov	sp, r7
    2eb6:	bc80      	pop	{r7}
    2eb8:	4770      	bx	lr
    2eba:	bf00      	nop

00002ebc <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    2ebc:	b480      	push	{r7}
    2ebe:	b083      	sub	sp, #12
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
    2ec4:	460b      	mov	r3, r1
    2ec6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    2ec8:	887b      	ldrh	r3, [r7, #2]
    2eca:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    2ece:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    2ed2:	b29a      	uxth	r2, r3
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	809a      	strh	r2, [r3, #4]
}
    2ed8:	f107 070c 	add.w	r7, r7, #12
    2edc:	46bd      	mov	sp, r7
    2ede:	bc80      	pop	{r7}
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop

00002ee4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    2ee4:	b480      	push	{r7}
    2ee6:	b083      	sub	sp, #12
    2ee8:	af00      	add	r7, sp, #0
    2eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	889b      	ldrh	r3, [r3, #4]
    2ef0:	b29b      	uxth	r3, r3
    2ef2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    2ef6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    2efa:	b29b      	uxth	r3, r3
}
    2efc:	4618      	mov	r0, r3
    2efe:	f107 070c 	add.w	r7, r7, #12
    2f02:	46bd      	mov	sp, r7
    2f04:	bc80      	pop	{r7}
    2f06:	4770      	bx	lr

00002f08 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    2f08:	b480      	push	{r7}
    2f0a:	b083      	sub	sp, #12
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	899b      	ldrh	r3, [r3, #12]
    2f14:	b29b      	uxth	r3, r3
    2f16:	f043 0301 	orr.w	r3, r3, #1
    2f1a:	b29a      	uxth	r2, r3
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	819a      	strh	r2, [r3, #12]
}
    2f20:	f107 070c 	add.w	r7, r7, #12
    2f24:	46bd      	mov	sp, r7
    2f26:	bc80      	pop	{r7}
    2f28:	4770      	bx	lr
    2f2a:	bf00      	nop

00002f2c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    2f2c:	b480      	push	{r7}
    2f2e:	b083      	sub	sp, #12
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
    2f34:	460b      	mov	r3, r1
    2f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	8b1b      	ldrh	r3, [r3, #24]
    2f3c:	b29b      	uxth	r3, r3
    2f3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2f42:	b29a      	uxth	r2, r3
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	8b1b      	ldrh	r3, [r3, #24]
    2f4c:	b29a      	uxth	r2, r3
    2f4e:	78fb      	ldrb	r3, [r7, #3]
    2f50:	b29b      	uxth	r3, r3
    2f52:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2f56:	b29b      	uxth	r3, r3
    2f58:	ea42 0303 	orr.w	r3, r2, r3
    2f5c:	b29a      	uxth	r2, r3
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	831a      	strh	r2, [r3, #24]
}
    2f62:	f107 070c 	add.w	r7, r7, #12
    2f66:	46bd      	mov	sp, r7
    2f68:	bc80      	pop	{r7}
    2f6a:	4770      	bx	lr

00002f6c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    2f6c:	b480      	push	{r7}
    2f6e:	b083      	sub	sp, #12
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
    2f74:	460b      	mov	r3, r1
    2f76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	8b1b      	ldrh	r3, [r3, #24]
    2f7c:	b29b      	uxth	r3, r3
    2f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2f82:	b29a      	uxth	r2, r3
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	8b1b      	ldrh	r3, [r3, #24]
    2f8c:	b29a      	uxth	r2, r3
    2f8e:	78fb      	ldrb	r3, [r7, #3]
    2f90:	b29b      	uxth	r3, r3
    2f92:	ea42 0303 	orr.w	r3, r2, r3
    2f96:	b29a      	uxth	r2, r3
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	831a      	strh	r2, [r3, #24]
}
    2f9c:	f107 070c 	add.w	r7, r7, #12
    2fa0:	46bd      	mov	sp, r7
    2fa2:	bc80      	pop	{r7}
    2fa4:	4770      	bx	lr
    2fa6:	bf00      	nop

00002fa8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2fa8:	b480      	push	{r7}
    2faa:	b083      	sub	sp, #12
    2fac:	af00      	add	r7, sp, #0
    2fae:	6078      	str	r0, [r7, #4]
    2fb0:	460b      	mov	r3, r1
    2fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2fb4:	78fb      	ldrb	r3, [r7, #3]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d008      	beq.n	2fcc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	8a9b      	ldrh	r3, [r3, #20]
    2fbe:	b29b      	uxth	r3, r3
    2fc0:	f043 0320 	orr.w	r3, r3, #32
    2fc4:	b29a      	uxth	r2, r3
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	829a      	strh	r2, [r3, #20]
    2fca:	e007      	b.n	2fdc <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	8a9b      	ldrh	r3, [r3, #20]
    2fd0:	b29b      	uxth	r3, r3
    2fd2:	f023 0320 	bic.w	r3, r3, #32
    2fd6:	b29a      	uxth	r2, r3
    2fd8:	687b      	ldr	r3, [r7, #4]
    2fda:	829a      	strh	r2, [r3, #20]
  }
}
    2fdc:	f107 070c 	add.w	r7, r7, #12
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bc80      	pop	{r7}
    2fe4:	4770      	bx	lr
    2fe6:	bf00      	nop

00002fe8 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2fe8:	b480      	push	{r7}
    2fea:	b083      	sub	sp, #12
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    2ff0:	460b      	mov	r3, r1
    2ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ff4:	78fb      	ldrb	r3, [r7, #3]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d008      	beq.n	300c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	8a9b      	ldrh	r3, [r3, #20]
    2ffe:	b29b      	uxth	r3, r3
    3000:	f043 0310 	orr.w	r3, r3, #16
    3004:	b29a      	uxth	r2, r3
    3006:	687b      	ldr	r3, [r7, #4]
    3008:	829a      	strh	r2, [r3, #20]
    300a:	e007      	b.n	301c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	8a9b      	ldrh	r3, [r3, #20]
    3010:	b29b      	uxth	r3, r3
    3012:	f023 0310 	bic.w	r3, r3, #16
    3016:	b29a      	uxth	r2, r3
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	829a      	strh	r2, [r3, #20]
  }
}
    301c:	f107 070c 	add.w	r7, r7, #12
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	bf00      	nop

00003028 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b083      	sub	sp, #12
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
    3030:	460b      	mov	r3, r1
    3032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	78fb      	ldrb	r3, [r7, #3]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    303a:	687b      	ldr	r3, [r7, #4]
    303c:	8a9b      	ldrh	r3, [r3, #20]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0308 	orr.w	r3, r3, #8
    3044:	b29a      	uxth	r2, r3
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	829a      	strh	r2, [r3, #20]
    304a:	e007      	b.n	305c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	8a9b      	ldrh	r3, [r3, #20]
    3050:	b29b      	uxth	r3, r3
    3052:	f023 0308 	bic.w	r3, r3, #8
    3056:	b29a      	uxth	r2, r3
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	829a      	strh	r2, [r3, #20]
  }
}
    305c:	f107 070c 	add.w	r7, r7, #12
    3060:	46bd      	mov	sp, r7
    3062:	bc80      	pop	{r7}
    3064:	4770      	bx	lr
    3066:	bf00      	nop

00003068 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3068:	b480      	push	{r7}
    306a:	b083      	sub	sp, #12
    306c:	af00      	add	r7, sp, #0
    306e:	6078      	str	r0, [r7, #4]
    3070:	460b      	mov	r3, r1
    3072:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3074:	78fb      	ldrb	r3, [r7, #3]
    3076:	2b00      	cmp	r3, #0
    3078:	d00a      	beq.n	3090 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	899b      	ldrh	r3, [r3, #12]
    307e:	b29b      	uxth	r3, r3
    3080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3088:	b29a      	uxth	r2, r3
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	819a      	strh	r2, [r3, #12]
    308e:	e009      	b.n	30a4 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	899b      	ldrh	r3, [r3, #12]
    3094:	b29b      	uxth	r3, r3
    3096:	ea4f 4343 	mov.w	r3, r3, lsl #17
    309a:	ea4f 4353 	mov.w	r3, r3, lsr #17
    309e:	b29a      	uxth	r2, r3
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	819a      	strh	r2, [r3, #12]
  }
}
    30a4:	f107 070c 	add.w	r7, r7, #12
    30a8:	46bd      	mov	sp, r7
    30aa:	bc80      	pop	{r7}
    30ac:	4770      	bx	lr
    30ae:	bf00      	nop

000030b0 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    30b0:	b480      	push	{r7}
    30b2:	b083      	sub	sp, #12
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
    30b8:	460b      	mov	r3, r1
    30ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30bc:	78fb      	ldrb	r3, [r7, #3]
    30be:	2b00      	cmp	r3, #0
    30c0:	d008      	beq.n	30d4 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	8a9b      	ldrh	r3, [r3, #20]
    30c6:	b29b      	uxth	r3, r3
    30c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    30cc:	b29a      	uxth	r2, r3
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	829a      	strh	r2, [r3, #20]
    30d2:	e007      	b.n	30e4 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	8a9b      	ldrh	r3, [r3, #20]
    30d8:	b29b      	uxth	r3, r3
    30da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    30de:	b29a      	uxth	r2, r3
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	829a      	strh	r2, [r3, #20]
  }
}
    30e4:	f107 070c 	add.w	r7, r7, #12
    30e8:	46bd      	mov	sp, r7
    30ea:	bc80      	pop	{r7}
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop

000030f0 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    30f0:	b480      	push	{r7}
    30f2:	b083      	sub	sp, #12
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	460b      	mov	r3, r1
    30fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	8a9b      	ldrh	r3, [r3, #20]
    3100:	b29b      	uxth	r3, r3
    3102:	f023 0304 	bic.w	r3, r3, #4
    3106:	b29a      	uxth	r2, r3
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	8a9b      	ldrh	r3, [r3, #20]
    3110:	b29a      	uxth	r2, r3
    3112:	887b      	ldrh	r3, [r7, #2]
    3114:	ea42 0303 	orr.w	r3, r2, r3
    3118:	b29a      	uxth	r2, r3
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	829a      	strh	r2, [r3, #20]
}
    311e:	f107 070c 	add.w	r7, r7, #12
    3122:	46bd      	mov	sp, r7
    3124:	bc80      	pop	{r7}
    3126:	4770      	bx	lr

00003128 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3128:	b480      	push	{r7}
    312a:	b083      	sub	sp, #12
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
    3130:	460b      	mov	r3, r1
    3132:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    3134:	78fb      	ldrb	r3, [r7, #3]
    3136:	2b00      	cmp	r3, #0
    3138:	d008      	beq.n	314c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	8a9b      	ldrh	r3, [r3, #20]
    313e:	b29b      	uxth	r3, r3
    3140:	f043 0302 	orr.w	r3, r3, #2
    3144:	b29a      	uxth	r2, r3
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	829a      	strh	r2, [r3, #20]
    314a:	e007      	b.n	315c <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	8a9b      	ldrh	r3, [r3, #20]
    3150:	b29b      	uxth	r3, r3
    3152:	f023 0302 	bic.w	r3, r3, #2
    3156:	b29a      	uxth	r2, r3
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	829a      	strh	r2, [r3, #20]
  }
}
    315c:	f107 070c 	add.w	r7, r7, #12
    3160:	46bd      	mov	sp, r7
    3162:	bc80      	pop	{r7}
    3164:	4770      	bx	lr
    3166:	bf00      	nop

00003168 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    3168:	b480      	push	{r7}
    316a:	b085      	sub	sp, #20
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    3170:	460b      	mov	r3, r1
    3172:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    3174:	f04f 0300 	mov.w	r3, #0
    3178:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	881b      	ldrh	r3, [r3, #0]
    317e:	b29a      	uxth	r2, r3
    3180:	887b      	ldrh	r3, [r7, #2]
    3182:	ea02 0303 	and.w	r3, r2, r3
    3186:	b29b      	uxth	r3, r3
    3188:	2b00      	cmp	r3, #0
    318a:	d003      	beq.n	3194 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    318c:	f04f 0301 	mov.w	r3, #1
    3190:	73fb      	strb	r3, [r7, #15]
    3192:	e002      	b.n	319a <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    3194:	f04f 0300 	mov.w	r3, #0
    3198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    319a:	7bfb      	ldrb	r3, [r7, #15]
}
    319c:	4618      	mov	r0, r3
    319e:	f107 0714 	add.w	r7, r7, #20
    31a2:	46bd      	mov	sp, r7
    31a4:	bc80      	pop	{r7}
    31a6:	4770      	bx	lr

000031a8 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    31a8:	b480      	push	{r7}
    31aa:	b083      	sub	sp, #12
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    31b0:	460b      	mov	r3, r1
    31b2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    31b4:	887b      	ldrh	r3, [r7, #2]
    31b6:	ea6f 0303 	mvn.w	r3, r3
    31ba:	b29a      	uxth	r2, r3
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	801a      	strh	r2, [r3, #0]
}
    31c0:	f107 070c 	add.w	r7, r7, #12
    31c4:	46bd      	mov	sp, r7
    31c6:	bc80      	pop	{r7}
    31c8:	4770      	bx	lr
    31ca:	bf00      	nop

000031cc <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    31cc:	b480      	push	{r7}
    31ce:	b087      	sub	sp, #28
    31d0:	af00      	add	r7, sp, #0
    31d2:	6078      	str	r0, [r7, #4]
    31d4:	460b      	mov	r3, r1
    31d6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    31d8:	f04f 0300 	mov.w	r3, #0
    31dc:	60fb      	str	r3, [r7, #12]
    31de:	f04f 0300 	mov.w	r3, #0
    31e2:	617b      	str	r3, [r7, #20]
    31e4:	f04f 0300 	mov.w	r3, #0
    31e8:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    31ea:	f04f 0300 	mov.w	r3, #0
    31ee:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    31f0:	887b      	ldrh	r3, [r7, #2]
    31f2:	b2db      	uxtb	r3, r3
    31f4:	ea4f 1353 	mov.w	r3, r3, lsr #5
    31f8:	b2db      	uxtb	r3, r3
    31fa:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    31fc:	887b      	ldrh	r3, [r7, #2]
    31fe:	f003 031f 	and.w	r3, r3, #31
    3202:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    3204:	697b      	ldr	r3, [r7, #20]
    3206:	f04f 0201 	mov.w	r2, #1
    320a:	fa02 f303 	lsl.w	r3, r2, r3
    320e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    3210:	68bb      	ldr	r3, [r7, #8]
    3212:	2b01      	cmp	r3, #1
    3214:	d107      	bne.n	3226 <USART_GetITStatus+0x5a>
  {
    itmask &= USARTx->CR1;
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	899b      	ldrh	r3, [r3, #12]
    321a:	b29b      	uxth	r3, r3
    321c:	697a      	ldr	r2, [r7, #20]
    321e:	ea02 0303 	and.w	r3, r2, r3
    3222:	617b      	str	r3, [r7, #20]
    3224:	e011      	b.n	324a <USART_GetITStatus+0x7e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    3226:	68bb      	ldr	r3, [r7, #8]
    3228:	2b02      	cmp	r3, #2
    322a:	d107      	bne.n	323c <USART_GetITStatus+0x70>
  {
    itmask &= USARTx->CR2;
    322c:	687b      	ldr	r3, [r7, #4]
    322e:	8a1b      	ldrh	r3, [r3, #16]
    3230:	b29b      	uxth	r3, r3
    3232:	697a      	ldr	r2, [r7, #20]
    3234:	ea02 0303 	and.w	r3, r2, r3
    3238:	617b      	str	r3, [r7, #20]
    323a:	e006      	b.n	324a <USART_GetITStatus+0x7e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	8a9b      	ldrh	r3, [r3, #20]
    3240:	b29b      	uxth	r3, r3
    3242:	697a      	ldr	r2, [r7, #20]
    3244:	ea02 0303 	and.w	r3, r2, r3
    3248:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    324a:	887b      	ldrh	r3, [r7, #2]
    324c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3250:	b29b      	uxth	r3, r3
    3252:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    3254:	68fb      	ldr	r3, [r7, #12]
    3256:	f04f 0201 	mov.w	r2, #1
    325a:	fa02 f303 	lsl.w	r3, r2, r3
    325e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	881b      	ldrh	r3, [r3, #0]
    3264:	b29b      	uxth	r3, r3
    3266:	68fa      	ldr	r2, [r7, #12]
    3268:	ea02 0303 	and.w	r3, r2, r3
    326c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    326e:	697b      	ldr	r3, [r7, #20]
    3270:	2b00      	cmp	r3, #0
    3272:	d006      	beq.n	3282 <USART_GetITStatus+0xb6>
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	2b00      	cmp	r3, #0
    3278:	d003      	beq.n	3282 <USART_GetITStatus+0xb6>
  {
    bitstatus = SET;
    327a:	f04f 0301 	mov.w	r3, #1
    327e:	74fb      	strb	r3, [r7, #19]
    3280:	e002      	b.n	3288 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
    3282:	f04f 0300 	mov.w	r3, #0
    3286:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    3288:	7cfb      	ldrb	r3, [r7, #19]
}
    328a:	4618      	mov	r0, r3
    328c:	f107 071c 	add.w	r7, r7, #28
    3290:	46bd      	mov	sp, r7
    3292:	bc80      	pop	{r7}
    3294:	4770      	bx	lr
    3296:	bf00      	nop

00003298 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    3298:	b480      	push	{r7}
    329a:	b085      	sub	sp, #20
    329c:	af00      	add	r7, sp, #0
    329e:	6078      	str	r0, [r7, #4]
    32a0:	460b      	mov	r3, r1
    32a2:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    32a4:	f04f 0300 	mov.w	r3, #0
    32a8:	81fb      	strh	r3, [r7, #14]
    32aa:	f04f 0300 	mov.w	r3, #0
    32ae:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    32b0:	887b      	ldrh	r3, [r7, #2]
    32b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    32b6:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    32b8:	89fb      	ldrh	r3, [r7, #14]
    32ba:	f04f 0201 	mov.w	r2, #1
    32be:	fa02 f303 	lsl.w	r3, r2, r3
    32c2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    32c4:	89bb      	ldrh	r3, [r7, #12]
    32c6:	ea6f 0303 	mvn.w	r3, r3
    32ca:	b29a      	uxth	r2, r3
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	801a      	strh	r2, [r3, #0]
}
    32d0:	f107 0714 	add.w	r7, r7, #20
    32d4:	46bd      	mov	sp, r7
    32d6:	bc80      	pop	{r7}
    32d8:	4770      	bx	lr
    32da:	bf00      	nop

000032dc <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    32dc:	b480      	push	{r7}
    32de:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    32e0:	4b0a      	ldr	r3, [pc, #40]	; (330c <EXTI_DeInit+0x30>)
    32e2:	f04f 0200 	mov.w	r2, #0
    32e6:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    32e8:	4b08      	ldr	r3, [pc, #32]	; (330c <EXTI_DeInit+0x30>)
    32ea:	f04f 0200 	mov.w	r2, #0
    32ee:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    32f0:	4b06      	ldr	r3, [pc, #24]	; (330c <EXTI_DeInit+0x30>)
    32f2:	f04f 0200 	mov.w	r2, #0
    32f6:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    32f8:	4b04      	ldr	r3, [pc, #16]	; (330c <EXTI_DeInit+0x30>)
    32fa:	f04f 0200 	mov.w	r2, #0
    32fe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    3300:	4b02      	ldr	r3, [pc, #8]	; (330c <EXTI_DeInit+0x30>)
    3302:	4a03      	ldr	r2, [pc, #12]	; (3310 <EXTI_DeInit+0x34>)
    3304:	615a      	str	r2, [r3, #20]
}
    3306:	46bd      	mov	sp, r7
    3308:	bc80      	pop	{r7}
    330a:	4770      	bx	lr
    330c:	40010400 	.word	0x40010400
    3310:	000fffff 	.word	0x000fffff

00003314 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    3314:	b480      	push	{r7}
    3316:	b085      	sub	sp, #20
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    331c:	f04f 0300 	mov.w	r3, #0
    3320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    3322:	4b3a      	ldr	r3, [pc, #232]	; (340c <EXTI_Init+0xf8>)
    3324:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	799b      	ldrb	r3, [r3, #6]
    332a:	2b00      	cmp	r3, #0
    332c:	d059      	beq.n	33e2 <EXTI_Init+0xce>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    332e:	4b37      	ldr	r3, [pc, #220]	; (340c <EXTI_Init+0xf8>)
    3330:	4a36      	ldr	r2, [pc, #216]	; (340c <EXTI_Init+0xf8>)
    3332:	6811      	ldr	r1, [r2, #0]
    3334:	687a      	ldr	r2, [r7, #4]
    3336:	6812      	ldr	r2, [r2, #0]
    3338:	ea6f 0202 	mvn.w	r2, r2
    333c:	ea01 0202 	and.w	r2, r1, r2
    3340:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    3342:	4b32      	ldr	r3, [pc, #200]	; (340c <EXTI_Init+0xf8>)
    3344:	4a31      	ldr	r2, [pc, #196]	; (340c <EXTI_Init+0xf8>)
    3346:	6851      	ldr	r1, [r2, #4]
    3348:	687a      	ldr	r2, [r7, #4]
    334a:	6812      	ldr	r2, [r2, #0]
    334c:	ea6f 0202 	mvn.w	r2, r2
    3350:	ea01 0202 	and.w	r2, r1, r2
    3354:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	791b      	ldrb	r3, [r3, #4]
    335a:	68fa      	ldr	r2, [r7, #12]
    335c:	18d3      	adds	r3, r2, r3
    335e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    3360:	68fb      	ldr	r3, [r7, #12]
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	6811      	ldr	r1, [r2, #0]
    3366:	687a      	ldr	r2, [r7, #4]
    3368:	6812      	ldr	r2, [r2, #0]
    336a:	ea41 0202 	orr.w	r2, r1, r2
    336e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    3370:	4b26      	ldr	r3, [pc, #152]	; (340c <EXTI_Init+0xf8>)
    3372:	4a26      	ldr	r2, [pc, #152]	; (340c <EXTI_Init+0xf8>)
    3374:	6891      	ldr	r1, [r2, #8]
    3376:	687a      	ldr	r2, [r7, #4]
    3378:	6812      	ldr	r2, [r2, #0]
    337a:	ea6f 0202 	mvn.w	r2, r2
    337e:	ea01 0202 	and.w	r2, r1, r2
    3382:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    3384:	4b21      	ldr	r3, [pc, #132]	; (340c <EXTI_Init+0xf8>)
    3386:	4a21      	ldr	r2, [pc, #132]	; (340c <EXTI_Init+0xf8>)
    3388:	68d1      	ldr	r1, [r2, #12]
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	6812      	ldr	r2, [r2, #0]
    338e:	ea6f 0202 	mvn.w	r2, r2
    3392:	ea01 0202 	and.w	r2, r1, r2
    3396:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	795b      	ldrb	r3, [r3, #5]
    339c:	2b10      	cmp	r3, #16
    339e:	d110      	bne.n	33c2 <EXTI_Init+0xae>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    33a0:	4b1a      	ldr	r3, [pc, #104]	; (340c <EXTI_Init+0xf8>)
    33a2:	4a1a      	ldr	r2, [pc, #104]	; (340c <EXTI_Init+0xf8>)
    33a4:	6891      	ldr	r1, [r2, #8]
    33a6:	687a      	ldr	r2, [r7, #4]
    33a8:	6812      	ldr	r2, [r2, #0]
    33aa:	ea41 0202 	orr.w	r2, r1, r2
    33ae:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    33b0:	4b16      	ldr	r3, [pc, #88]	; (340c <EXTI_Init+0xf8>)
    33b2:	4a16      	ldr	r2, [pc, #88]	; (340c <EXTI_Init+0xf8>)
    33b4:	68d1      	ldr	r1, [r2, #12]
    33b6:	687a      	ldr	r2, [r7, #4]
    33b8:	6812      	ldr	r2, [r2, #0]
    33ba:	ea41 0202 	orr.w	r2, r1, r2
    33be:	60da      	str	r2, [r3, #12]
    33c0:	e01e      	b.n	3400 <EXTI_Init+0xec>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    33c2:	4b12      	ldr	r3, [pc, #72]	; (340c <EXTI_Init+0xf8>)
    33c4:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	795b      	ldrb	r3, [r3, #5]
    33ca:	68fa      	ldr	r2, [r7, #12]
    33cc:	18d3      	adds	r3, r2, r3
    33ce:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    33d0:	68fb      	ldr	r3, [r7, #12]
    33d2:	68fa      	ldr	r2, [r7, #12]
    33d4:	6811      	ldr	r1, [r2, #0]
    33d6:	687a      	ldr	r2, [r7, #4]
    33d8:	6812      	ldr	r2, [r2, #0]
    33da:	ea41 0202 	orr.w	r2, r1, r2
    33de:	601a      	str	r2, [r3, #0]
    33e0:	e00e      	b.n	3400 <EXTI_Init+0xec>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	791b      	ldrb	r3, [r3, #4]
    33e6:	68fa      	ldr	r2, [r7, #12]
    33e8:	18d3      	adds	r3, r2, r3
    33ea:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    33ec:	68fb      	ldr	r3, [r7, #12]
    33ee:	68fa      	ldr	r2, [r7, #12]
    33f0:	6811      	ldr	r1, [r2, #0]
    33f2:	687a      	ldr	r2, [r7, #4]
    33f4:	6812      	ldr	r2, [r2, #0]
    33f6:	ea6f 0202 	mvn.w	r2, r2
    33fa:	ea01 0202 	and.w	r2, r1, r2
    33fe:	601a      	str	r2, [r3, #0]
  }
}
    3400:	f107 0714 	add.w	r7, r7, #20
    3404:	46bd      	mov	sp, r7
    3406:	bc80      	pop	{r7}
    3408:	4770      	bx	lr
    340a:	bf00      	nop
    340c:	40010400 	.word	0x40010400

00003410 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    3410:	b480      	push	{r7}
    3412:	b083      	sub	sp, #12
    3414:	af00      	add	r7, sp, #0
    3416:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	f04f 0200 	mov.w	r2, #0
    341e:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    3420:	687b      	ldr	r3, [r7, #4]
    3422:	f04f 0200 	mov.w	r2, #0
    3426:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	f04f 020c 	mov.w	r2, #12
    342e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    3430:	687b      	ldr	r3, [r7, #4]
    3432:	f04f 0200 	mov.w	r2, #0
    3436:	719a      	strb	r2, [r3, #6]
}
    3438:	f107 070c 	add.w	r7, r7, #12
    343c:	46bd      	mov	sp, r7
    343e:	bc80      	pop	{r7}
    3440:	4770      	bx	lr
    3442:	bf00      	nop

00003444 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    3444:	b480      	push	{r7}
    3446:	b083      	sub	sp, #12
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    344c:	4b05      	ldr	r3, [pc, #20]	; (3464 <EXTI_GenerateSWInterrupt+0x20>)
    344e:	4a05      	ldr	r2, [pc, #20]	; (3464 <EXTI_GenerateSWInterrupt+0x20>)
    3450:	6911      	ldr	r1, [r2, #16]
    3452:	687a      	ldr	r2, [r7, #4]
    3454:	ea41 0202 	orr.w	r2, r1, r2
    3458:	611a      	str	r2, [r3, #16]
}
    345a:	f107 070c 	add.w	r7, r7, #12
    345e:	46bd      	mov	sp, r7
    3460:	bc80      	pop	{r7}
    3462:	4770      	bx	lr
    3464:	40010400 	.word	0x40010400

00003468 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    3468:	b480      	push	{r7}
    346a:	b085      	sub	sp, #20
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3470:	f04f 0300 	mov.w	r3, #0
    3474:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    3476:	4b0a      	ldr	r3, [pc, #40]	; (34a0 <EXTI_GetFlagStatus+0x38>)
    3478:	695a      	ldr	r2, [r3, #20]
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	ea02 0303 	and.w	r3, r2, r3
    3480:	2b00      	cmp	r3, #0
    3482:	d003      	beq.n	348c <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    3484:	f04f 0301 	mov.w	r3, #1
    3488:	73fb      	strb	r3, [r7, #15]
    348a:	e002      	b.n	3492 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    348c:	f04f 0300 	mov.w	r3, #0
    3490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    3492:	7bfb      	ldrb	r3, [r7, #15]
}
    3494:	4618      	mov	r0, r3
    3496:	f107 0714 	add.w	r7, r7, #20
    349a:	46bd      	mov	sp, r7
    349c:	bc80      	pop	{r7}
    349e:	4770      	bx	lr
    34a0:	40010400 	.word	0x40010400

000034a4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    34a4:	b480      	push	{r7}
    34a6:	b083      	sub	sp, #12
    34a8:	af00      	add	r7, sp, #0
    34aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    34ac:	4b03      	ldr	r3, [pc, #12]	; (34bc <EXTI_ClearFlag+0x18>)
    34ae:	687a      	ldr	r2, [r7, #4]
    34b0:	615a      	str	r2, [r3, #20]
}
    34b2:	f107 070c 	add.w	r7, r7, #12
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr
    34bc:	40010400 	.word	0x40010400

000034c0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    34c0:	b480      	push	{r7}
    34c2:	b085      	sub	sp, #20
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    34c8:	f04f 0300 	mov.w	r3, #0
    34cc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    34ce:	f04f 0300 	mov.w	r3, #0
    34d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    34d4:	4b0e      	ldr	r3, [pc, #56]	; (3510 <EXTI_GetITStatus+0x50>)
    34d6:	681a      	ldr	r2, [r3, #0]
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	ea02 0303 	and.w	r3, r2, r3
    34de:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    34e0:	4b0b      	ldr	r3, [pc, #44]	; (3510 <EXTI_GetITStatus+0x50>)
    34e2:	695a      	ldr	r2, [r3, #20]
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	ea02 0303 	and.w	r3, r2, r3
    34ea:	2b00      	cmp	r3, #0
    34ec:	d006      	beq.n	34fc <EXTI_GetITStatus+0x3c>
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d003      	beq.n	34fc <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    34f4:	f04f 0301 	mov.w	r3, #1
    34f8:	73fb      	strb	r3, [r7, #15]
    34fa:	e002      	b.n	3502 <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    34fc:	f04f 0300 	mov.w	r3, #0
    3500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    3502:	7bfb      	ldrb	r3, [r7, #15]
}
    3504:	4618      	mov	r0, r3
    3506:	f107 0714 	add.w	r7, r7, #20
    350a:	46bd      	mov	sp, r7
    350c:	bc80      	pop	{r7}
    350e:	4770      	bx	lr
    3510:	40010400 	.word	0x40010400

00003514 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    3514:	b480      	push	{r7}
    3516:	b083      	sub	sp, #12
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    351c:	4b03      	ldr	r3, [pc, #12]	; (352c <EXTI_ClearITPendingBit+0x18>)
    351e:	687a      	ldr	r2, [r7, #4]
    3520:	615a      	str	r2, [r3, #20]
}
    3522:	f107 070c 	add.w	r7, r7, #12
    3526:	46bd      	mov	sp, r7
    3528:	bc80      	pop	{r7}
    352a:	4770      	bx	lr
    352c:	40010400 	.word	0x40010400

00003530 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    3530:	b580      	push	{r7, lr}
    3532:	b082      	sub	sp, #8
    3534:	af00      	add	r7, sp, #0
    3536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    3538:	687a      	ldr	r2, [r7, #4]
    353a:	4b1a      	ldr	r3, [pc, #104]	; (35a4 <ADC_DeInit+0x74>)
    353c:	429a      	cmp	r2, r3
    353e:	d10c      	bne.n	355a <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    3540:	f44f 7000 	mov.w	r0, #512	; 0x200
    3544:	f04f 0101 	mov.w	r1, #1
    3548:	f7fe fd84 	bl	2054 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    354c:	f44f 7000 	mov.w	r0, #512	; 0x200
    3550:	f04f 0100 	mov.w	r1, #0
    3554:	f7fe fd7e 	bl	2054 <RCC_APB2PeriphResetCmd>
    3558:	e020      	b.n	359c <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
    355a:	687a      	ldr	r2, [r7, #4]
    355c:	4b12      	ldr	r3, [pc, #72]	; (35a8 <ADC_DeInit+0x78>)
    355e:	429a      	cmp	r2, r3
    3560:	d10c      	bne.n	357c <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    3562:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3566:	f04f 0101 	mov.w	r1, #1
    356a:	f7fe fd73 	bl	2054 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    356e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3572:	f04f 0100 	mov.w	r1, #0
    3576:	f7fe fd6d 	bl	2054 <RCC_APB2PeriphResetCmd>
    357a:	e00f      	b.n	359c <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
    357c:	687a      	ldr	r2, [r7, #4]
    357e:	4b0b      	ldr	r3, [pc, #44]	; (35ac <ADC_DeInit+0x7c>)
    3580:	429a      	cmp	r2, r3
    3582:	d10b      	bne.n	359c <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    3584:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3588:	f04f 0101 	mov.w	r1, #1
    358c:	f7fe fd62 	bl	2054 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    3590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3594:	f04f 0100 	mov.w	r1, #0
    3598:	f7fe fd5c 	bl	2054 <RCC_APB2PeriphResetCmd>
    }
  }
}
    359c:	f107 0708 	add.w	r7, r7, #8
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}
    35a4:	40012400 	.word	0x40012400
    35a8:	40012800 	.word	0x40012800
    35ac:	40013c00 	.word	0x40013c00

000035b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    35b0:	b480      	push	{r7}
    35b2:	b085      	sub	sp, #20
    35b4:	af00      	add	r7, sp, #0
    35b6:	6078      	str	r0, [r7, #4]
    35b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    35ba:	f04f 0300 	mov.w	r3, #0
    35be:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    35c0:	f04f 0300 	mov.w	r3, #0
    35c4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	685b      	ldr	r3, [r3, #4]
    35ca:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    35d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    35d6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    35d8:	683b      	ldr	r3, [r7, #0]
    35da:	681a      	ldr	r2, [r3, #0]
    35dc:	683b      	ldr	r3, [r7, #0]
    35de:	791b      	ldrb	r3, [r3, #4]
    35e0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    35e4:	ea42 0303 	orr.w	r3, r2, r3
    35e8:	68fa      	ldr	r2, [r7, #12]
    35ea:	ea42 0303 	orr.w	r3, r2, r3
    35ee:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	68fa      	ldr	r2, [r7, #12]
    35f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	689b      	ldr	r3, [r3, #8]
    35fa:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    35fc:	68fa      	ldr	r2, [r7, #12]
    35fe:	4b1a      	ldr	r3, [pc, #104]	; (3668 <ADC_Init+0xb8>)
    3600:	ea02 0303 	and.w	r3, r2, r3
    3604:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    3606:	683b      	ldr	r3, [r7, #0]
    3608:	68da      	ldr	r2, [r3, #12]
    360a:	683b      	ldr	r3, [r7, #0]
    360c:	689b      	ldr	r3, [r3, #8]
    360e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	795b      	ldrb	r3, [r3, #5]
    3614:	ea4f 0343 	mov.w	r3, r3, lsl #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    3618:	ea42 0303 	orr.w	r3, r2, r3
    361c:	68fa      	ldr	r2, [r7, #12]
    361e:	ea42 0303 	orr.w	r3, r2, r3
    3622:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	68fa      	ldr	r2, [r7, #12]
    3628:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    362e:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    3630:	68fb      	ldr	r3, [r7, #12]
    3632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    3636:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    3638:	683b      	ldr	r3, [r7, #0]
    363a:	7c1b      	ldrb	r3, [r3, #16]
    363c:	f103 33ff 	add.w	r3, r3, #4294967295
    3640:	b2da      	uxtb	r2, r3
    3642:	7afb      	ldrb	r3, [r7, #11]
    3644:	ea42 0303 	orr.w	r3, r2, r3
    3648:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    364a:	7afb      	ldrb	r3, [r7, #11]
    364c:	ea4f 5303 	mov.w	r3, r3, lsl #20
    3650:	68fa      	ldr	r2, [r7, #12]
    3652:	ea42 0303 	orr.w	r3, r2, r3
    3656:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	68fa      	ldr	r2, [r7, #12]
    365c:	62da      	str	r2, [r3, #44]	; 0x2c
}
    365e:	f107 0714 	add.w	r7, r7, #20
    3662:	46bd      	mov	sp, r7
    3664:	bc80      	pop	{r7}
    3666:	4770      	bx	lr
    3668:	fff1f7fd 	.word	0xfff1f7fd

0000366c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    366c:	b480      	push	{r7}
    366e:	b083      	sub	sp, #12
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	f04f 0200 	mov.w	r2, #0
    367a:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	f04f 0200 	mov.w	r2, #0
    3682:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	f04f 0200 	mov.w	r2, #0
    368a:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	f04f 0200 	mov.w	r2, #0
    3692:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	f04f 0200 	mov.w	r2, #0
    369a:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	f04f 0201 	mov.w	r2, #1
    36a2:	741a      	strb	r2, [r3, #16]
}
    36a4:	f107 070c 	add.w	r7, r7, #12
    36a8:	46bd      	mov	sp, r7
    36aa:	bc80      	pop	{r7}
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop

000036b0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    36b0:	b480      	push	{r7}
    36b2:	b083      	sub	sp, #12
    36b4:	af00      	add	r7, sp, #0
    36b6:	6078      	str	r0, [r7, #4]
    36b8:	460b      	mov	r3, r1
    36ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36bc:	78fb      	ldrb	r3, [r7, #3]
    36be:	2b00      	cmp	r3, #0
    36c0:	d006      	beq.n	36d0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	689b      	ldr	r3, [r3, #8]
    36c6:	f043 0201 	orr.w	r2, r3, #1
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	609a      	str	r2, [r3, #8]
    36ce:	e005      	b.n	36dc <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	689b      	ldr	r3, [r3, #8]
    36d4:	f023 0201 	bic.w	r2, r3, #1
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	609a      	str	r2, [r3, #8]
  }
}
    36dc:	f107 070c 	add.w	r7, r7, #12
    36e0:	46bd      	mov	sp, r7
    36e2:	bc80      	pop	{r7}
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop

000036e8 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    36e8:	b480      	push	{r7}
    36ea:	b083      	sub	sp, #12
    36ec:	af00      	add	r7, sp, #0
    36ee:	6078      	str	r0, [r7, #4]
    36f0:	460b      	mov	r3, r1
    36f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36f4:	78fb      	ldrb	r3, [r7, #3]
    36f6:	2b00      	cmp	r3, #0
    36f8:	d006      	beq.n	3708 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	689b      	ldr	r3, [r3, #8]
    36fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	609a      	str	r2, [r3, #8]
    3706:	e005      	b.n	3714 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	689b      	ldr	r3, [r3, #8]
    370c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	609a      	str	r2, [r3, #8]
  }
}
    3714:	f107 070c 	add.w	r7, r7, #12
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	bf00      	nop

00003720 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	4613      	mov	r3, r2
    372a:	460a      	mov	r2, r1
    372c:	807a      	strh	r2, [r7, #2]
    372e:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    3730:	f04f 0300 	mov.w	r3, #0
    3734:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    3736:	887b      	ldrh	r3, [r7, #2]
    3738:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    373a:	787b      	ldrb	r3, [r7, #1]
    373c:	2b00      	cmp	r3, #0
    373e:	d006      	beq.n	374e <ADC_ITConfig+0x2e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    3740:	687b      	ldr	r3, [r7, #4]
    3742:	685a      	ldr	r2, [r3, #4]
    3744:	7bfb      	ldrb	r3, [r7, #15]
    3746:	431a      	orrs	r2, r3
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	605a      	str	r2, [r3, #4]
    374c:	e007      	b.n	375e <ADC_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	685a      	ldr	r2, [r3, #4]
    3752:	7bfb      	ldrb	r3, [r7, #15]
    3754:	ea6f 0303 	mvn.w	r3, r3
    3758:	401a      	ands	r2, r3
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	605a      	str	r2, [r3, #4]
  }
}
    375e:	f107 0714 	add.w	r7, r7, #20
    3762:	46bd      	mov	sp, r7
    3764:	bc80      	pop	{r7}
    3766:	4770      	bx	lr

00003768 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    3768:	b480      	push	{r7}
    376a:	b083      	sub	sp, #12
    376c:	af00      	add	r7, sp, #0
    376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	689b      	ldr	r3, [r3, #8]
    3774:	f043 0208 	orr.w	r2, r3, #8
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	609a      	str	r2, [r3, #8]
}
    377c:	f107 070c 	add.w	r7, r7, #12
    3780:	46bd      	mov	sp, r7
    3782:	bc80      	pop	{r7}
    3784:	4770      	bx	lr
    3786:	bf00      	nop

00003788 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    3788:	b480      	push	{r7}
    378a:	b085      	sub	sp, #20
    378c:	af00      	add	r7, sp, #0
    378e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3790:	f04f 0300 	mov.w	r3, #0
    3794:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	689b      	ldr	r3, [r3, #8]
    379a:	f003 0308 	and.w	r3, r3, #8
    379e:	2b00      	cmp	r3, #0
    37a0:	d003      	beq.n	37aa <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    37a2:	f04f 0301 	mov.w	r3, #1
    37a6:	73fb      	strb	r3, [r7, #15]
    37a8:	e002      	b.n	37b0 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    37aa:	f04f 0300 	mov.w	r3, #0
    37ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    37b0:	7bfb      	ldrb	r3, [r7, #15]
}
    37b2:	4618      	mov	r0, r3
    37b4:	f107 0714 	add.w	r7, r7, #20
    37b8:	46bd      	mov	sp, r7
    37ba:	bc80      	pop	{r7}
    37bc:	4770      	bx	lr
    37be:	bf00      	nop

000037c0 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    37c0:	b480      	push	{r7}
    37c2:	b083      	sub	sp, #12
    37c4:	af00      	add	r7, sp, #0
    37c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	689b      	ldr	r3, [r3, #8]
    37cc:	f043 0204 	orr.w	r2, r3, #4
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	609a      	str	r2, [r3, #8]
}
    37d4:	f107 070c 	add.w	r7, r7, #12
    37d8:	46bd      	mov	sp, r7
    37da:	bc80      	pop	{r7}
    37dc:	4770      	bx	lr
    37de:	bf00      	nop

000037e0 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    37e0:	b480      	push	{r7}
    37e2:	b085      	sub	sp, #20
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    37e8:	f04f 0300 	mov.w	r3, #0
    37ec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	689b      	ldr	r3, [r3, #8]
    37f2:	f003 0304 	and.w	r3, r3, #4
    37f6:	2b00      	cmp	r3, #0
    37f8:	d003      	beq.n	3802 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    37fa:	f04f 0301 	mov.w	r3, #1
    37fe:	73fb      	strb	r3, [r7, #15]
    3800:	e002      	b.n	3808 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    3802:	f04f 0300 	mov.w	r3, #0
    3806:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    3808:	7bfb      	ldrb	r3, [r7, #15]
}
    380a:	4618      	mov	r0, r3
    380c:	f107 0714 	add.w	r7, r7, #20
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	bf00      	nop

00003818 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3818:	b480      	push	{r7}
    381a:	b083      	sub	sp, #12
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3824:	78fb      	ldrb	r3, [r7, #3]
    3826:	2b00      	cmp	r3, #0
    3828:	d006      	beq.n	3838 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	689b      	ldr	r3, [r3, #8]
    382e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	609a      	str	r2, [r3, #8]
    3836:	e005      	b.n	3844 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	689b      	ldr	r3, [r3, #8]
    383c:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    3840:	687b      	ldr	r3, [r7, #4]
    3842:	609a      	str	r2, [r3, #8]
  }
}
    3844:	f107 070c 	add.w	r7, r7, #12
    3848:	46bd      	mov	sp, r7
    384a:	bc80      	pop	{r7}
    384c:	4770      	bx	lr
    384e:	bf00      	nop

00003850 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    3850:	b480      	push	{r7}
    3852:	b085      	sub	sp, #20
    3854:	af00      	add	r7, sp, #0
    3856:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3858:	f04f 0300 	mov.w	r3, #0
    385c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	689b      	ldr	r3, [r3, #8]
    3862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    3866:	2b00      	cmp	r3, #0
    3868:	d003      	beq.n	3872 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    386a:	f04f 0301 	mov.w	r3, #1
    386e:	73fb      	strb	r3, [r7, #15]
    3870:	e002      	b.n	3878 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    3872:	f04f 0300 	mov.w	r3, #0
    3876:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    3878:	7bfb      	ldrb	r3, [r7, #15]
}
    387a:	4618      	mov	r0, r3
    387c:	f107 0714 	add.w	r7, r7, #20
    3880:	46bd      	mov	sp, r7
    3882:	bc80      	pop	{r7}
    3884:	4770      	bx	lr
    3886:	bf00      	nop

00003888 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    3888:	b480      	push	{r7}
    388a:	b085      	sub	sp, #20
    388c:	af00      	add	r7, sp, #0
    388e:	6078      	str	r0, [r7, #4]
    3890:	460b      	mov	r3, r1
    3892:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    3894:	f04f 0300 	mov.w	r3, #0
    3898:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    389a:	f04f 0300 	mov.w	r3, #0
    389e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	685b      	ldr	r3, [r3, #4]
    38a4:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    38ac:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    38ae:	78fb      	ldrb	r3, [r7, #3]
    38b0:	f103 33ff 	add.w	r3, r3, #4294967295
    38b4:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    38b6:	68bb      	ldr	r3, [r7, #8]
    38b8:	ea4f 3343 	mov.w	r3, r3, lsl #13
    38bc:	68fa      	ldr	r2, [r7, #12]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	68fa      	ldr	r2, [r7, #12]
    38c8:	605a      	str	r2, [r3, #4]
}
    38ca:	f107 0714 	add.w	r7, r7, #20
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    38d4:	b480      	push	{r7}
    38d6:	b083      	sub	sp, #12
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    38e0:	78fb      	ldrb	r3, [r7, #3]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d006      	beq.n	38f4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	685b      	ldr	r3, [r3, #4]
    38ea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	605a      	str	r2, [r3, #4]
    38f2:	e005      	b.n	3900 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	685b      	ldr	r3, [r3, #4]
    38f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	605a      	str	r2, [r3, #4]
  }
}
    3900:	f107 070c 	add.w	r7, r7, #12
    3904:	46bd      	mov	sp, r7
    3906:	bc80      	pop	{r7}
    3908:	4770      	bx	lr
    390a:	bf00      	nop

0000390c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    390c:	b480      	push	{r7}
    390e:	b085      	sub	sp, #20
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
    3914:	70f9      	strb	r1, [r7, #3]
    3916:	70ba      	strb	r2, [r7, #2]
    3918:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    391a:	f04f 0300 	mov.w	r3, #0
    391e:	60fb      	str	r3, [r7, #12]
    3920:	f04f 0300 	mov.w	r3, #0
    3924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    3926:	78fb      	ldrb	r3, [r7, #3]
    3928:	2b09      	cmp	r3, #9
    392a:	d929      	bls.n	3980 <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    392c:	687b      	ldr	r3, [r7, #4]
    392e:	68db      	ldr	r3, [r3, #12]
    3930:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    3932:	78fa      	ldrb	r2, [r7, #3]
    3934:	4613      	mov	r3, r2
    3936:	ea4f 0343 	mov.w	r3, r3, lsl #1
    393a:	189b      	adds	r3, r3, r2
    393c:	f1a3 031e 	sub.w	r3, r3, #30
    3940:	f04f 0207 	mov.w	r2, #7
    3944:	fa02 f303 	lsl.w	r3, r2, r3
    3948:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    394a:	68bb      	ldr	r3, [r7, #8]
    394c:	ea6f 0303 	mvn.w	r3, r3
    3950:	68fa      	ldr	r2, [r7, #12]
    3952:	ea02 0303 	and.w	r3, r2, r3
    3956:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    3958:	7879      	ldrb	r1, [r7, #1]
    395a:	78fa      	ldrb	r2, [r7, #3]
    395c:	4613      	mov	r3, r2
    395e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3962:	189b      	adds	r3, r3, r2
    3964:	f1a3 031e 	sub.w	r3, r3, #30
    3968:	fa01 f303 	lsl.w	r3, r1, r3
    396c:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    396e:	68fa      	ldr	r2, [r7, #12]
    3970:	68bb      	ldr	r3, [r7, #8]
    3972:	ea42 0303 	orr.w	r3, r2, r3
    3976:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	68fa      	ldr	r2, [r7, #12]
    397c:	60da      	str	r2, [r3, #12]
    397e:	e024      	b.n	39ca <ADC_RegularChannelConfig+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    3980:	687b      	ldr	r3, [r7, #4]
    3982:	691b      	ldr	r3, [r3, #16]
    3984:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    3986:	78fa      	ldrb	r2, [r7, #3]
    3988:	4613      	mov	r3, r2
    398a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    398e:	189b      	adds	r3, r3, r2
    3990:	f04f 0207 	mov.w	r2, #7
    3994:	fa02 f303 	lsl.w	r3, r2, r3
    3998:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    399a:	68bb      	ldr	r3, [r7, #8]
    399c:	ea6f 0303 	mvn.w	r3, r3
    39a0:	68fa      	ldr	r2, [r7, #12]
    39a2:	ea02 0303 	and.w	r3, r2, r3
    39a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    39a8:	7879      	ldrb	r1, [r7, #1]
    39aa:	78fa      	ldrb	r2, [r7, #3]
    39ac:	4613      	mov	r3, r2
    39ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
    39b2:	189b      	adds	r3, r3, r2
    39b4:	fa01 f303 	lsl.w	r3, r1, r3
    39b8:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    39ba:	68fa      	ldr	r2, [r7, #12]
    39bc:	68bb      	ldr	r3, [r7, #8]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	68fa      	ldr	r2, [r7, #12]
    39c8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    39ca:	78bb      	ldrb	r3, [r7, #2]
    39cc:	2b06      	cmp	r3, #6
    39ce:	d829      	bhi.n	3a24 <ADC_RegularChannelConfig+0x118>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    39d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    39d6:	78bb      	ldrb	r3, [r7, #2]
    39d8:	f103 32ff 	add.w	r2, r3, #4294967295
    39dc:	4613      	mov	r3, r2
    39de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    39e2:	189b      	adds	r3, r3, r2
    39e4:	f04f 021f 	mov.w	r2, #31
    39e8:	fa02 f303 	lsl.w	r3, r2, r3
    39ec:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    39ee:	68bb      	ldr	r3, [r7, #8]
    39f0:	ea6f 0303 	mvn.w	r3, r3
    39f4:	68fa      	ldr	r2, [r7, #12]
    39f6:	ea02 0303 	and.w	r3, r2, r3
    39fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    39fc:	78f9      	ldrb	r1, [r7, #3]
    39fe:	78bb      	ldrb	r3, [r7, #2]
    3a00:	f103 32ff 	add.w	r2, r3, #4294967295
    3a04:	4613      	mov	r3, r2
    3a06:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a0a:	189b      	adds	r3, r3, r2
    3a0c:	fa01 f303 	lsl.w	r3, r1, r3
    3a10:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    3a12:	68fa      	ldr	r2, [r7, #12]
    3a14:	68bb      	ldr	r3, [r7, #8]
    3a16:	ea42 0303 	orr.w	r3, r2, r3
    3a1a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	68fa      	ldr	r2, [r7, #12]
    3a20:	635a      	str	r2, [r3, #52]	; 0x34
    3a22:	e055      	b.n	3ad0 <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
    3a24:	78bb      	ldrb	r3, [r7, #2]
    3a26:	2b0c      	cmp	r3, #12
    3a28:	d829      	bhi.n	3a7e <ADC_RegularChannelConfig+0x172>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a2e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    3a30:	78ba      	ldrb	r2, [r7, #2]
    3a32:	4613      	mov	r3, r2
    3a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a38:	189b      	adds	r3, r3, r2
    3a3a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    3a3e:	f04f 021f 	mov.w	r2, #31
    3a42:	fa02 f303 	lsl.w	r3, r2, r3
    3a46:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    3a48:	68bb      	ldr	r3, [r7, #8]
    3a4a:	ea6f 0303 	mvn.w	r3, r3
    3a4e:	68fa      	ldr	r2, [r7, #12]
    3a50:	ea02 0303 	and.w	r3, r2, r3
    3a54:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    3a56:	78f9      	ldrb	r1, [r7, #3]
    3a58:	78ba      	ldrb	r2, [r7, #2]
    3a5a:	4613      	mov	r3, r2
    3a5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a60:	189b      	adds	r3, r3, r2
    3a62:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    3a66:	fa01 f303 	lsl.w	r3, r1, r3
    3a6a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    3a6c:	68fa      	ldr	r2, [r7, #12]
    3a6e:	68bb      	ldr	r3, [r7, #8]
    3a70:	ea42 0303 	orr.w	r3, r2, r3
    3a74:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	68fa      	ldr	r2, [r7, #12]
    3a7a:	631a      	str	r2, [r3, #48]	; 0x30
    3a7c:	e028      	b.n	3ad0 <ADC_RegularChannelConfig+0x1c4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a82:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    3a84:	78ba      	ldrb	r2, [r7, #2]
    3a86:	4613      	mov	r3, r2
    3a88:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a8c:	189b      	adds	r3, r3, r2
    3a8e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    3a92:	f04f 021f 	mov.w	r2, #31
    3a96:	fa02 f303 	lsl.w	r3, r2, r3
    3a9a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    3a9c:	68bb      	ldr	r3, [r7, #8]
    3a9e:	ea6f 0303 	mvn.w	r3, r3
    3aa2:	68fa      	ldr	r2, [r7, #12]
    3aa4:	ea02 0303 	and.w	r3, r2, r3
    3aa8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    3aaa:	78f9      	ldrb	r1, [r7, #3]
    3aac:	78ba      	ldrb	r2, [r7, #2]
    3aae:	4613      	mov	r3, r2
    3ab0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ab4:	189b      	adds	r3, r3, r2
    3ab6:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    3aba:	fa01 f303 	lsl.w	r3, r1, r3
    3abe:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    3ac0:	68fa      	ldr	r2, [r7, #12]
    3ac2:	68bb      	ldr	r3, [r7, #8]
    3ac4:	ea42 0303 	orr.w	r3, r2, r3
    3ac8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	68fa      	ldr	r2, [r7, #12]
    3ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
    3ad0:	f107 0714 	add.w	r7, r7, #20
    3ad4:	46bd      	mov	sp, r7
    3ad6:	bc80      	pop	{r7}
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop

00003adc <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3adc:	b480      	push	{r7}
    3ade:	b083      	sub	sp, #12
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	6078      	str	r0, [r7, #4]
    3ae4:	460b      	mov	r3, r1
    3ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3ae8:	78fb      	ldrb	r3, [r7, #3]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d006      	beq.n	3afc <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	689b      	ldr	r3, [r3, #8]
    3af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	609a      	str	r2, [r3, #8]
    3afa:	e005      	b.n	3b08 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    3afc:	687b      	ldr	r3, [r7, #4]
    3afe:	689b      	ldr	r3, [r3, #8]
    3b00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	609a      	str	r2, [r3, #8]
  }
}
    3b08:	f107 070c 	add.w	r7, r7, #12
    3b0c:	46bd      	mov	sp, r7
    3b0e:	bc80      	pop	{r7}
    3b10:	4770      	bx	lr
    3b12:	bf00      	nop

00003b14 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    3b14:	b480      	push	{r7}
    3b16:	b083      	sub	sp, #12
    3b18:	af00      	add	r7, sp, #0
    3b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3b20:	b29b      	uxth	r3, r3
}
    3b22:	4618      	mov	r0, r3
    3b24:	f107 070c 	add.w	r7, r7, #12
    3b28:	46bd      	mov	sp, r7
    3b2a:	bc80      	pop	{r7}
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop

00003b30 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    3b30:	b480      	push	{r7}
    3b32:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    3b34:	4b02      	ldr	r3, [pc, #8]	; (3b40 <ADC_GetDualModeConversionValue+0x10>)
    3b36:	681b      	ldr	r3, [r3, #0]
}
    3b38:	4618      	mov	r0, r3
    3b3a:	46bd      	mov	sp, r7
    3b3c:	bc80      	pop	{r7}
    3b3e:	4770      	bx	lr
    3b40:	4001244c 	.word	0x4001244c

00003b44 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3b44:	b480      	push	{r7}
    3b46:	b083      	sub	sp, #12
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
    3b4c:	460b      	mov	r3, r1
    3b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3b50:	78fb      	ldrb	r3, [r7, #3]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d006      	beq.n	3b64 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	685b      	ldr	r3, [r3, #4]
    3b5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	605a      	str	r2, [r3, #4]
    3b62:	e005      	b.n	3b70 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	685b      	ldr	r3, [r3, #4]
    3b68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	605a      	str	r2, [r3, #4]
  }
}
    3b70:	f107 070c 	add.w	r7, r7, #12
    3b74:	46bd      	mov	sp, r7
    3b76:	bc80      	pop	{r7}
    3b78:	4770      	bx	lr
    3b7a:	bf00      	nop

00003b7c <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3b7c:	b480      	push	{r7}
    3b7e:	b083      	sub	sp, #12
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
    3b84:	460b      	mov	r3, r1
    3b86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3b88:	78fb      	ldrb	r3, [r7, #3]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d006      	beq.n	3b9c <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    3b8e:	687b      	ldr	r3, [r7, #4]
    3b90:	685b      	ldr	r3, [r3, #4]
    3b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	605a      	str	r2, [r3, #4]
    3b9a:	e005      	b.n	3ba8 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	685b      	ldr	r3, [r3, #4]
    3ba0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	605a      	str	r2, [r3, #4]
  }
}
    3ba8:	f107 070c 	add.w	r7, r7, #12
    3bac:	46bd      	mov	sp, r7
    3bae:	bc80      	pop	{r7}
    3bb0:	4770      	bx	lr
    3bb2:	bf00      	nop

00003bb4 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    3bb4:	b480      	push	{r7}
    3bb6:	b085      	sub	sp, #20
    3bb8:	af00      	add	r7, sp, #0
    3bba:	6078      	str	r0, [r7, #4]
    3bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    3bbe:	f04f 0300 	mov.w	r3, #0
    3bc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	689b      	ldr	r3, [r3, #8]
    3bc8:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3bd0:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    3bd2:	68fa      	ldr	r2, [r7, #12]
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	ea42 0303 	orr.w	r3, r2, r3
    3bda:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	68fa      	ldr	r2, [r7, #12]
    3be0:	609a      	str	r2, [r3, #8]
}
    3be2:	f107 0714 	add.w	r7, r7, #20
    3be6:	46bd      	mov	sp, r7
    3be8:	bc80      	pop	{r7}
    3bea:	4770      	bx	lr

00003bec <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3bec:	b480      	push	{r7}
    3bee:	b083      	sub	sp, #12
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3bf8:	78fb      	ldrb	r3, [r7, #3]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d006      	beq.n	3c0c <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	689b      	ldr	r3, [r3, #8]
    3c02:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	609a      	str	r2, [r3, #8]
    3c0a:	e005      	b.n	3c18 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	689b      	ldr	r3, [r3, #8]
    3c10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    3c14:	687b      	ldr	r3, [r7, #4]
    3c16:	609a      	str	r2, [r3, #8]
  }
}
    3c18:	f107 070c 	add.w	r7, r7, #12
    3c1c:	46bd      	mov	sp, r7
    3c1e:	bc80      	pop	{r7}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop

00003c24 <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3c24:	b480      	push	{r7}
    3c26:	b083      	sub	sp, #12
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
    3c2c:	460b      	mov	r3, r1
    3c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3c30:	78fb      	ldrb	r3, [r7, #3]
    3c32:	2b00      	cmp	r3, #0
    3c34:	d006      	beq.n	3c44 <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	689b      	ldr	r3, [r3, #8]
    3c3a:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	609a      	str	r2, [r3, #8]
    3c42:	e005      	b.n	3c50 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	689b      	ldr	r3, [r3, #8]
    3c48:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    3c4c:	687b      	ldr	r3, [r7, #4]
    3c4e:	609a      	str	r2, [r3, #8]
  }
}
    3c50:	f107 070c 	add.w	r7, r7, #12
    3c54:	46bd      	mov	sp, r7
    3c56:	bc80      	pop	{r7}
    3c58:	4770      	bx	lr
    3c5a:	bf00      	nop

00003c5c <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    3c5c:	b480      	push	{r7}
    3c5e:	b085      	sub	sp, #20
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3c64:	f04f 0300 	mov.w	r3, #0
    3c68:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	689b      	ldr	r3, [r3, #8]
    3c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    3c72:	2b00      	cmp	r3, #0
    3c74:	d003      	beq.n	3c7e <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    3c76:	f04f 0301 	mov.w	r3, #1
    3c7a:	73fb      	strb	r3, [r7, #15]
    3c7c:	e002      	b.n	3c84 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    3c7e:	f04f 0300 	mov.w	r3, #0
    3c82:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    3c84:	7bfb      	ldrb	r3, [r7, #15]
}
    3c86:	4618      	mov	r0, r3
    3c88:	f107 0714 	add.w	r7, r7, #20
    3c8c:	46bd      	mov	sp, r7
    3c8e:	bc80      	pop	{r7}
    3c90:	4770      	bx	lr
    3c92:	bf00      	nop

00003c94 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    3c94:	b480      	push	{r7}
    3c96:	b087      	sub	sp, #28
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
    3c9c:	70f9      	strb	r1, [r7, #3]
    3c9e:	70ba      	strb	r2, [r7, #2]
    3ca0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    3ca2:	f04f 0300 	mov.w	r3, #0
    3ca6:	617b      	str	r3, [r7, #20]
    3ca8:	f04f 0300 	mov.w	r3, #0
    3cac:	613b      	str	r3, [r7, #16]
    3cae:	f04f 0300 	mov.w	r3, #0
    3cb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    3cb4:	78fb      	ldrb	r3, [r7, #3]
    3cb6:	2b09      	cmp	r3, #9
    3cb8:	d929      	bls.n	3d0e <ADC_InjectedChannelConfig+0x7a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	68db      	ldr	r3, [r3, #12]
    3cbe:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    3cc0:	78fa      	ldrb	r2, [r7, #3]
    3cc2:	4613      	mov	r3, r2
    3cc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3cc8:	189b      	adds	r3, r3, r2
    3cca:	f1a3 031e 	sub.w	r3, r3, #30
    3cce:	f04f 0207 	mov.w	r2, #7
    3cd2:	fa02 f303 	lsl.w	r3, r2, r3
    3cd6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3cd8:	693b      	ldr	r3, [r7, #16]
    3cda:	ea6f 0303 	mvn.w	r3, r3
    3cde:	697a      	ldr	r2, [r7, #20]
    3ce0:	ea02 0303 	and.w	r3, r2, r3
    3ce4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    3ce6:	7879      	ldrb	r1, [r7, #1]
    3ce8:	78fa      	ldrb	r2, [r7, #3]
    3cea:	4613      	mov	r3, r2
    3cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3cf0:	189b      	adds	r3, r3, r2
    3cf2:	f1a3 031e 	sub.w	r3, r3, #30
    3cf6:	fa01 f303 	lsl.w	r3, r1, r3
    3cfa:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3cfc:	697a      	ldr	r2, [r7, #20]
    3cfe:	693b      	ldr	r3, [r7, #16]
    3d00:	ea42 0303 	orr.w	r3, r2, r3
    3d04:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	697a      	ldr	r2, [r7, #20]
    3d0a:	60da      	str	r2, [r3, #12]
    3d0c:	e024      	b.n	3d58 <ADC_InjectedChannelConfig+0xc4>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	691b      	ldr	r3, [r3, #16]
    3d12:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    3d14:	78fa      	ldrb	r2, [r7, #3]
    3d16:	4613      	mov	r3, r2
    3d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d1c:	189b      	adds	r3, r3, r2
    3d1e:	f04f 0207 	mov.w	r2, #7
    3d22:	fa02 f303 	lsl.w	r3, r2, r3
    3d26:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3d28:	693b      	ldr	r3, [r7, #16]
    3d2a:	ea6f 0303 	mvn.w	r3, r3
    3d2e:	697a      	ldr	r2, [r7, #20]
    3d30:	ea02 0303 	and.w	r3, r2, r3
    3d34:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    3d36:	7879      	ldrb	r1, [r7, #1]
    3d38:	78fa      	ldrb	r2, [r7, #3]
    3d3a:	4613      	mov	r3, r2
    3d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d40:	189b      	adds	r3, r3, r2
    3d42:	fa01 f303 	lsl.w	r3, r1, r3
    3d46:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3d48:	697a      	ldr	r2, [r7, #20]
    3d4a:	693b      	ldr	r3, [r7, #16]
    3d4c:	ea42 0303 	orr.w	r3, r2, r3
    3d50:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	697a      	ldr	r2, [r7, #20]
    3d56:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d5c:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    3d5e:	697b      	ldr	r3, [r7, #20]
    3d60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    3d64:	ea4f 5313 	mov.w	r3, r3, lsr #20
    3d68:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3d6a:	68fb      	ldr	r3, [r7, #12]
    3d6c:	b2db      	uxtb	r3, r3
    3d6e:	ea6f 0303 	mvn.w	r3, r3
    3d72:	b2da      	uxtb	r2, r3
    3d74:	78bb      	ldrb	r3, [r7, #2]
    3d76:	18d3      	adds	r3, r2, r3
    3d78:	b2db      	uxtb	r3, r3
    3d7a:	f103 0303 	add.w	r3, r3, #3
    3d7e:	b2db      	uxtb	r3, r3
    3d80:	461a      	mov	r2, r3
    3d82:	4613      	mov	r3, r2
    3d84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d88:	189b      	adds	r3, r3, r2
    3d8a:	f04f 021f 	mov.w	r2, #31
    3d8e:	fa02 f303 	lsl.w	r3, r2, r3
    3d92:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    3d94:	693b      	ldr	r3, [r7, #16]
    3d96:	ea6f 0303 	mvn.w	r3, r3
    3d9a:	697a      	ldr	r2, [r7, #20]
    3d9c:	ea02 0303 	and.w	r3, r2, r3
    3da0:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3da2:	78f9      	ldrb	r1, [r7, #3]
    3da4:	68fb      	ldr	r3, [r7, #12]
    3da6:	b2db      	uxtb	r3, r3
    3da8:	ea6f 0303 	mvn.w	r3, r3
    3dac:	b2da      	uxtb	r2, r3
    3dae:	78bb      	ldrb	r3, [r7, #2]
    3db0:	18d3      	adds	r3, r2, r3
    3db2:	b2db      	uxtb	r3, r3
    3db4:	f103 0303 	add.w	r3, r3, #3
    3db8:	b2db      	uxtb	r3, r3
    3dba:	461a      	mov	r2, r3
    3dbc:	4613      	mov	r3, r2
    3dbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3dc2:	189b      	adds	r3, r3, r2
    3dc4:	fa01 f303 	lsl.w	r3, r1, r3
    3dc8:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    3dca:	697a      	ldr	r2, [r7, #20]
    3dcc:	693b      	ldr	r3, [r7, #16]
    3dce:	ea42 0303 	orr.w	r3, r2, r3
    3dd2:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	697a      	ldr	r2, [r7, #20]
    3dd8:	639a      	str	r2, [r3, #56]	; 0x38
}
    3dda:	f107 071c 	add.w	r7, r7, #28
    3dde:	46bd      	mov	sp, r7
    3de0:	bc80      	pop	{r7}
    3de2:	4770      	bx	lr

00003de4 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    3de4:	b480      	push	{r7}
    3de6:	b085      	sub	sp, #20
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    3df0:	f04f 0300 	mov.w	r3, #0
    3df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    3df6:	f04f 0300 	mov.w	r3, #0
    3dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e00:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    3e02:	68fb      	ldr	r3, [r7, #12]
    3e04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    3e08:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    3e0a:	78fb      	ldrb	r3, [r7, #3]
    3e0c:	f103 33ff 	add.w	r3, r3, #4294967295
    3e10:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    3e12:	68bb      	ldr	r3, [r7, #8]
    3e14:	ea4f 5303 	mov.w	r3, r3, lsl #20
    3e18:	68fa      	ldr	r2, [r7, #12]
    3e1a:	ea42 0303 	orr.w	r3, r2, r3
    3e1e:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	68fa      	ldr	r2, [r7, #12]
    3e24:	639a      	str	r2, [r3, #56]	; 0x38
}
    3e26:	f107 0714 	add.w	r7, r7, #20
    3e2a:	46bd      	mov	sp, r7
    3e2c:	bc80      	pop	{r7}
    3e2e:	4770      	bx	lr

00003e30 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    3e30:	b480      	push	{r7}
    3e32:	b085      	sub	sp, #20
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	4613      	mov	r3, r2
    3e3a:	460a      	mov	r2, r1
    3e3c:	70fa      	strb	r2, [r7, #3]
    3e3e:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    3e40:	f04f 0300 	mov.w	r3, #0
    3e44:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    3e4a:	78fa      	ldrb	r2, [r7, #3]
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	18d3      	adds	r3, r2, r3
    3e50:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    3e52:	68fb      	ldr	r3, [r7, #12]
    3e54:	883a      	ldrh	r2, [r7, #0]
    3e56:	601a      	str	r2, [r3, #0]
}
    3e58:	f107 0714 	add.w	r7, r7, #20
    3e5c:	46bd      	mov	sp, r7
    3e5e:	bc80      	pop	{r7}
    3e60:	4770      	bx	lr
    3e62:	bf00      	nop

00003e64 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    3e64:	b480      	push	{r7}
    3e66:	b085      	sub	sp, #20
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    3e6c:	460b      	mov	r3, r1
    3e6e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    3e70:	f04f 0300 	mov.w	r3, #0
    3e74:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    3e7a:	78fa      	ldrb	r2, [r7, #3]
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	18d3      	adds	r3, r2, r3
    3e80:	f103 0328 	add.w	r3, r3, #40	; 0x28
    3e84:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	b29b      	uxth	r3, r3
}
    3e8c:	4618      	mov	r0, r3
    3e8e:	f107 0714 	add.w	r7, r7, #20
    3e92:	46bd      	mov	sp, r7
    3e94:	bc80      	pop	{r7}
    3e96:	4770      	bx	lr

00003e98 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    3e98:	b480      	push	{r7}
    3e9a:	b085      	sub	sp, #20
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	6078      	str	r0, [r7, #4]
    3ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    3ea2:	f04f 0300 	mov.w	r3, #0
    3ea6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	685b      	ldr	r3, [r3, #4]
    3eac:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    3eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3eb8:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	683b      	ldr	r3, [r7, #0]
    3ebe:	ea42 0303 	orr.w	r3, r2, r3
    3ec2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	68fa      	ldr	r2, [r7, #12]
    3ec8:	605a      	str	r2, [r3, #4]
}
    3eca:	f107 0714 	add.w	r7, r7, #20
    3ece:	46bd      	mov	sp, r7
    3ed0:	bc80      	pop	{r7}
    3ed2:	4770      	bx	lr

00003ed4 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    3ed4:	b480      	push	{r7}
    3ed6:	b083      	sub	sp, #12
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
    3edc:	4613      	mov	r3, r2
    3ede:	460a      	mov	r2, r1
    3ee0:	807a      	strh	r2, [r7, #2]
    3ee2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    3ee4:	887a      	ldrh	r2, [r7, #2]
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    3eea:	883a      	ldrh	r2, [r7, #0]
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	629a      	str	r2, [r3, #40]	; 0x28
}
    3ef0:	f107 070c 	add.w	r7, r7, #12
    3ef4:	46bd      	mov	sp, r7
    3ef6:	bc80      	pop	{r7}
    3ef8:	4770      	bx	lr
    3efa:	bf00      	nop

00003efc <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    3efc:	b480      	push	{r7}
    3efe:	b085      	sub	sp, #20
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	460b      	mov	r3, r1
    3f06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    3f08:	f04f 0300 	mov.w	r3, #0
    3f0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	685b      	ldr	r3, [r3, #4]
    3f12:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    3f14:	68fb      	ldr	r3, [r7, #12]
    3f16:	f023 031f 	bic.w	r3, r3, #31
    3f1a:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    3f1c:	78fb      	ldrb	r3, [r7, #3]
    3f1e:	68fa      	ldr	r2, [r7, #12]
    3f20:	ea42 0303 	orr.w	r3, r2, r3
    3f24:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	68fa      	ldr	r2, [r7, #12]
    3f2a:	605a      	str	r2, [r3, #4]
}
    3f2c:	f107 0714 	add.w	r7, r7, #20
    3f30:	46bd      	mov	sp, r7
    3f32:	bc80      	pop	{r7}
    3f34:	4770      	bx	lr
    3f36:	bf00      	nop

00003f38 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    3f38:	b480      	push	{r7}
    3f3a:	b083      	sub	sp, #12
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	4603      	mov	r3, r0
    3f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3f42:	79fb      	ldrb	r3, [r7, #7]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d006      	beq.n	3f56 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    3f48:	4b08      	ldr	r3, [pc, #32]	; (3f6c <ADC_TempSensorVrefintCmd+0x34>)
    3f4a:	4a08      	ldr	r2, [pc, #32]	; (3f6c <ADC_TempSensorVrefintCmd+0x34>)
    3f4c:	6892      	ldr	r2, [r2, #8]
    3f4e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    3f52:	609a      	str	r2, [r3, #8]
    3f54:	e005      	b.n	3f62 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    3f56:	4b05      	ldr	r3, [pc, #20]	; (3f6c <ADC_TempSensorVrefintCmd+0x34>)
    3f58:	4a04      	ldr	r2, [pc, #16]	; (3f6c <ADC_TempSensorVrefintCmd+0x34>)
    3f5a:	6892      	ldr	r2, [r2, #8]
    3f5c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    3f60:	609a      	str	r2, [r3, #8]
  }
}
    3f62:	f107 070c 	add.w	r7, r7, #12
    3f66:	46bd      	mov	sp, r7
    3f68:	bc80      	pop	{r7}
    3f6a:	4770      	bx	lr
    3f6c:	40012400 	.word	0x40012400

00003f70 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3f70:	b480      	push	{r7}
    3f72:	b085      	sub	sp, #20
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	460b      	mov	r3, r1
    3f7a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    3f7c:	f04f 0300 	mov.w	r3, #0
    3f80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	681a      	ldr	r2, [r3, #0]
    3f86:	78fb      	ldrb	r3, [r7, #3]
    3f88:	ea02 0303 	and.w	r3, r2, r3
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d003      	beq.n	3f98 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    3f90:	f04f 0301 	mov.w	r3, #1
    3f94:	73fb      	strb	r3, [r7, #15]
    3f96:	e002      	b.n	3f9e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    3f98:	f04f 0300 	mov.w	r3, #0
    3f9c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    3f9e:	7bfb      	ldrb	r3, [r7, #15]
}
    3fa0:	4618      	mov	r0, r3
    3fa2:	f107 0714 	add.w	r7, r7, #20
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bc80      	pop	{r7}
    3faa:	4770      	bx	lr

00003fac <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3fac:	b480      	push	{r7}
    3fae:	b083      	sub	sp, #12
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    3fb4:	460b      	mov	r3, r1
    3fb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    3fb8:	78fb      	ldrb	r3, [r7, #3]
    3fba:	ea6f 0203 	mvn.w	r2, r3
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	601a      	str	r2, [r3, #0]
}
    3fc2:	f107 070c 	add.w	r7, r7, #12
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bc80      	pop	{r7}
    3fca:	4770      	bx	lr

00003fcc <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3fcc:	b480      	push	{r7}
    3fce:	b087      	sub	sp, #28
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	6078      	str	r0, [r7, #4]
    3fd4:	460b      	mov	r3, r1
    3fd6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    3fd8:	f04f 0300 	mov.w	r3, #0
    3fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    3fde:	f04f 0300 	mov.w	r3, #0
    3fe2:	613b      	str	r3, [r7, #16]
    3fe4:	f04f 0300 	mov.w	r3, #0
    3fe8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    3fea:	887b      	ldrh	r3, [r7, #2]
    3fec:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3ff0:	b29b      	uxth	r3, r3
    3ff2:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	685a      	ldr	r2, [r3, #4]
    3ff8:	887b      	ldrh	r3, [r7, #2]
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	ea02 0303 	and.w	r3, r2, r3
    4000:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	681a      	ldr	r2, [r3, #0]
    4006:	693b      	ldr	r3, [r7, #16]
    4008:	ea02 0303 	and.w	r3, r2, r3
    400c:	2b00      	cmp	r3, #0
    400e:	d006      	beq.n	401e <ADC_GetITStatus+0x52>
    4010:	68fb      	ldr	r3, [r7, #12]
    4012:	2b00      	cmp	r3, #0
    4014:	d003      	beq.n	401e <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    4016:	f04f 0301 	mov.w	r3, #1
    401a:	75fb      	strb	r3, [r7, #23]
    401c:	e002      	b.n	4024 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    401e:	f04f 0300 	mov.w	r3, #0
    4022:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    4024:	7dfb      	ldrb	r3, [r7, #23]
}
    4026:	4618      	mov	r0, r3
    4028:	f107 071c 	add.w	r7, r7, #28
    402c:	46bd      	mov	sp, r7
    402e:	bc80      	pop	{r7}
    4030:	4770      	bx	lr
    4032:	bf00      	nop

00004034 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    4034:	b480      	push	{r7}
    4036:	b085      	sub	sp, #20
    4038:	af00      	add	r7, sp, #0
    403a:	6078      	str	r0, [r7, #4]
    403c:	460b      	mov	r3, r1
    403e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    4040:	f04f 0300 	mov.w	r3, #0
    4044:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    4046:	887b      	ldrh	r3, [r7, #2]
    4048:	ea4f 2313 	mov.w	r3, r3, lsr #8
    404c:	b29b      	uxth	r3, r3
    404e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    4050:	7bfb      	ldrb	r3, [r7, #15]
    4052:	ea6f 0203 	mvn.w	r2, r3
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	601a      	str	r2, [r3, #0]
}
    405a:	f107 0714 	add.w	r7, r7, #20
    405e:	46bd      	mov	sp, r7
    4060:	bc80      	pop	{r7}
    4062:	4770      	bx	lr

00004064 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    406c:	687a      	ldr	r2, [r7, #4]
    406e:	4b91      	ldr	r3, [pc, #580]	; (42b4 <TIM_DeInit+0x250>)
    4070:	429a      	cmp	r2, r3
    4072:	d10c      	bne.n	408e <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    4074:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4078:	f04f 0101 	mov.w	r1, #1
    407c:	f7fd ffea 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    4080:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4084:	f04f 0100 	mov.w	r1, #0
    4088:	f7fd ffe4 	bl	2054 <RCC_APB2PeriphResetCmd>
    408c:	e10e      	b.n	42ac <TIM_DeInit+0x248>
  }     
  else if (TIMx == TIM2)
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4094:	d10c      	bne.n	40b0 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    4096:	f04f 0001 	mov.w	r0, #1
    409a:	f04f 0101 	mov.w	r1, #1
    409e:	f7fd fffb 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    40a2:	f04f 0001 	mov.w	r0, #1
    40a6:	f04f 0100 	mov.w	r1, #0
    40aa:	f7fd fff5 	bl	2098 <RCC_APB1PeriphResetCmd>
    40ae:	e0fd      	b.n	42ac <TIM_DeInit+0x248>
  }
  else if (TIMx == TIM3)
    40b0:	687a      	ldr	r2, [r7, #4]
    40b2:	4b81      	ldr	r3, [pc, #516]	; (42b8 <TIM_DeInit+0x254>)
    40b4:	429a      	cmp	r2, r3
    40b6:	d10c      	bne.n	40d2 <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    40b8:	f04f 0002 	mov.w	r0, #2
    40bc:	f04f 0101 	mov.w	r1, #1
    40c0:	f7fd ffea 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    40c4:	f04f 0002 	mov.w	r0, #2
    40c8:	f04f 0100 	mov.w	r1, #0
    40cc:	f7fd ffe4 	bl	2098 <RCC_APB1PeriphResetCmd>
    40d0:	e0ec      	b.n	42ac <TIM_DeInit+0x248>
  }
  else if (TIMx == TIM4)
    40d2:	687a      	ldr	r2, [r7, #4]
    40d4:	4b79      	ldr	r3, [pc, #484]	; (42bc <TIM_DeInit+0x258>)
    40d6:	429a      	cmp	r2, r3
    40d8:	d10c      	bne.n	40f4 <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    40da:	f04f 0004 	mov.w	r0, #4
    40de:	f04f 0101 	mov.w	r1, #1
    40e2:	f7fd ffd9 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    40e6:	f04f 0004 	mov.w	r0, #4
    40ea:	f04f 0100 	mov.w	r1, #0
    40ee:	f7fd ffd3 	bl	2098 <RCC_APB1PeriphResetCmd>
    40f2:	e0db      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else if (TIMx == TIM5)
    40f4:	687a      	ldr	r2, [r7, #4]
    40f6:	4b72      	ldr	r3, [pc, #456]	; (42c0 <TIM_DeInit+0x25c>)
    40f8:	429a      	cmp	r2, r3
    40fa:	d10c      	bne.n	4116 <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    40fc:	f04f 0008 	mov.w	r0, #8
    4100:	f04f 0101 	mov.w	r1, #1
    4104:	f7fd ffc8 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    4108:	f04f 0008 	mov.w	r0, #8
    410c:	f04f 0100 	mov.w	r1, #0
    4110:	f7fd ffc2 	bl	2098 <RCC_APB1PeriphResetCmd>
    4114:	e0ca      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else if (TIMx == TIM6)
    4116:	687a      	ldr	r2, [r7, #4]
    4118:	4b6a      	ldr	r3, [pc, #424]	; (42c4 <TIM_DeInit+0x260>)
    411a:	429a      	cmp	r2, r3
    411c:	d10c      	bne.n	4138 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    411e:	f04f 0010 	mov.w	r0, #16
    4122:	f04f 0101 	mov.w	r1, #1
    4126:	f7fd ffb7 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    412a:	f04f 0010 	mov.w	r0, #16
    412e:	f04f 0100 	mov.w	r1, #0
    4132:	f7fd ffb1 	bl	2098 <RCC_APB1PeriphResetCmd>
    4136:	e0b9      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else if (TIMx == TIM7)
    4138:	687a      	ldr	r2, [r7, #4]
    413a:	4b63      	ldr	r3, [pc, #396]	; (42c8 <TIM_DeInit+0x264>)
    413c:	429a      	cmp	r2, r3
    413e:	d10c      	bne.n	415a <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    4140:	f04f 0020 	mov.w	r0, #32
    4144:	f04f 0101 	mov.w	r1, #1
    4148:	f7fd ffa6 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    414c:	f04f 0020 	mov.w	r0, #32
    4150:	f04f 0100 	mov.w	r1, #0
    4154:	f7fd ffa0 	bl	2098 <RCC_APB1PeriphResetCmd>
    4158:	e0a8      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else if (TIMx == TIM8)
    415a:	687a      	ldr	r2, [r7, #4]
    415c:	4b5b      	ldr	r3, [pc, #364]	; (42cc <TIM_DeInit+0x268>)
    415e:	429a      	cmp	r2, r3
    4160:	d10c      	bne.n	417c <TIM_DeInit+0x118>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    4162:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4166:	f04f 0101 	mov.w	r1, #1
    416a:	f7fd ff73 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    416e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4172:	f04f 0100 	mov.w	r1, #0
    4176:	f7fd ff6d 	bl	2054 <RCC_APB2PeriphResetCmd>
    417a:	e097      	b.n	42ac <TIM_DeInit+0x248>
  }
  else if (TIMx == TIM9)
    417c:	687a      	ldr	r2, [r7, #4]
    417e:	4b54      	ldr	r3, [pc, #336]	; (42d0 <TIM_DeInit+0x26c>)
    4180:	429a      	cmp	r2, r3
    4182:	d10c      	bne.n	419e <TIM_DeInit+0x13a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    4184:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4188:	f04f 0101 	mov.w	r1, #1
    418c:	f7fd ff62 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    4190:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4194:	f04f 0100 	mov.w	r1, #0
    4198:	f7fd ff5c 	bl	2054 <RCC_APB2PeriphResetCmd>
    419c:	e086      	b.n	42ac <TIM_DeInit+0x248>
   }  
  else if (TIMx == TIM10)
    419e:	687a      	ldr	r2, [r7, #4]
    41a0:	4b4c      	ldr	r3, [pc, #304]	; (42d4 <TIM_DeInit+0x270>)
    41a2:	429a      	cmp	r2, r3
    41a4:	d10c      	bne.n	41c0 <TIM_DeInit+0x15c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    41a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    41aa:	f04f 0101 	mov.w	r1, #1
    41ae:	f7fd ff51 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    41b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    41b6:	f04f 0100 	mov.w	r1, #0
    41ba:	f7fd ff4b 	bl	2054 <RCC_APB2PeriphResetCmd>
    41be:	e075      	b.n	42ac <TIM_DeInit+0x248>
  }  
  else if (TIMx == TIM11) 
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	4b45      	ldr	r3, [pc, #276]	; (42d8 <TIM_DeInit+0x274>)
    41c4:	429a      	cmp	r2, r3
    41c6:	d10c      	bne.n	41e2 <TIM_DeInit+0x17e>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    41c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    41cc:	f04f 0101 	mov.w	r1, #1
    41d0:	f7fd ff40 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    41d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    41d8:	f04f 0100 	mov.w	r1, #0
    41dc:	f7fd ff3a 	bl	2054 <RCC_APB2PeriphResetCmd>
    41e0:	e064      	b.n	42ac <TIM_DeInit+0x248>
  }  
  else if (TIMx == TIM12)
    41e2:	687a      	ldr	r2, [r7, #4]
    41e4:	4b3d      	ldr	r3, [pc, #244]	; (42dc <TIM_DeInit+0x278>)
    41e6:	429a      	cmp	r2, r3
    41e8:	d10c      	bne.n	4204 <TIM_DeInit+0x1a0>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    41ea:	f04f 0040 	mov.w	r0, #64	; 0x40
    41ee:	f04f 0101 	mov.w	r1, #1
    41f2:	f7fd ff51 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    41f6:	f04f 0040 	mov.w	r0, #64	; 0x40
    41fa:	f04f 0100 	mov.w	r1, #0
    41fe:	f7fd ff4b 	bl	2098 <RCC_APB1PeriphResetCmd>
    4202:	e053      	b.n	42ac <TIM_DeInit+0x248>
  }  
  else if (TIMx == TIM13) 
    4204:	687a      	ldr	r2, [r7, #4]
    4206:	4b36      	ldr	r3, [pc, #216]	; (42e0 <TIM_DeInit+0x27c>)
    4208:	429a      	cmp	r2, r3
    420a:	d10c      	bne.n	4226 <TIM_DeInit+0x1c2>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    420c:	f04f 0080 	mov.w	r0, #128	; 0x80
    4210:	f04f 0101 	mov.w	r1, #1
    4214:	f7fd ff40 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    4218:	f04f 0080 	mov.w	r0, #128	; 0x80
    421c:	f04f 0100 	mov.w	r1, #0
    4220:	f7fd ff3a 	bl	2098 <RCC_APB1PeriphResetCmd>
    4224:	e042      	b.n	42ac <TIM_DeInit+0x248>
  }
  else if (TIMx == TIM14) 
    4226:	687a      	ldr	r2, [r7, #4]
    4228:	4b2e      	ldr	r3, [pc, #184]	; (42e4 <TIM_DeInit+0x280>)
    422a:	429a      	cmp	r2, r3
    422c:	d10c      	bne.n	4248 <TIM_DeInit+0x1e4>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    422e:	f44f 7080 	mov.w	r0, #256	; 0x100
    4232:	f04f 0101 	mov.w	r1, #1
    4236:	f7fd ff2f 	bl	2098 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    423a:	f44f 7080 	mov.w	r0, #256	; 0x100
    423e:	f04f 0100 	mov.w	r1, #0
    4242:	f7fd ff29 	bl	2098 <RCC_APB1PeriphResetCmd>
    4246:	e031      	b.n	42ac <TIM_DeInit+0x248>
  }        
  else if (TIMx == TIM15)
    4248:	687a      	ldr	r2, [r7, #4]
    424a:	4b27      	ldr	r3, [pc, #156]	; (42e8 <TIM_DeInit+0x284>)
    424c:	429a      	cmp	r2, r3
    424e:	d10c      	bne.n	426a <TIM_DeInit+0x206>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    4250:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4254:	f04f 0101 	mov.w	r1, #1
    4258:	f7fd fefc 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    425c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4260:	f04f 0100 	mov.w	r1, #0
    4264:	f7fd fef6 	bl	2054 <RCC_APB2PeriphResetCmd>
    4268:	e020      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else if (TIMx == TIM16)
    426a:	687a      	ldr	r2, [r7, #4]
    426c:	4b1f      	ldr	r3, [pc, #124]	; (42ec <TIM_DeInit+0x288>)
    426e:	429a      	cmp	r2, r3
    4270:	d10c      	bne.n	428c <TIM_DeInit+0x228>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    4272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4276:	f04f 0101 	mov.w	r1, #1
    427a:	f7fd feeb 	bl	2054 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    427e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4282:	f04f 0100 	mov.w	r1, #0
    4286:	f7fd fee5 	bl	2054 <RCC_APB2PeriphResetCmd>
    428a:	e00f      	b.n	42ac <TIM_DeInit+0x248>
  } 
  else
  {
    if (TIMx == TIM17)
    428c:	687a      	ldr	r2, [r7, #4]
    428e:	4b18      	ldr	r3, [pc, #96]	; (42f0 <TIM_DeInit+0x28c>)
    4290:	429a      	cmp	r2, r3
    4292:	d10b      	bne.n	42ac <TIM_DeInit+0x248>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    4294:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    4298:	f04f 0101 	mov.w	r1, #1
    429c:	f7fd feda 	bl	2054 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    42a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    42a4:	f04f 0100 	mov.w	r1, #0
    42a8:	f7fd fed4 	bl	2054 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    42ac:	f107 0708 	add.w	r7, r7, #8
    42b0:	46bd      	mov	sp, r7
    42b2:	bd80      	pop	{r7, pc}
    42b4:	40012c00 	.word	0x40012c00
    42b8:	40000400 	.word	0x40000400
    42bc:	40000800 	.word	0x40000800
    42c0:	40000c00 	.word	0x40000c00
    42c4:	40001000 	.word	0x40001000
    42c8:	40001400 	.word	0x40001400
    42cc:	40013400 	.word	0x40013400
    42d0:	40014c00 	.word	0x40014c00
    42d4:	40015000 	.word	0x40015000
    42d8:	40015400 	.word	0x40015400
    42dc:	40001800 	.word	0x40001800
    42e0:	40001c00 	.word	0x40001c00
    42e4:	40002000 	.word	0x40002000
    42e8:	40014000 	.word	0x40014000
    42ec:	40014400 	.word	0x40014400
    42f0:	40014800 	.word	0x40014800

000042f4 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    42f4:	b480      	push	{r7}
    42f6:	b085      	sub	sp, #20
    42f8:	af00      	add	r7, sp, #0
    42fa:	6078      	str	r0, [r7, #4]
    42fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    42fe:	f04f 0300 	mov.w	r3, #0
    4302:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	881b      	ldrh	r3, [r3, #0]
    4308:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    430a:	687a      	ldr	r2, [r7, #4]
    430c:	4b2f      	ldr	r3, [pc, #188]	; (43cc <TIM_TimeBaseInit+0xd8>)
    430e:	429a      	cmp	r2, r3
    4310:	d013      	beq.n	433a <TIM_TimeBaseInit+0x46>
    4312:	687a      	ldr	r2, [r7, #4]
    4314:	4b2e      	ldr	r3, [pc, #184]	; (43d0 <TIM_TimeBaseInit+0xdc>)
    4316:	429a      	cmp	r2, r3
    4318:	d00f      	beq.n	433a <TIM_TimeBaseInit+0x46>
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4320:	d00b      	beq.n	433a <TIM_TimeBaseInit+0x46>
    4322:	687a      	ldr	r2, [r7, #4]
    4324:	4b2b      	ldr	r3, [pc, #172]	; (43d4 <TIM_TimeBaseInit+0xe0>)
    4326:	429a      	cmp	r2, r3
    4328:	d007      	beq.n	433a <TIM_TimeBaseInit+0x46>
    432a:	687a      	ldr	r2, [r7, #4]
    432c:	4b2a      	ldr	r3, [pc, #168]	; (43d8 <TIM_TimeBaseInit+0xe4>)
    432e:	429a      	cmp	r2, r3
    4330:	d003      	beq.n	433a <TIM_TimeBaseInit+0x46>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    4332:	687a      	ldr	r2, [r7, #4]
    4334:	4b29      	ldr	r3, [pc, #164]	; (43dc <TIM_TimeBaseInit+0xe8>)
    4336:	429a      	cmp	r2, r3
    4338:	d109      	bne.n	434e <TIM_TimeBaseInit+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    433a:	89fb      	ldrh	r3, [r7, #14]
    433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4340:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    4342:	683b      	ldr	r3, [r7, #0]
    4344:	885a      	ldrh	r2, [r3, #2]
    4346:	89fb      	ldrh	r3, [r7, #14]
    4348:	ea42 0303 	orr.w	r3, r2, r3
    434c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    434e:	687a      	ldr	r2, [r7, #4]
    4350:	4b23      	ldr	r3, [pc, #140]	; (43e0 <TIM_TimeBaseInit+0xec>)
    4352:	429a      	cmp	r2, r3
    4354:	d00d      	beq.n	4372 <TIM_TimeBaseInit+0x7e>
    4356:	687a      	ldr	r2, [r7, #4]
    4358:	4b22      	ldr	r3, [pc, #136]	; (43e4 <TIM_TimeBaseInit+0xf0>)
    435a:	429a      	cmp	r2, r3
    435c:	d009      	beq.n	4372 <TIM_TimeBaseInit+0x7e>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    435e:	89fb      	ldrh	r3, [r7, #14]
    4360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4364:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	88da      	ldrh	r2, [r3, #6]
    436a:	89fb      	ldrh	r3, [r7, #14]
    436c:	ea42 0303 	orr.w	r3, r2, r3
    4370:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	89fa      	ldrh	r2, [r7, #14]
    4376:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    4378:	683b      	ldr	r3, [r7, #0]
    437a:	889a      	ldrh	r2, [r3, #4]
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	881a      	ldrh	r2, [r3, #0]
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    4388:	687a      	ldr	r2, [r7, #4]
    438a:	4b10      	ldr	r3, [pc, #64]	; (43cc <TIM_TimeBaseInit+0xd8>)
    438c:	429a      	cmp	r2, r3
    438e:	d00f      	beq.n	43b0 <TIM_TimeBaseInit+0xbc>
    4390:	687a      	ldr	r2, [r7, #4]
    4392:	4b0f      	ldr	r3, [pc, #60]	; (43d0 <TIM_TimeBaseInit+0xdc>)
    4394:	429a      	cmp	r2, r3
    4396:	d00b      	beq.n	43b0 <TIM_TimeBaseInit+0xbc>
    4398:	687a      	ldr	r2, [r7, #4]
    439a:	4b13      	ldr	r3, [pc, #76]	; (43e8 <TIM_TimeBaseInit+0xf4>)
    439c:	429a      	cmp	r2, r3
    439e:	d007      	beq.n	43b0 <TIM_TimeBaseInit+0xbc>
    43a0:	687a      	ldr	r2, [r7, #4]
    43a2:	4b12      	ldr	r3, [pc, #72]	; (43ec <TIM_TimeBaseInit+0xf8>)
    43a4:	429a      	cmp	r2, r3
    43a6:	d003      	beq.n	43b0 <TIM_TimeBaseInit+0xbc>
    43a8:	687a      	ldr	r2, [r7, #4]
    43aa:	4b11      	ldr	r3, [pc, #68]	; (43f0 <TIM_TimeBaseInit+0xfc>)
    43ac:	429a      	cmp	r2, r3
    43ae:	d104      	bne.n	43ba <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    43b0:	683b      	ldr	r3, [r7, #0]
    43b2:	7a1b      	ldrb	r3, [r3, #8]
    43b4:	461a      	mov	r2, r3
    43b6:	687b      	ldr	r3, [r7, #4]
    43b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	f04f 0201 	mov.w	r2, #1
    43c0:	829a      	strh	r2, [r3, #20]
}
    43c2:	f107 0714 	add.w	r7, r7, #20
    43c6:	46bd      	mov	sp, r7
    43c8:	bc80      	pop	{r7}
    43ca:	4770      	bx	lr
    43cc:	40012c00 	.word	0x40012c00
    43d0:	40013400 	.word	0x40013400
    43d4:	40000400 	.word	0x40000400
    43d8:	40000800 	.word	0x40000800
    43dc:	40000c00 	.word	0x40000c00
    43e0:	40001000 	.word	0x40001000
    43e4:	40001400 	.word	0x40001400
    43e8:	40014000 	.word	0x40014000
    43ec:	40014400 	.word	0x40014400
    43f0:	40014800 	.word	0x40014800

000043f4 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    43f4:	b480      	push	{r7}
    43f6:	b085      	sub	sp, #20
    43f8:	af00      	add	r7, sp, #0
    43fa:	6078      	str	r0, [r7, #4]
    43fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    43fe:	f04f 0300 	mov.w	r3, #0
    4402:	817b      	strh	r3, [r7, #10]
    4404:	f04f 0300 	mov.w	r3, #0
    4408:	81fb      	strh	r3, [r7, #14]
    440a:	f04f 0300 	mov.w	r3, #0
    440e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	8c1b      	ldrh	r3, [r3, #32]
    4414:	b29b      	uxth	r3, r3
    4416:	f023 0301 	bic.w	r3, r3, #1
    441a:	b29a      	uxth	r2, r3
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	8c1b      	ldrh	r3, [r3, #32]
    4424:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	889b      	ldrh	r3, [r3, #4]
    442a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	8b1b      	ldrh	r3, [r3, #24]
    4430:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    4432:	897b      	ldrh	r3, [r7, #10]
    4434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4438:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    443a:	897b      	ldrh	r3, [r7, #10]
    443c:	f023 0303 	bic.w	r3, r3, #3
    4440:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    4442:	683b      	ldr	r3, [r7, #0]
    4444:	881a      	ldrh	r2, [r3, #0]
    4446:	897b      	ldrh	r3, [r7, #10]
    4448:	ea42 0303 	orr.w	r3, r2, r3
    444c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    444e:	89fb      	ldrh	r3, [r7, #14]
    4450:	f023 0302 	bic.w	r3, r3, #2
    4454:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    4456:	683b      	ldr	r3, [r7, #0]
    4458:	891a      	ldrh	r2, [r3, #8]
    445a:	89fb      	ldrh	r3, [r7, #14]
    445c:	ea42 0303 	orr.w	r3, r2, r3
    4460:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    4462:	683b      	ldr	r3, [r7, #0]
    4464:	885a      	ldrh	r2, [r3, #2]
    4466:	89fb      	ldrh	r3, [r7, #14]
    4468:	ea42 0303 	orr.w	r3, r2, r3
    446c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    446e:	687a      	ldr	r2, [r7, #4]
    4470:	4b26      	ldr	r3, [pc, #152]	; (450c <TIM_OC1Init+0x118>)
    4472:	429a      	cmp	r2, r3
    4474:	d00f      	beq.n	4496 <TIM_OC1Init+0xa2>
    4476:	687a      	ldr	r2, [r7, #4]
    4478:	4b25      	ldr	r3, [pc, #148]	; (4510 <TIM_OC1Init+0x11c>)
    447a:	429a      	cmp	r2, r3
    447c:	d00b      	beq.n	4496 <TIM_OC1Init+0xa2>
    447e:	687a      	ldr	r2, [r7, #4]
    4480:	4b24      	ldr	r3, [pc, #144]	; (4514 <TIM_OC1Init+0x120>)
    4482:	429a      	cmp	r2, r3
    4484:	d007      	beq.n	4496 <TIM_OC1Init+0xa2>
    4486:	687a      	ldr	r2, [r7, #4]
    4488:	4b23      	ldr	r3, [pc, #140]	; (4518 <TIM_OC1Init+0x124>)
    448a:	429a      	cmp	r2, r3
    448c:	d003      	beq.n	4496 <TIM_OC1Init+0xa2>
     (TIMx == TIM16)|| (TIMx == TIM17))
    448e:	687a      	ldr	r2, [r7, #4]
    4490:	4b22      	ldr	r3, [pc, #136]	; (451c <TIM_OC1Init+0x128>)
    4492:	429a      	cmp	r2, r3
    4494:	d127      	bne.n	44e6 <TIM_OC1Init+0xf2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    4496:	89fb      	ldrh	r3, [r7, #14]
    4498:	f023 0308 	bic.w	r3, r3, #8
    449c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	895a      	ldrh	r2, [r3, #10]
    44a2:	89fb      	ldrh	r3, [r7, #14]
    44a4:	ea42 0303 	orr.w	r3, r2, r3
    44a8:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    44aa:	89fb      	ldrh	r3, [r7, #14]
    44ac:	f023 0304 	bic.w	r3, r3, #4
    44b0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    44b2:	683b      	ldr	r3, [r7, #0]
    44b4:	889a      	ldrh	r2, [r3, #4]
    44b6:	89fb      	ldrh	r3, [r7, #14]
    44b8:	ea42 0303 	orr.w	r3, r2, r3
    44bc:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    44be:	89bb      	ldrh	r3, [r7, #12]
    44c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    44c4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    44c6:	89bb      	ldrh	r3, [r7, #12]
    44c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    44cc:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    44ce:	683b      	ldr	r3, [r7, #0]
    44d0:	899a      	ldrh	r2, [r3, #12]
    44d2:	89bb      	ldrh	r3, [r7, #12]
    44d4:	ea42 0303 	orr.w	r3, r2, r3
    44d8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    44da:	683b      	ldr	r3, [r7, #0]
    44dc:	89da      	ldrh	r2, [r3, #14]
    44de:	89bb      	ldrh	r3, [r7, #12]
    44e0:	ea42 0303 	orr.w	r3, r2, r3
    44e4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	89ba      	ldrh	r2, [r7, #12]
    44ea:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	897a      	ldrh	r2, [r7, #10]
    44f0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    44f2:	683b      	ldr	r3, [r7, #0]
    44f4:	88da      	ldrh	r2, [r3, #6]
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    44fa:	687b      	ldr	r3, [r7, #4]
    44fc:	89fa      	ldrh	r2, [r7, #14]
    44fe:	841a      	strh	r2, [r3, #32]
}
    4500:	f107 0714 	add.w	r7, r7, #20
    4504:	46bd      	mov	sp, r7
    4506:	bc80      	pop	{r7}
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	40012c00 	.word	0x40012c00
    4510:	40013400 	.word	0x40013400
    4514:	40014000 	.word	0x40014000
    4518:	40014400 	.word	0x40014400
    451c:	40014800 	.word	0x40014800

00004520 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4520:	b480      	push	{r7}
    4522:	b085      	sub	sp, #20
    4524:	af00      	add	r7, sp, #0
    4526:	6078      	str	r0, [r7, #4]
    4528:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    452a:	f04f 0300 	mov.w	r3, #0
    452e:	817b      	strh	r3, [r7, #10]
    4530:	f04f 0300 	mov.w	r3, #0
    4534:	81fb      	strh	r3, [r7, #14]
    4536:	f04f 0300 	mov.w	r3, #0
    453a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	8c1b      	ldrh	r3, [r3, #32]
    4540:	b29b      	uxth	r3, r3
    4542:	f023 0310 	bic.w	r3, r3, #16
    4546:	b29a      	uxth	r2, r3
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	8c1b      	ldrh	r3, [r3, #32]
    4550:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	889b      	ldrh	r3, [r3, #4]
    4556:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	8b1b      	ldrh	r3, [r3, #24]
    455c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    455e:	897b      	ldrh	r3, [r7, #10]
    4560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4564:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    4566:	897b      	ldrh	r3, [r7, #10]
    4568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    456c:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	881b      	ldrh	r3, [r3, #0]
    4572:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4576:	b29a      	uxth	r2, r3
    4578:	897b      	ldrh	r3, [r7, #10]
    457a:	ea42 0303 	orr.w	r3, r2, r3
    457e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    4580:	89fb      	ldrh	r3, [r7, #14]
    4582:	f023 0320 	bic.w	r3, r3, #32
    4586:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    4588:	683b      	ldr	r3, [r7, #0]
    458a:	891b      	ldrh	r3, [r3, #8]
    458c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4590:	b29a      	uxth	r2, r3
    4592:	89fb      	ldrh	r3, [r7, #14]
    4594:	ea42 0303 	orr.w	r3, r2, r3
    4598:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    459a:	683b      	ldr	r3, [r7, #0]
    459c:	885b      	ldrh	r3, [r3, #2]
    459e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    45a2:	b29a      	uxth	r2, r3
    45a4:	89fb      	ldrh	r3, [r7, #14]
    45a6:	ea42 0303 	orr.w	r3, r2, r3
    45aa:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    45ac:	687a      	ldr	r2, [r7, #4]
    45ae:	4b26      	ldr	r3, [pc, #152]	; (4648 <TIM_OC2Init+0x128>)
    45b0:	429a      	cmp	r2, r3
    45b2:	d003      	beq.n	45bc <TIM_OC2Init+0x9c>
    45b4:	687a      	ldr	r2, [r7, #4]
    45b6:	4b25      	ldr	r3, [pc, #148]	; (464c <TIM_OC2Init+0x12c>)
    45b8:	429a      	cmp	r2, r3
    45ba:	d133      	bne.n	4624 <TIM_OC2Init+0x104>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    45bc:	89fb      	ldrh	r3, [r7, #14]
    45be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    45c2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    45c4:	683b      	ldr	r3, [r7, #0]
    45c6:	895b      	ldrh	r3, [r3, #10]
    45c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    45cc:	b29a      	uxth	r2, r3
    45ce:	89fb      	ldrh	r3, [r7, #14]
    45d0:	ea42 0303 	orr.w	r3, r2, r3
    45d4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    45d6:	89fb      	ldrh	r3, [r7, #14]
    45d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    45dc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    45de:	683b      	ldr	r3, [r7, #0]
    45e0:	889b      	ldrh	r3, [r3, #4]
    45e2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    45e6:	b29a      	uxth	r2, r3
    45e8:	89fb      	ldrh	r3, [r7, #14]
    45ea:	ea42 0303 	orr.w	r3, r2, r3
    45ee:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    45f0:	89bb      	ldrh	r3, [r7, #12]
    45f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    45f6:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    45f8:	89bb      	ldrh	r3, [r7, #12]
    45fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    45fe:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    4600:	683b      	ldr	r3, [r7, #0]
    4602:	899b      	ldrh	r3, [r3, #12]
    4604:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4608:	b29a      	uxth	r2, r3
    460a:	89bb      	ldrh	r3, [r7, #12]
    460c:	ea42 0303 	orr.w	r3, r2, r3
    4610:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    4612:	683b      	ldr	r3, [r7, #0]
    4614:	89db      	ldrh	r3, [r3, #14]
    4616:	ea4f 0383 	mov.w	r3, r3, lsl #2
    461a:	b29a      	uxth	r2, r3
    461c:	89bb      	ldrh	r3, [r7, #12]
    461e:	ea42 0303 	orr.w	r3, r2, r3
    4622:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	89ba      	ldrh	r2, [r7, #12]
    4628:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	897a      	ldrh	r2, [r7, #10]
    462e:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    4630:	683b      	ldr	r3, [r7, #0]
    4632:	88da      	ldrh	r2, [r3, #6]
    4634:	687b      	ldr	r3, [r7, #4]
    4636:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	89fa      	ldrh	r2, [r7, #14]
    463c:	841a      	strh	r2, [r3, #32]
}
    463e:	f107 0714 	add.w	r7, r7, #20
    4642:	46bd      	mov	sp, r7
    4644:	bc80      	pop	{r7}
    4646:	4770      	bx	lr
    4648:	40012c00 	.word	0x40012c00
    464c:	40013400 	.word	0x40013400

00004650 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4650:	b480      	push	{r7}
    4652:	b085      	sub	sp, #20
    4654:	af00      	add	r7, sp, #0
    4656:	6078      	str	r0, [r7, #4]
    4658:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    465a:	f04f 0300 	mov.w	r3, #0
    465e:	817b      	strh	r3, [r7, #10]
    4660:	f04f 0300 	mov.w	r3, #0
    4664:	81fb      	strh	r3, [r7, #14]
    4666:	f04f 0300 	mov.w	r3, #0
    466a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	8c1b      	ldrh	r3, [r3, #32]
    4670:	b29b      	uxth	r3, r3
    4672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4676:	b29a      	uxth	r2, r3
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	8c1b      	ldrh	r3, [r3, #32]
    4680:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	889b      	ldrh	r3, [r3, #4]
    4686:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	8b9b      	ldrh	r3, [r3, #28]
    468c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    468e:	897b      	ldrh	r3, [r7, #10]
    4690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4694:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    4696:	897b      	ldrh	r3, [r7, #10]
    4698:	f023 0303 	bic.w	r3, r3, #3
    469c:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    469e:	683b      	ldr	r3, [r7, #0]
    46a0:	881a      	ldrh	r2, [r3, #0]
    46a2:	897b      	ldrh	r3, [r7, #10]
    46a4:	ea42 0303 	orr.w	r3, r2, r3
    46a8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    46aa:	89fb      	ldrh	r3, [r7, #14]
    46ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    46b0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	891b      	ldrh	r3, [r3, #8]
    46b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    46ba:	b29a      	uxth	r2, r3
    46bc:	89fb      	ldrh	r3, [r7, #14]
    46be:	ea42 0303 	orr.w	r3, r2, r3
    46c2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	885b      	ldrh	r3, [r3, #2]
    46c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
    46cc:	b29a      	uxth	r2, r3
    46ce:	89fb      	ldrh	r3, [r7, #14]
    46d0:	ea42 0303 	orr.w	r3, r2, r3
    46d4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    46d6:	687a      	ldr	r2, [r7, #4]
    46d8:	4b26      	ldr	r3, [pc, #152]	; (4774 <TIM_OC3Init+0x124>)
    46da:	429a      	cmp	r2, r3
    46dc:	d003      	beq.n	46e6 <TIM_OC3Init+0x96>
    46de:	687a      	ldr	r2, [r7, #4]
    46e0:	4b25      	ldr	r3, [pc, #148]	; (4778 <TIM_OC3Init+0x128>)
    46e2:	429a      	cmp	r2, r3
    46e4:	d133      	bne.n	474e <TIM_OC3Init+0xfe>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    46e6:	89fb      	ldrh	r3, [r7, #14]
    46e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    46ec:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    46ee:	683b      	ldr	r3, [r7, #0]
    46f0:	895b      	ldrh	r3, [r3, #10]
    46f2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    46f6:	b29a      	uxth	r2, r3
    46f8:	89fb      	ldrh	r3, [r7, #14]
    46fa:	ea42 0303 	orr.w	r3, r2, r3
    46fe:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    4700:	89fb      	ldrh	r3, [r7, #14]
    4702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4706:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    4708:	683b      	ldr	r3, [r7, #0]
    470a:	889b      	ldrh	r3, [r3, #4]
    470c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4710:	b29a      	uxth	r2, r3
    4712:	89fb      	ldrh	r3, [r7, #14]
    4714:	ea42 0303 	orr.w	r3, r2, r3
    4718:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    471a:	89bb      	ldrh	r3, [r7, #12]
    471c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4720:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    4722:	89bb      	ldrh	r3, [r7, #12]
    4724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4728:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    472a:	683b      	ldr	r3, [r7, #0]
    472c:	899b      	ldrh	r3, [r3, #12]
    472e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4732:	b29a      	uxth	r2, r3
    4734:	89bb      	ldrh	r3, [r7, #12]
    4736:	ea42 0303 	orr.w	r3, r2, r3
    473a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    473c:	683b      	ldr	r3, [r7, #0]
    473e:	89db      	ldrh	r3, [r3, #14]
    4740:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4744:	b29a      	uxth	r2, r3
    4746:	89bb      	ldrh	r3, [r7, #12]
    4748:	ea42 0303 	orr.w	r3, r2, r3
    474c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	89ba      	ldrh	r2, [r7, #12]
    4752:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	897a      	ldrh	r2, [r7, #10]
    4758:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    475a:	683b      	ldr	r3, [r7, #0]
    475c:	88da      	ldrh	r2, [r3, #6]
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	89fa      	ldrh	r2, [r7, #14]
    4766:	841a      	strh	r2, [r3, #32]
}
    4768:	f107 0714 	add.w	r7, r7, #20
    476c:	46bd      	mov	sp, r7
    476e:	bc80      	pop	{r7}
    4770:	4770      	bx	lr
    4772:	bf00      	nop
    4774:	40012c00 	.word	0x40012c00
    4778:	40013400 	.word	0x40013400

0000477c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    477c:	b480      	push	{r7}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    4786:	f04f 0300 	mov.w	r3, #0
    478a:	81bb      	strh	r3, [r7, #12]
    478c:	f04f 0300 	mov.w	r3, #0
    4790:	817b      	strh	r3, [r7, #10]
    4792:	f04f 0300 	mov.w	r3, #0
    4796:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	8c1b      	ldrh	r3, [r3, #32]
    479c:	b29b      	uxth	r3, r3
    479e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47a2:	b29a      	uxth	r2, r3
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	8c1b      	ldrh	r3, [r3, #32]
    47ac:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	889b      	ldrh	r3, [r3, #4]
    47b2:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	8b9b      	ldrh	r3, [r3, #28]
    47b8:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    47ba:	89bb      	ldrh	r3, [r7, #12]
    47bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    47c0:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    47c2:	89bb      	ldrh	r3, [r7, #12]
    47c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    47c8:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    47ca:	683b      	ldr	r3, [r7, #0]
    47cc:	881b      	ldrh	r3, [r3, #0]
    47ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
    47d2:	b29a      	uxth	r2, r3
    47d4:	89bb      	ldrh	r3, [r7, #12]
    47d6:	ea42 0303 	orr.w	r3, r2, r3
    47da:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    47dc:	897b      	ldrh	r3, [r7, #10]
    47de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    47e2:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    47e4:	683b      	ldr	r3, [r7, #0]
    47e6:	891b      	ldrh	r3, [r3, #8]
    47e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    47ec:	b29a      	uxth	r2, r3
    47ee:	897b      	ldrh	r3, [r7, #10]
    47f0:	ea42 0303 	orr.w	r3, r2, r3
    47f4:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    47f6:	683b      	ldr	r3, [r7, #0]
    47f8:	885b      	ldrh	r3, [r3, #2]
    47fa:	ea4f 3303 	mov.w	r3, r3, lsl #12
    47fe:	b29a      	uxth	r2, r3
    4800:	897b      	ldrh	r3, [r7, #10]
    4802:	ea42 0303 	orr.w	r3, r2, r3
    4806:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    4808:	687a      	ldr	r2, [r7, #4]
    480a:	4b13      	ldr	r3, [pc, #76]	; (4858 <TIM_OC4Init+0xdc>)
    480c:	429a      	cmp	r2, r3
    480e:	d003      	beq.n	4818 <TIM_OC4Init+0x9c>
    4810:	687a      	ldr	r2, [r7, #4]
    4812:	4b12      	ldr	r3, [pc, #72]	; (485c <TIM_OC4Init+0xe0>)
    4814:	429a      	cmp	r2, r3
    4816:	d10c      	bne.n	4832 <TIM_OC4Init+0xb6>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    4818:	89fb      	ldrh	r3, [r7, #14]
    481a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    481e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    4820:	683b      	ldr	r3, [r7, #0]
    4822:	899b      	ldrh	r3, [r3, #12]
    4824:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4828:	b29a      	uxth	r2, r3
    482a:	89fb      	ldrh	r3, [r7, #14]
    482c:	ea42 0303 	orr.w	r3, r2, r3
    4830:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	89fa      	ldrh	r2, [r7, #14]
    4836:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	89ba      	ldrh	r2, [r7, #12]
    483c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    483e:	683b      	ldr	r3, [r7, #0]
    4840:	88da      	ldrh	r2, [r3, #6]
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	897a      	ldrh	r2, [r7, #10]
    484c:	841a      	strh	r2, [r3, #32]
}
    484e:	f107 0714 	add.w	r7, r7, #20
    4852:	46bd      	mov	sp, r7
    4854:	bc80      	pop	{r7}
    4856:	4770      	bx	lr
    4858:	40012c00 	.word	0x40012c00
    485c:	40013400 	.word	0x40013400

00004860 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    4860:	b580      	push	{r7, lr}
    4862:	b082      	sub	sp, #8
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
    4868:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    486a:	683b      	ldr	r3, [r7, #0]
    486c:	881b      	ldrh	r3, [r3, #0]
    486e:	2b00      	cmp	r3, #0
    4870:	d10f      	bne.n	4892 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4872:	683b      	ldr	r3, [r7, #0]
    4874:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    4876:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4878:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    487a:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    487c:	891b      	ldrh	r3, [r3, #8]
    487e:	6878      	ldr	r0, [r7, #4]
    4880:	f001 fa0a 	bl	5c98 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4884:	683b      	ldr	r3, [r7, #0]
    4886:	88db      	ldrh	r3, [r3, #6]
    4888:	6878      	ldr	r0, [r7, #4]
    488a:	4619      	mov	r1, r3
    488c:	f001 f8a6 	bl	59dc <TIM_SetIC1Prescaler>
    4890:	e036      	b.n	4900 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    4892:	683b      	ldr	r3, [r7, #0]
    4894:	881b      	ldrh	r3, [r3, #0]
    4896:	2b04      	cmp	r3, #4
    4898:	d10f      	bne.n	48ba <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    489a:	683b      	ldr	r3, [r7, #0]
    489c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    489e:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    48a0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    48a2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    48a4:	891b      	ldrh	r3, [r3, #8]
    48a6:	6878      	ldr	r0, [r7, #4]
    48a8:	f001 fa68 	bl	5d7c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    48ac:	683b      	ldr	r3, [r7, #0]
    48ae:	88db      	ldrh	r3, [r3, #6]
    48b0:	6878      	ldr	r0, [r7, #4]
    48b2:	4619      	mov	r1, r3
    48b4:	f001 f8ae 	bl	5a14 <TIM_SetIC2Prescaler>
    48b8:	e022      	b.n	4900 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	881b      	ldrh	r3, [r3, #0]
    48be:	2b08      	cmp	r3, #8
    48c0:	d10f      	bne.n	48e2 <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    48c2:	683b      	ldr	r3, [r7, #0]
    48c4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    48c6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    48c8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    48ca:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    48cc:	891b      	ldrh	r3, [r3, #8]
    48ce:	6878      	ldr	r0, [r7, #4]
    48d0:	f001 fad4 	bl	5e7c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    48d4:	683b      	ldr	r3, [r7, #0]
    48d6:	88db      	ldrh	r3, [r3, #6]
    48d8:	6878      	ldr	r0, [r7, #4]
    48da:	4619      	mov	r1, r3
    48dc:	f001 f8ba 	bl	5a54 <TIM_SetIC3Prescaler>
    48e0:	e00e      	b.n	4900 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    48e2:	683b      	ldr	r3, [r7, #0]
    48e4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    48e6:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    48e8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    48ea:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    48ec:	891b      	ldrh	r3, [r3, #8]
    48ee:	6878      	ldr	r0, [r7, #4]
    48f0:	f001 fb3c 	bl	5f6c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    48f4:	683b      	ldr	r3, [r7, #0]
    48f6:	88db      	ldrh	r3, [r3, #6]
    48f8:	6878      	ldr	r0, [r7, #4]
    48fa:	4619      	mov	r1, r3
    48fc:	f001 f8c6 	bl	5a8c <TIM_SetIC4Prescaler>
  }
}
    4900:	f107 0708 	add.w	r7, r7, #8
    4904:	46bd      	mov	sp, r7
    4906:	bd80      	pop	{r7, pc}

00004908 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    4908:	b580      	push	{r7, lr}
    490a:	b084      	sub	sp, #16
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
    4910:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    4912:	f04f 0300 	mov.w	r3, #0
    4916:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    4918:	f04f 0301 	mov.w	r3, #1
    491c:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    491e:	683b      	ldr	r3, [r7, #0]
    4920:	885b      	ldrh	r3, [r3, #2]
    4922:	2b00      	cmp	r3, #0
    4924:	d103      	bne.n	492e <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    4926:	f04f 0302 	mov.w	r3, #2
    492a:	81fb      	strh	r3, [r7, #14]
    492c:	e002      	b.n	4934 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    492e:	f04f 0300 	mov.w	r3, #0
    4932:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    4934:	683b      	ldr	r3, [r7, #0]
    4936:	889b      	ldrh	r3, [r3, #4]
    4938:	2b01      	cmp	r3, #1
    493a:	d103      	bne.n	4944 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    493c:	f04f 0302 	mov.w	r3, #2
    4940:	81bb      	strh	r3, [r7, #12]
    4942:	e002      	b.n	494a <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    4944:	f04f 0301 	mov.w	r3, #1
    4948:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    494a:	683b      	ldr	r3, [r7, #0]
    494c:	881b      	ldrh	r3, [r3, #0]
    494e:	2b00      	cmp	r3, #0
    4950:	d11c      	bne.n	498c <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    4952:	683b      	ldr	r3, [r7, #0]
    4954:	8859      	ldrh	r1, [r3, #2]
    4956:	683b      	ldr	r3, [r7, #0]
    4958:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    495a:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    495c:	891b      	ldrh	r3, [r3, #8]
    495e:	6878      	ldr	r0, [r7, #4]
    4960:	f001 f99a 	bl	5c98 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4964:	683b      	ldr	r3, [r7, #0]
    4966:	88db      	ldrh	r3, [r3, #6]
    4968:	6878      	ldr	r0, [r7, #4]
    496a:	4619      	mov	r1, r3
    496c:	f001 f836 	bl	59dc <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    4970:	683b      	ldr	r3, [r7, #0]
    4972:	891b      	ldrh	r3, [r3, #8]
    4974:	89f9      	ldrh	r1, [r7, #14]
    4976:	89ba      	ldrh	r2, [r7, #12]
    4978:	6878      	ldr	r0, [r7, #4]
    497a:	f001 f9ff 	bl	5d7c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    497e:	683b      	ldr	r3, [r7, #0]
    4980:	88db      	ldrh	r3, [r3, #6]
    4982:	6878      	ldr	r0, [r7, #4]
    4984:	4619      	mov	r1, r3
    4986:	f001 f845 	bl	5a14 <TIM_SetIC2Prescaler>
    498a:	e01b      	b.n	49c4 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    498c:	683b      	ldr	r3, [r7, #0]
    498e:	8859      	ldrh	r1, [r3, #2]
    4990:	683b      	ldr	r3, [r7, #0]
    4992:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    4994:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    4996:	891b      	ldrh	r3, [r3, #8]
    4998:	6878      	ldr	r0, [r7, #4]
    499a:	f001 f9ef 	bl	5d7c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    499e:	683b      	ldr	r3, [r7, #0]
    49a0:	88db      	ldrh	r3, [r3, #6]
    49a2:	6878      	ldr	r0, [r7, #4]
    49a4:	4619      	mov	r1, r3
    49a6:	f001 f835 	bl	5a14 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    49aa:	683b      	ldr	r3, [r7, #0]
    49ac:	891b      	ldrh	r3, [r3, #8]
    49ae:	89f9      	ldrh	r1, [r7, #14]
    49b0:	89ba      	ldrh	r2, [r7, #12]
    49b2:	6878      	ldr	r0, [r7, #4]
    49b4:	f001 f970 	bl	5c98 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    49b8:	683b      	ldr	r3, [r7, #0]
    49ba:	88db      	ldrh	r3, [r3, #6]
    49bc:	6878      	ldr	r0, [r7, #4]
    49be:	4619      	mov	r1, r3
    49c0:	f001 f80c 	bl	59dc <TIM_SetIC1Prescaler>
  }
}
    49c4:	f107 0710 	add.w	r7, r7, #16
    49c8:	46bd      	mov	sp, r7
    49ca:	bd80      	pop	{r7, pc}

000049cc <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    49cc:	b480      	push	{r7}
    49ce:	b083      	sub	sp, #12
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
    49d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    49d6:	683b      	ldr	r3, [r7, #0]
    49d8:	881a      	ldrh	r2, [r3, #0]
    49da:	683b      	ldr	r3, [r7, #0]
    49dc:	885b      	ldrh	r3, [r3, #2]
    49de:	ea42 0303 	orr.w	r3, r2, r3
    49e2:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    49e4:	683b      	ldr	r3, [r7, #0]
    49e6:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    49e8:	ea42 0303 	orr.w	r3, r2, r3
    49ec:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    49ee:	683b      	ldr	r3, [r7, #0]
    49f0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    49f2:	ea42 0303 	orr.w	r3, r2, r3
    49f6:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    49f8:	683b      	ldr	r3, [r7, #0]
    49fa:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    49fc:	ea42 0303 	orr.w	r3, r2, r3
    4a00:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    4a02:	683b      	ldr	r3, [r7, #0]
    4a04:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    4a06:	ea42 0303 	orr.w	r3, r2, r3
    4a0a:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    4a0c:	683b      	ldr	r3, [r7, #0]
    4a0e:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    4a10:	ea42 0303 	orr.w	r3, r2, r3
    4a14:	b29a      	uxth	r2, r3
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    4a1c:	f107 070c 	add.w	r7, r7, #12
    4a20:	46bd      	mov	sp, r7
    4a22:	bc80      	pop	{r7}
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop

00004a28 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    4a28:	b480      	push	{r7}
    4a2a:	b083      	sub	sp, #12
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4a36:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	f04f 0200 	mov.w	r2, #0
    4a3e:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	f04f 0200 	mov.w	r2, #0
    4a46:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	f04f 0200 	mov.w	r2, #0
    4a4e:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    4a50:	687b      	ldr	r3, [r7, #4]
    4a52:	f04f 0200 	mov.w	r2, #0
    4a56:	721a      	strb	r2, [r3, #8]
}
    4a58:	f107 070c 	add.w	r7, r7, #12
    4a5c:	46bd      	mov	sp, r7
    4a5e:	bc80      	pop	{r7}
    4a60:	4770      	bx	lr
    4a62:	bf00      	nop

00004a64 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4a64:	b480      	push	{r7}
    4a66:	b083      	sub	sp, #12
    4a68:	af00      	add	r7, sp, #0
    4a6a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	f04f 0200 	mov.w	r2, #0
    4a72:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	f04f 0200 	mov.w	r2, #0
    4a7a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	f04f 0200 	mov.w	r2, #0
    4a82:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	f04f 0200 	mov.w	r2, #0
    4a8a:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	f04f 0200 	mov.w	r2, #0
    4a92:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	f04f 0200 	mov.w	r2, #0
    4a9a:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	f04f 0200 	mov.w	r2, #0
    4aa2:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    4aa4:	687b      	ldr	r3, [r7, #4]
    4aa6:	f04f 0200 	mov.w	r2, #0
    4aaa:	81da      	strh	r2, [r3, #14]
}
    4aac:	f107 070c 	add.w	r7, r7, #12
    4ab0:	46bd      	mov	sp, r7
    4ab2:	bc80      	pop	{r7}
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop

00004ab8 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    4ab8:	b480      	push	{r7}
    4aba:	b083      	sub	sp, #12
    4abc:	af00      	add	r7, sp, #0
    4abe:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	f04f 0200 	mov.w	r2, #0
    4ac6:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	f04f 0200 	mov.w	r2, #0
    4ace:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	f04f 0201 	mov.w	r2, #1
    4ad6:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	f04f 0200 	mov.w	r2, #0
    4ade:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	f04f 0200 	mov.w	r2, #0
    4ae6:	811a      	strh	r2, [r3, #8]
}
    4ae8:	f107 070c 	add.w	r7, r7, #12
    4aec:	46bd      	mov	sp, r7
    4aee:	bc80      	pop	{r7}
    4af0:	4770      	bx	lr
    4af2:	bf00      	nop

00004af4 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    4af4:	b480      	push	{r7}
    4af6:	b083      	sub	sp, #12
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	f04f 0200 	mov.w	r2, #0
    4b02:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	f04f 0200 	mov.w	r2, #0
    4b0a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	f04f 0200 	mov.w	r2, #0
    4b12:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	f04f 0200 	mov.w	r2, #0
    4b1a:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	f04f 0200 	mov.w	r2, #0
    4b22:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	f04f 0200 	mov.w	r2, #0
    4b2a:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	f04f 0200 	mov.w	r2, #0
    4b32:	819a      	strh	r2, [r3, #12]
}
    4b34:	f107 070c 	add.w	r7, r7, #12
    4b38:	46bd      	mov	sp, r7
    4b3a:	bc80      	pop	{r7}
    4b3c:	4770      	bx	lr
    4b3e:	bf00      	nop

00004b40 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4b40:	b480      	push	{r7}
    4b42:	b083      	sub	sp, #12
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
    4b48:	460b      	mov	r3, r1
    4b4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4b4c:	78fb      	ldrb	r3, [r7, #3]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d008      	beq.n	4b64 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    4b52:	687b      	ldr	r3, [r7, #4]
    4b54:	881b      	ldrh	r3, [r3, #0]
    4b56:	b29b      	uxth	r3, r3
    4b58:	f043 0301 	orr.w	r3, r3, #1
    4b5c:	b29a      	uxth	r2, r3
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	801a      	strh	r2, [r3, #0]
    4b62:	e007      	b.n	4b74 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	881b      	ldrh	r3, [r3, #0]
    4b68:	b29b      	uxth	r3, r3
    4b6a:	f023 0301 	bic.w	r3, r3, #1
    4b6e:	b29a      	uxth	r2, r3
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	801a      	strh	r2, [r3, #0]
  }
}
    4b74:	f107 070c 	add.w	r7, r7, #12
    4b78:	46bd      	mov	sp, r7
    4b7a:	bc80      	pop	{r7}
    4b7c:	4770      	bx	lr
    4b7e:	bf00      	nop

00004b80 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4b80:	b480      	push	{r7}
    4b82:	b083      	sub	sp, #12
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
    4b88:	460b      	mov	r3, r1
    4b8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4b8c:	78fb      	ldrb	r3, [r7, #3]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d00c      	beq.n	4bac <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    4b98:	b29b      	uxth	r3, r3
    4b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    4b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    4baa:	e00b      	b.n	4bc4 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    4bb2:	b29b      	uxth	r3, r3
    4bb4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    4bb8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    4bbc:	b29a      	uxth	r2, r3
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
    4bc4:	f107 070c 	add.w	r7, r7, #12
    4bc8:	46bd      	mov	sp, r7
    4bca:	bc80      	pop	{r7}
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop

00004bd0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    4bd0:	b480      	push	{r7}
    4bd2:	b083      	sub	sp, #12
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	6078      	str	r0, [r7, #4]
    4bd8:	4613      	mov	r3, r2
    4bda:	460a      	mov	r2, r1
    4bdc:	807a      	strh	r2, [r7, #2]
    4bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4be0:	787b      	ldrb	r3, [r7, #1]
    4be2:	2b00      	cmp	r3, #0
    4be4:	d009      	beq.n	4bfa <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	899b      	ldrh	r3, [r3, #12]
    4bea:	b29a      	uxth	r2, r3
    4bec:	887b      	ldrh	r3, [r7, #2]
    4bee:	ea42 0303 	orr.w	r3, r2, r3
    4bf2:	b29a      	uxth	r2, r3
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	819a      	strh	r2, [r3, #12]
    4bf8:	e00b      	b.n	4c12 <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	899b      	ldrh	r3, [r3, #12]
    4bfe:	b29a      	uxth	r2, r3
    4c00:	887b      	ldrh	r3, [r7, #2]
    4c02:	ea6f 0303 	mvn.w	r3, r3
    4c06:	b29b      	uxth	r3, r3
    4c08:	ea02 0303 	and.w	r3, r2, r3
    4c0c:	b29a      	uxth	r2, r3
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	819a      	strh	r2, [r3, #12]
  }
}
    4c12:	f107 070c 	add.w	r7, r7, #12
    4c16:	46bd      	mov	sp, r7
    4c18:	bc80      	pop	{r7}
    4c1a:	4770      	bx	lr

00004c1c <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    4c1c:	b480      	push	{r7}
    4c1e:	b083      	sub	sp, #12
    4c20:	af00      	add	r7, sp, #0
    4c22:	6078      	str	r0, [r7, #4]
    4c24:	460b      	mov	r3, r1
    4c26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	887a      	ldrh	r2, [r7, #2]
    4c2c:	829a      	strh	r2, [r3, #20]
}
    4c2e:	f107 070c 	add.w	r7, r7, #12
    4c32:	46bd      	mov	sp, r7
    4c34:	bc80      	pop	{r7}
    4c36:	4770      	bx	lr

00004c38 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    4c38:	b480      	push	{r7}
    4c3a:	b083      	sub	sp, #12
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
    4c40:	4613      	mov	r3, r2
    4c42:	460a      	mov	r2, r1
    4c44:	807a      	strh	r2, [r7, #2]
    4c46:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    4c48:	887a      	ldrh	r2, [r7, #2]
    4c4a:	883b      	ldrh	r3, [r7, #0]
    4c4c:	ea42 0303 	orr.w	r3, r2, r3
    4c50:	b29a      	uxth	r2, r3
    4c52:	687b      	ldr	r3, [r7, #4]
    4c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    4c58:	f107 070c 	add.w	r7, r7, #12
    4c5c:	46bd      	mov	sp, r7
    4c5e:	bc80      	pop	{r7}
    4c60:	4770      	bx	lr
    4c62:	bf00      	nop

00004c64 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    4c64:	b480      	push	{r7}
    4c66:	b083      	sub	sp, #12
    4c68:	af00      	add	r7, sp, #0
    4c6a:	6078      	str	r0, [r7, #4]
    4c6c:	4613      	mov	r3, r2
    4c6e:	460a      	mov	r2, r1
    4c70:	807a      	strh	r2, [r7, #2]
    4c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c74:	787b      	ldrb	r3, [r7, #1]
    4c76:	2b00      	cmp	r3, #0
    4c78:	d009      	beq.n	4c8e <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	899b      	ldrh	r3, [r3, #12]
    4c7e:	b29a      	uxth	r2, r3
    4c80:	887b      	ldrh	r3, [r7, #2]
    4c82:	ea42 0303 	orr.w	r3, r2, r3
    4c86:	b29a      	uxth	r2, r3
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	819a      	strh	r2, [r3, #12]
    4c8c:	e00b      	b.n	4ca6 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	899b      	ldrh	r3, [r3, #12]
    4c92:	b29a      	uxth	r2, r3
    4c94:	887b      	ldrh	r3, [r7, #2]
    4c96:	ea6f 0303 	mvn.w	r3, r3
    4c9a:	b29b      	uxth	r3, r3
    4c9c:	ea02 0303 	and.w	r3, r2, r3
    4ca0:	b29a      	uxth	r2, r3
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	819a      	strh	r2, [r3, #12]
  }
}
    4ca6:	f107 070c 	add.w	r7, r7, #12
    4caa:	46bd      	mov	sp, r7
    4cac:	bc80      	pop	{r7}
    4cae:	4770      	bx	lr

00004cb0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    4cb0:	b480      	push	{r7}
    4cb2:	b083      	sub	sp, #12
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	891b      	ldrh	r3, [r3, #8]
    4cbc:	b29b      	uxth	r3, r3
    4cbe:	f023 0307 	bic.w	r3, r3, #7
    4cc2:	b29a      	uxth	r2, r3
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	811a      	strh	r2, [r3, #8]
}
    4cc8:	f107 070c 	add.w	r7, r7, #12
    4ccc:	46bd      	mov	sp, r7
    4cce:	bc80      	pop	{r7}
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop

00004cd4 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
    4cdc:	460b      	mov	r3, r1
    4cde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    4ce0:	887b      	ldrh	r3, [r7, #2]
    4ce2:	6878      	ldr	r0, [r7, #4]
    4ce4:	4619      	mov	r1, r3
    4ce6:	f000 f8d9 	bl	4e9c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	891b      	ldrh	r3, [r3, #8]
    4cee:	b29b      	uxth	r3, r3
    4cf0:	f043 0307 	orr.w	r3, r3, #7
    4cf4:	b29a      	uxth	r2, r3
    4cf6:	687b      	ldr	r3, [r7, #4]
    4cf8:	811a      	strh	r2, [r3, #8]
}
    4cfa:	f107 0708 	add.w	r7, r7, #8
    4cfe:	46bd      	mov	sp, r7
    4d00:	bd80      	pop	{r7, pc}
    4d02:	bf00      	nop

00004d04 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    4d04:	b580      	push	{r7, lr}
    4d06:	b084      	sub	sp, #16
    4d08:	af00      	add	r7, sp, #0
    4d0a:	60f8      	str	r0, [r7, #12]
    4d0c:	8179      	strh	r1, [r7, #10]
    4d0e:	813a      	strh	r2, [r7, #8]
    4d10:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    4d12:	897b      	ldrh	r3, [r7, #10]
    4d14:	2b60      	cmp	r3, #96	; 0x60
    4d16:	d108      	bne.n	4d2a <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    4d18:	893a      	ldrh	r2, [r7, #8]
    4d1a:	88fb      	ldrh	r3, [r7, #6]
    4d1c:	68f8      	ldr	r0, [r7, #12]
    4d1e:	4611      	mov	r1, r2
    4d20:	f04f 0201 	mov.w	r2, #1
    4d24:	f001 f82a 	bl	5d7c <TI2_Config>
    4d28:	e007      	b.n	4d3a <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    4d2a:	893a      	ldrh	r2, [r7, #8]
    4d2c:	88fb      	ldrh	r3, [r7, #6]
    4d2e:	68f8      	ldr	r0, [r7, #12]
    4d30:	4611      	mov	r1, r2
    4d32:	f04f 0201 	mov.w	r2, #1
    4d36:	f000 ffaf 	bl	5c98 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    4d3a:	897b      	ldrh	r3, [r7, #10]
    4d3c:	68f8      	ldr	r0, [r7, #12]
    4d3e:	4619      	mov	r1, r3
    4d40:	f000 f8ac 	bl	4e9c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	891b      	ldrh	r3, [r3, #8]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	f043 0307 	orr.w	r3, r3, #7
    4d4e:	b29a      	uxth	r2, r3
    4d50:	68fb      	ldr	r3, [r7, #12]
    4d52:	811a      	strh	r2, [r3, #8]
}
    4d54:	f107 0710 	add.w	r7, r7, #16
    4d58:	46bd      	mov	sp, r7
    4d5a:	bd80      	pop	{r7, pc}

00004d5c <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    4d5c:	b580      	push	{r7, lr}
    4d5e:	b086      	sub	sp, #24
    4d60:	af00      	add	r7, sp, #0
    4d62:	60f8      	str	r0, [r7, #12]
    4d64:	8179      	strh	r1, [r7, #10]
    4d66:	813a      	strh	r2, [r7, #8]
    4d68:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4d6a:	f04f 0300 	mov.w	r3, #0
    4d6e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4d70:	8979      	ldrh	r1, [r7, #10]
    4d72:	893a      	ldrh	r2, [r7, #8]
    4d74:	88fb      	ldrh	r3, [r7, #6]
    4d76:	68f8      	ldr	r0, [r7, #12]
    4d78:	f000 f834 	bl	4de4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4d7c:	68fb      	ldr	r3, [r7, #12]
    4d7e:	891b      	ldrh	r3, [r3, #8]
    4d80:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4d82:	8afb      	ldrh	r3, [r7, #22]
    4d84:	f023 0307 	bic.w	r3, r3, #7
    4d88:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    4d8a:	8afb      	ldrh	r3, [r7, #22]
    4d8c:	f043 0307 	orr.w	r3, r3, #7
    4d90:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    4d92:	8afb      	ldrh	r3, [r7, #22]
    4d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4d98:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    4d9a:	8afb      	ldrh	r3, [r7, #22]
    4d9c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4da0:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4da2:	68fb      	ldr	r3, [r7, #12]
    4da4:	8afa      	ldrh	r2, [r7, #22]
    4da6:	811a      	strh	r2, [r3, #8]
}
    4da8:	f107 0718 	add.w	r7, r7, #24
    4dac:	46bd      	mov	sp, r7
    4dae:	bd80      	pop	{r7, pc}

00004db0 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    4db0:	b580      	push	{r7, lr}
    4db2:	b084      	sub	sp, #16
    4db4:	af00      	add	r7, sp, #0
    4db6:	60f8      	str	r0, [r7, #12]
    4db8:	8179      	strh	r1, [r7, #10]
    4dba:	813a      	strh	r2, [r7, #8]
    4dbc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4dbe:	8979      	ldrh	r1, [r7, #10]
    4dc0:	893a      	ldrh	r2, [r7, #8]
    4dc2:	88fb      	ldrh	r3, [r7, #6]
    4dc4:	68f8      	ldr	r0, [r7, #12]
    4dc6:	f000 f80d 	bl	4de4 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	891b      	ldrh	r3, [r3, #8]
    4dce:	b29b      	uxth	r3, r3
    4dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4dd4:	b29a      	uxth	r2, r3
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	811a      	strh	r2, [r3, #8]
}
    4dda:	f107 0710 	add.w	r7, r7, #16
    4dde:	46bd      	mov	sp, r7
    4de0:	bd80      	pop	{r7, pc}
    4de2:	bf00      	nop

00004de4 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    4de4:	b480      	push	{r7}
    4de6:	b087      	sub	sp, #28
    4de8:	af00      	add	r7, sp, #0
    4dea:	60f8      	str	r0, [r7, #12]
    4dec:	8179      	strh	r1, [r7, #10]
    4dee:	813a      	strh	r2, [r7, #8]
    4df0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4df2:	f04f 0300 	mov.w	r3, #0
    4df6:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	891b      	ldrh	r3, [r3, #8]
    4dfc:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    4dfe:	8afb      	ldrh	r3, [r7, #22]
    4e00:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4e04:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    4e06:	88fb      	ldrh	r3, [r7, #6]
    4e08:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4e0c:	b29a      	uxth	r2, r3
    4e0e:	893b      	ldrh	r3, [r7, #8]
    4e10:	ea42 0303 	orr.w	r3, r2, r3
    4e14:	b29a      	uxth	r2, r3
    4e16:	897b      	ldrh	r3, [r7, #10]
    4e18:	ea42 0303 	orr.w	r3, r2, r3
    4e1c:	b29a      	uxth	r2, r3
    4e1e:	8afb      	ldrh	r3, [r7, #22]
    4e20:	ea42 0303 	orr.w	r3, r2, r3
    4e24:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4e26:	68fb      	ldr	r3, [r7, #12]
    4e28:	8afa      	ldrh	r2, [r7, #22]
    4e2a:	811a      	strh	r2, [r3, #8]
}
    4e2c:	f107 071c 	add.w	r7, r7, #28
    4e30:	46bd      	mov	sp, r7
    4e32:	bc80      	pop	{r7}
    4e34:	4770      	bx	lr
    4e36:	bf00      	nop

00004e38 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    4e38:	b480      	push	{r7}
    4e3a:	b083      	sub	sp, #12
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
    4e40:	4613      	mov	r3, r2
    4e42:	460a      	mov	r2, r1
    4e44:	807a      	strh	r2, [r7, #2]
    4e46:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	887a      	ldrh	r2, [r7, #2]
    4e4c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	883a      	ldrh	r2, [r7, #0]
    4e52:	829a      	strh	r2, [r3, #20]
}
    4e54:	f107 070c 	add.w	r7, r7, #12
    4e58:	46bd      	mov	sp, r7
    4e5a:	bc80      	pop	{r7}
    4e5c:	4770      	bx	lr
    4e5e:	bf00      	nop

00004e60 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    4e60:	b480      	push	{r7}
    4e62:	b085      	sub	sp, #20
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]
    4e68:	460b      	mov	r3, r1
    4e6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    4e6c:	f04f 0300 	mov.w	r3, #0
    4e70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4e78:	89fb      	ldrh	r3, [r7, #14]
    4e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4e7e:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    4e80:	89fa      	ldrh	r2, [r7, #14]
    4e82:	887b      	ldrh	r3, [r7, #2]
    4e84:	ea42 0303 	orr.w	r3, r2, r3
    4e88:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	89fa      	ldrh	r2, [r7, #14]
    4e8e:	801a      	strh	r2, [r3, #0]
}
    4e90:	f107 0714 	add.w	r7, r7, #20
    4e94:	46bd      	mov	sp, r7
    4e96:	bc80      	pop	{r7}
    4e98:	4770      	bx	lr
    4e9a:	bf00      	nop

00004e9c <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4e9c:	b480      	push	{r7}
    4e9e:	b085      	sub	sp, #20
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	6078      	str	r0, [r7, #4]
    4ea4:	460b      	mov	r3, r1
    4ea6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    4ea8:	f04f 0300 	mov.w	r3, #0
    4eac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	891b      	ldrh	r3, [r3, #8]
    4eb2:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    4eb4:	89fb      	ldrh	r3, [r7, #14]
    4eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4eba:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    4ebc:	89fa      	ldrh	r2, [r7, #14]
    4ebe:	887b      	ldrh	r3, [r7, #2]
    4ec0:	ea42 0303 	orr.w	r3, r2, r3
    4ec4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	89fa      	ldrh	r2, [r7, #14]
    4eca:	811a      	strh	r2, [r3, #8]
}
    4ecc:	f107 0714 	add.w	r7, r7, #20
    4ed0:	46bd      	mov	sp, r7
    4ed2:	bc80      	pop	{r7}
    4ed4:	4770      	bx	lr
    4ed6:	bf00      	nop

00004ed8 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    4ed8:	b480      	push	{r7}
    4eda:	b087      	sub	sp, #28
    4edc:	af00      	add	r7, sp, #0
    4ede:	60f8      	str	r0, [r7, #12]
    4ee0:	8179      	strh	r1, [r7, #10]
    4ee2:	813a      	strh	r2, [r7, #8]
    4ee4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4ee6:	f04f 0300 	mov.w	r3, #0
    4eea:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    4eec:	f04f 0300 	mov.w	r3, #0
    4ef0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    4ef2:	f04f 0300 	mov.w	r3, #0
    4ef6:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4ef8:	68fb      	ldr	r3, [r7, #12]
    4efa:	891b      	ldrh	r3, [r3, #8]
    4efc:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	8b1b      	ldrh	r3, [r3, #24]
    4f02:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    4f04:	68fb      	ldr	r3, [r7, #12]
    4f06:	8c1b      	ldrh	r3, [r3, #32]
    4f08:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4f0a:	8afb      	ldrh	r3, [r7, #22]
    4f0c:	f023 0307 	bic.w	r3, r3, #7
    4f10:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    4f12:	8afa      	ldrh	r2, [r7, #22]
    4f14:	897b      	ldrh	r3, [r7, #10]
    4f16:	ea42 0303 	orr.w	r3, r2, r3
    4f1a:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    4f1c:	8abb      	ldrh	r3, [r7, #20]
    4f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4f22:	f023 0303 	bic.w	r3, r3, #3
    4f26:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    4f28:	8abb      	ldrh	r3, [r7, #20]
    4f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4f2e:	f043 0301 	orr.w	r3, r3, #1
    4f32:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    4f34:	8a7b      	ldrh	r3, [r7, #18]
    4f36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    4f3a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    4f3c:	88fb      	ldrh	r3, [r7, #6]
    4f3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4f42:	b29a      	uxth	r2, r3
    4f44:	893b      	ldrh	r3, [r7, #8]
    4f46:	ea42 0303 	orr.w	r3, r2, r3
    4f4a:	b29a      	uxth	r2, r3
    4f4c:	8a7b      	ldrh	r3, [r7, #18]
    4f4e:	ea42 0303 	orr.w	r3, r2, r3
    4f52:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4f54:	68fb      	ldr	r3, [r7, #12]
    4f56:	8afa      	ldrh	r2, [r7, #22]
    4f58:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4f5a:	68fb      	ldr	r3, [r7, #12]
    4f5c:	8aba      	ldrh	r2, [r7, #20]
    4f5e:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4f60:	68fb      	ldr	r3, [r7, #12]
    4f62:	8a7a      	ldrh	r2, [r7, #18]
    4f64:	841a      	strh	r2, [r3, #32]
}
    4f66:	f107 071c 	add.w	r7, r7, #28
    4f6a:	46bd      	mov	sp, r7
    4f6c:	bc80      	pop	{r7}
    4f6e:	4770      	bx	lr

00004f70 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4f70:	b480      	push	{r7}
    4f72:	b085      	sub	sp, #20
    4f74:	af00      	add	r7, sp, #0
    4f76:	6078      	str	r0, [r7, #4]
    4f78:	460b      	mov	r3, r1
    4f7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4f7c:	f04f 0300 	mov.w	r3, #0
    4f80:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	8b1b      	ldrh	r3, [r3, #24]
    4f86:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    4f88:	89fb      	ldrh	r3, [r7, #14]
    4f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4f8e:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    4f90:	89fa      	ldrh	r2, [r7, #14]
    4f92:	887b      	ldrh	r3, [r7, #2]
    4f94:	ea42 0303 	orr.w	r3, r2, r3
    4f98:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	89fa      	ldrh	r2, [r7, #14]
    4f9e:	831a      	strh	r2, [r3, #24]
}
    4fa0:	f107 0714 	add.w	r7, r7, #20
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bc80      	pop	{r7}
    4fa8:	4770      	bx	lr
    4faa:	bf00      	nop

00004fac <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4fac:	b480      	push	{r7}
    4fae:	b085      	sub	sp, #20
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	6078      	str	r0, [r7, #4]
    4fb4:	460b      	mov	r3, r1
    4fb6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4fb8:	f04f 0300 	mov.w	r3, #0
    4fbc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	8b1b      	ldrh	r3, [r3, #24]
    4fc2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    4fc4:	89fb      	ldrh	r3, [r7, #14]
    4fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4fca:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    4fcc:	887b      	ldrh	r3, [r7, #2]
    4fce:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4fd2:	b29a      	uxth	r2, r3
    4fd4:	89fb      	ldrh	r3, [r7, #14]
    4fd6:	ea42 0303 	orr.w	r3, r2, r3
    4fda:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	89fa      	ldrh	r2, [r7, #14]
    4fe0:	831a      	strh	r2, [r3, #24]
}
    4fe2:	f107 0714 	add.w	r7, r7, #20
    4fe6:	46bd      	mov	sp, r7
    4fe8:	bc80      	pop	{r7}
    4fea:	4770      	bx	lr

00004fec <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4fec:	b480      	push	{r7}
    4fee:	b085      	sub	sp, #20
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
    4ff4:	460b      	mov	r3, r1
    4ff6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4ff8:	f04f 0300 	mov.w	r3, #0
    4ffc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	8b9b      	ldrh	r3, [r3, #28]
    5002:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    5004:	89fb      	ldrh	r3, [r7, #14]
    5006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    500a:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    500c:	89fa      	ldrh	r2, [r7, #14]
    500e:	887b      	ldrh	r3, [r7, #2]
    5010:	ea42 0303 	orr.w	r3, r2, r3
    5014:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	89fa      	ldrh	r2, [r7, #14]
    501a:	839a      	strh	r2, [r3, #28]
}
    501c:	f107 0714 	add.w	r7, r7, #20
    5020:	46bd      	mov	sp, r7
    5022:	bc80      	pop	{r7}
    5024:	4770      	bx	lr
    5026:	bf00      	nop

00005028 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    5028:	b480      	push	{r7}
    502a:	b085      	sub	sp, #20
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
    5030:	460b      	mov	r3, r1
    5032:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5034:	f04f 0300 	mov.w	r3, #0
    5038:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	8b9b      	ldrh	r3, [r3, #28]
    503e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    5040:	89fb      	ldrh	r3, [r7, #14]
    5042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    5046:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    5048:	887b      	ldrh	r3, [r7, #2]
    504a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    504e:	b29a      	uxth	r2, r3
    5050:	89fb      	ldrh	r3, [r7, #14]
    5052:	ea42 0303 	orr.w	r3, r2, r3
    5056:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	89fa      	ldrh	r2, [r7, #14]
    505c:	839a      	strh	r2, [r3, #28]
}
    505e:	f107 0714 	add.w	r7, r7, #20
    5062:	46bd      	mov	sp, r7
    5064:	bc80      	pop	{r7}
    5066:	4770      	bx	lr

00005068 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5068:	b480      	push	{r7}
    506a:	b083      	sub	sp, #12
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	460b      	mov	r3, r1
    5072:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5074:	78fb      	ldrb	r3, [r7, #3]
    5076:	2b00      	cmp	r3, #0
    5078:	d008      	beq.n	508c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	881b      	ldrh	r3, [r3, #0]
    507e:	b29b      	uxth	r3, r3
    5080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5084:	b29a      	uxth	r2, r3
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	801a      	strh	r2, [r3, #0]
    508a:	e007      	b.n	509c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	881b      	ldrh	r3, [r3, #0]
    5090:	b29b      	uxth	r3, r3
    5092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5096:	b29a      	uxth	r2, r3
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	801a      	strh	r2, [r3, #0]
  }
}
    509c:	f107 070c 	add.w	r7, r7, #12
    50a0:	46bd      	mov	sp, r7
    50a2:	bc80      	pop	{r7}
    50a4:	4770      	bx	lr
    50a6:	bf00      	nop

000050a8 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    50a8:	b480      	push	{r7}
    50aa:	b083      	sub	sp, #12
    50ac:	af00      	add	r7, sp, #0
    50ae:	6078      	str	r0, [r7, #4]
    50b0:	460b      	mov	r3, r1
    50b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    50b4:	78fb      	ldrb	r3, [r7, #3]
    50b6:	2b00      	cmp	r3, #0
    50b8:	d008      	beq.n	50cc <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	889b      	ldrh	r3, [r3, #4]
    50be:	b29b      	uxth	r3, r3
    50c0:	f043 0304 	orr.w	r3, r3, #4
    50c4:	b29a      	uxth	r2, r3
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	809a      	strh	r2, [r3, #4]
    50ca:	e007      	b.n	50dc <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	889b      	ldrh	r3, [r3, #4]
    50d0:	b29b      	uxth	r3, r3
    50d2:	f023 0304 	bic.w	r3, r3, #4
    50d6:	b29a      	uxth	r2, r3
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	809a      	strh	r2, [r3, #4]
  }
}
    50dc:	f107 070c 	add.w	r7, r7, #12
    50e0:	46bd      	mov	sp, r7
    50e2:	bc80      	pop	{r7}
    50e4:	4770      	bx	lr
    50e6:	bf00      	nop

000050e8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    50e8:	b480      	push	{r7}
    50ea:	b083      	sub	sp, #12
    50ec:	af00      	add	r7, sp, #0
    50ee:	6078      	str	r0, [r7, #4]
    50f0:	460b      	mov	r3, r1
    50f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    50f4:	78fb      	ldrb	r3, [r7, #3]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d008      	beq.n	510c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	889b      	ldrh	r3, [r3, #4]
    50fe:	b29b      	uxth	r3, r3
    5100:	f043 0308 	orr.w	r3, r3, #8
    5104:	b29a      	uxth	r2, r3
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	809a      	strh	r2, [r3, #4]
    510a:	e007      	b.n	511c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	889b      	ldrh	r3, [r3, #4]
    5110:	b29b      	uxth	r3, r3
    5112:	f023 0308 	bic.w	r3, r3, #8
    5116:	b29a      	uxth	r2, r3
    5118:	687b      	ldr	r3, [r7, #4]
    511a:	809a      	strh	r2, [r3, #4]
  }
}
    511c:	f107 070c 	add.w	r7, r7, #12
    5120:	46bd      	mov	sp, r7
    5122:	bc80      	pop	{r7}
    5124:	4770      	bx	lr
    5126:	bf00      	nop

00005128 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    5128:	b480      	push	{r7}
    512a:	b083      	sub	sp, #12
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	460b      	mov	r3, r1
    5132:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5134:	78fb      	ldrb	r3, [r7, #3]
    5136:	2b00      	cmp	r3, #0
    5138:	d008      	beq.n	514c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	889b      	ldrh	r3, [r3, #4]
    513e:	b29b      	uxth	r3, r3
    5140:	f043 0301 	orr.w	r3, r3, #1
    5144:	b29a      	uxth	r2, r3
    5146:	687b      	ldr	r3, [r7, #4]
    5148:	809a      	strh	r2, [r3, #4]
    514a:	e007      	b.n	515c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	889b      	ldrh	r3, [r3, #4]
    5150:	b29b      	uxth	r3, r3
    5152:	f023 0301 	bic.w	r3, r3, #1
    5156:	b29a      	uxth	r2, r3
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	809a      	strh	r2, [r3, #4]
  }
}
    515c:	f107 070c 	add.w	r7, r7, #12
    5160:	46bd      	mov	sp, r7
    5162:	bc80      	pop	{r7}
    5164:	4770      	bx	lr
    5166:	bf00      	nop

00005168 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5168:	b480      	push	{r7}
    516a:	b085      	sub	sp, #20
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
    5170:	460b      	mov	r3, r1
    5172:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5174:	f04f 0300 	mov.w	r3, #0
    5178:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	8b1b      	ldrh	r3, [r3, #24]
    517e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    5180:	89fb      	ldrh	r3, [r7, #14]
    5182:	f023 0308 	bic.w	r3, r3, #8
    5186:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    5188:	89fa      	ldrh	r2, [r7, #14]
    518a:	887b      	ldrh	r3, [r7, #2]
    518c:	ea42 0303 	orr.w	r3, r2, r3
    5190:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	89fa      	ldrh	r2, [r7, #14]
    5196:	831a      	strh	r2, [r3, #24]
}
    5198:	f107 0714 	add.w	r7, r7, #20
    519c:	46bd      	mov	sp, r7
    519e:	bc80      	pop	{r7}
    51a0:	4770      	bx	lr
    51a2:	bf00      	nop

000051a4 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    51a4:	b480      	push	{r7}
    51a6:	b085      	sub	sp, #20
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
    51ac:	460b      	mov	r3, r1
    51ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    51b0:	f04f 0300 	mov.w	r3, #0
    51b4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	8b1b      	ldrh	r3, [r3, #24]
    51ba:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    51bc:	89fb      	ldrh	r3, [r7, #14]
    51be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    51c2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    51c4:	887b      	ldrh	r3, [r7, #2]
    51c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    51ca:	b29a      	uxth	r2, r3
    51cc:	89fb      	ldrh	r3, [r7, #14]
    51ce:	ea42 0303 	orr.w	r3, r2, r3
    51d2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	89fa      	ldrh	r2, [r7, #14]
    51d8:	831a      	strh	r2, [r3, #24]
}
    51da:	f107 0714 	add.w	r7, r7, #20
    51de:	46bd      	mov	sp, r7
    51e0:	bc80      	pop	{r7}
    51e2:	4770      	bx	lr

000051e4 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    51e4:	b480      	push	{r7}
    51e6:	b085      	sub	sp, #20
    51e8:	af00      	add	r7, sp, #0
    51ea:	6078      	str	r0, [r7, #4]
    51ec:	460b      	mov	r3, r1
    51ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    51f0:	f04f 0300 	mov.w	r3, #0
    51f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	8b9b      	ldrh	r3, [r3, #28]
    51fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    51fc:	89fb      	ldrh	r3, [r7, #14]
    51fe:	f023 0308 	bic.w	r3, r3, #8
    5202:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    5204:	89fa      	ldrh	r2, [r7, #14]
    5206:	887b      	ldrh	r3, [r7, #2]
    5208:	ea42 0303 	orr.w	r3, r2, r3
    520c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	89fa      	ldrh	r2, [r7, #14]
    5212:	839a      	strh	r2, [r3, #28]
}
    5214:	f107 0714 	add.w	r7, r7, #20
    5218:	46bd      	mov	sp, r7
    521a:	bc80      	pop	{r7}
    521c:	4770      	bx	lr
    521e:	bf00      	nop

00005220 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5220:	b480      	push	{r7}
    5222:	b085      	sub	sp, #20
    5224:	af00      	add	r7, sp, #0
    5226:	6078      	str	r0, [r7, #4]
    5228:	460b      	mov	r3, r1
    522a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    522c:	f04f 0300 	mov.w	r3, #0
    5230:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	8b9b      	ldrh	r3, [r3, #28]
    5236:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    5238:	89fb      	ldrh	r3, [r7, #14]
    523a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    523e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    5240:	887b      	ldrh	r3, [r7, #2]
    5242:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5246:	b29a      	uxth	r2, r3
    5248:	89fb      	ldrh	r3, [r7, #14]
    524a:	ea42 0303 	orr.w	r3, r2, r3
    524e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	89fa      	ldrh	r2, [r7, #14]
    5254:	839a      	strh	r2, [r3, #28]
}
    5256:	f107 0714 	add.w	r7, r7, #20
    525a:	46bd      	mov	sp, r7
    525c:	bc80      	pop	{r7}
    525e:	4770      	bx	lr

00005260 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5260:	b480      	push	{r7}
    5262:	b085      	sub	sp, #20
    5264:	af00      	add	r7, sp, #0
    5266:	6078      	str	r0, [r7, #4]
    5268:	460b      	mov	r3, r1
    526a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    526c:	f04f 0300 	mov.w	r3, #0
    5270:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    5272:	687b      	ldr	r3, [r7, #4]
    5274:	8b1b      	ldrh	r3, [r3, #24]
    5276:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    5278:	89fb      	ldrh	r3, [r7, #14]
    527a:	f023 0304 	bic.w	r3, r3, #4
    527e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    5280:	89fa      	ldrh	r2, [r7, #14]
    5282:	887b      	ldrh	r3, [r7, #2]
    5284:	ea42 0303 	orr.w	r3, r2, r3
    5288:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	89fa      	ldrh	r2, [r7, #14]
    528e:	831a      	strh	r2, [r3, #24]
}
    5290:	f107 0714 	add.w	r7, r7, #20
    5294:	46bd      	mov	sp, r7
    5296:	bc80      	pop	{r7}
    5298:	4770      	bx	lr
    529a:	bf00      	nop

0000529c <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    529c:	b480      	push	{r7}
    529e:	b085      	sub	sp, #20
    52a0:	af00      	add	r7, sp, #0
    52a2:	6078      	str	r0, [r7, #4]
    52a4:	460b      	mov	r3, r1
    52a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    52a8:	f04f 0300 	mov.w	r3, #0
    52ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    52ae:	687b      	ldr	r3, [r7, #4]
    52b0:	8b1b      	ldrh	r3, [r3, #24]
    52b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    52b4:	89fb      	ldrh	r3, [r7, #14]
    52b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    52ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    52bc:	887b      	ldrh	r3, [r7, #2]
    52be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    52c2:	b29a      	uxth	r2, r3
    52c4:	89fb      	ldrh	r3, [r7, #14]
    52c6:	ea42 0303 	orr.w	r3, r2, r3
    52ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    52cc:	687b      	ldr	r3, [r7, #4]
    52ce:	89fa      	ldrh	r2, [r7, #14]
    52d0:	831a      	strh	r2, [r3, #24]
}
    52d2:	f107 0714 	add.w	r7, r7, #20
    52d6:	46bd      	mov	sp, r7
    52d8:	bc80      	pop	{r7}
    52da:	4770      	bx	lr

000052dc <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    52dc:	b480      	push	{r7}
    52de:	b085      	sub	sp, #20
    52e0:	af00      	add	r7, sp, #0
    52e2:	6078      	str	r0, [r7, #4]
    52e4:	460b      	mov	r3, r1
    52e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    52e8:	f04f 0300 	mov.w	r3, #0
    52ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	8b9b      	ldrh	r3, [r3, #28]
    52f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    52f4:	89fb      	ldrh	r3, [r7, #14]
    52f6:	f023 0304 	bic.w	r3, r3, #4
    52fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    52fc:	89fa      	ldrh	r2, [r7, #14]
    52fe:	887b      	ldrh	r3, [r7, #2]
    5300:	ea42 0303 	orr.w	r3, r2, r3
    5304:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	89fa      	ldrh	r2, [r7, #14]
    530a:	839a      	strh	r2, [r3, #28]
}
    530c:	f107 0714 	add.w	r7, r7, #20
    5310:	46bd      	mov	sp, r7
    5312:	bc80      	pop	{r7}
    5314:	4770      	bx	lr
    5316:	bf00      	nop

00005318 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5318:	b480      	push	{r7}
    531a:	b085      	sub	sp, #20
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
    5320:	460b      	mov	r3, r1
    5322:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5324:	f04f 0300 	mov.w	r3, #0
    5328:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	8b9b      	ldrh	r3, [r3, #28]
    532e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    5330:	89fb      	ldrh	r3, [r7, #14]
    5332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5336:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    5338:	887b      	ldrh	r3, [r7, #2]
    533a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    533e:	b29a      	uxth	r2, r3
    5340:	89fb      	ldrh	r3, [r7, #14]
    5342:	ea42 0303 	orr.w	r3, r2, r3
    5346:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	89fa      	ldrh	r2, [r7, #14]
    534c:	839a      	strh	r2, [r3, #28]
}
    534e:	f107 0714 	add.w	r7, r7, #20
    5352:	46bd      	mov	sp, r7
    5354:	bc80      	pop	{r7}
    5356:	4770      	bx	lr

00005358 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5358:	b480      	push	{r7}
    535a:	b085      	sub	sp, #20
    535c:	af00      	add	r7, sp, #0
    535e:	6078      	str	r0, [r7, #4]
    5360:	460b      	mov	r3, r1
    5362:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5364:	f04f 0300 	mov.w	r3, #0
    5368:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	8b1b      	ldrh	r3, [r3, #24]
    536e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    5370:	89fb      	ldrh	r3, [r7, #14]
    5372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5376:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    5378:	89fa      	ldrh	r2, [r7, #14]
    537a:	887b      	ldrh	r3, [r7, #2]
    537c:	ea42 0303 	orr.w	r3, r2, r3
    5380:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	89fa      	ldrh	r2, [r7, #14]
    5386:	831a      	strh	r2, [r3, #24]
}
    5388:	f107 0714 	add.w	r7, r7, #20
    538c:	46bd      	mov	sp, r7
    538e:	bc80      	pop	{r7}
    5390:	4770      	bx	lr
    5392:	bf00      	nop

00005394 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5394:	b480      	push	{r7}
    5396:	b085      	sub	sp, #20
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
    539c:	460b      	mov	r3, r1
    539e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    53a0:	f04f 0300 	mov.w	r3, #0
    53a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	8b1b      	ldrh	r3, [r3, #24]
    53aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    53ac:	89fb      	ldrh	r3, [r7, #14]
    53ae:	ea4f 4343 	mov.w	r3, r3, lsl #17
    53b2:	ea4f 4353 	mov.w	r3, r3, lsr #17
    53b6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    53b8:	887b      	ldrh	r3, [r7, #2]
    53ba:	ea4f 2303 	mov.w	r3, r3, lsl #8
    53be:	b29a      	uxth	r2, r3
    53c0:	89fb      	ldrh	r3, [r7, #14]
    53c2:	ea42 0303 	orr.w	r3, r2, r3
    53c6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    53c8:	687b      	ldr	r3, [r7, #4]
    53ca:	89fa      	ldrh	r2, [r7, #14]
    53cc:	831a      	strh	r2, [r3, #24]
}
    53ce:	f107 0714 	add.w	r7, r7, #20
    53d2:	46bd      	mov	sp, r7
    53d4:	bc80      	pop	{r7}
    53d6:	4770      	bx	lr

000053d8 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    53d8:	b480      	push	{r7}
    53da:	b085      	sub	sp, #20
    53dc:	af00      	add	r7, sp, #0
    53de:	6078      	str	r0, [r7, #4]
    53e0:	460b      	mov	r3, r1
    53e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    53e4:	f04f 0300 	mov.w	r3, #0
    53e8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	8b9b      	ldrh	r3, [r3, #28]
    53ee:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    53f0:	89fb      	ldrh	r3, [r7, #14]
    53f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    53f6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    53f8:	89fa      	ldrh	r2, [r7, #14]
    53fa:	887b      	ldrh	r3, [r7, #2]
    53fc:	ea42 0303 	orr.w	r3, r2, r3
    5400:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	89fa      	ldrh	r2, [r7, #14]
    5406:	839a      	strh	r2, [r3, #28]
}
    5408:	f107 0714 	add.w	r7, r7, #20
    540c:	46bd      	mov	sp, r7
    540e:	bc80      	pop	{r7}
    5410:	4770      	bx	lr
    5412:	bf00      	nop

00005414 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5414:	b480      	push	{r7}
    5416:	b085      	sub	sp, #20
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	460b      	mov	r3, r1
    541e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5420:	f04f 0300 	mov.w	r3, #0
    5424:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	8b9b      	ldrh	r3, [r3, #28]
    542a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    542c:	89fb      	ldrh	r3, [r7, #14]
    542e:	ea4f 4343 	mov.w	r3, r3, lsl #17
    5432:	ea4f 4353 	mov.w	r3, r3, lsr #17
    5436:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    5438:	887b      	ldrh	r3, [r7, #2]
    543a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    543e:	b29a      	uxth	r2, r3
    5440:	89fb      	ldrh	r3, [r7, #14]
    5442:	ea42 0303 	orr.w	r3, r2, r3
    5446:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5448:	687b      	ldr	r3, [r7, #4]
    544a:	89fa      	ldrh	r2, [r7, #14]
    544c:	839a      	strh	r2, [r3, #28]
}
    544e:	f107 0714 	add.w	r7, r7, #20
    5452:	46bd      	mov	sp, r7
    5454:	bc80      	pop	{r7}
    5456:	4770      	bx	lr

00005458 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5458:	b480      	push	{r7}
    545a:	b085      	sub	sp, #20
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
    5460:	460b      	mov	r3, r1
    5462:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5464:	f04f 0300 	mov.w	r3, #0
    5468:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	8c1b      	ldrh	r3, [r3, #32]
    546e:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    5470:	89fb      	ldrh	r3, [r7, #14]
    5472:	f023 0302 	bic.w	r3, r3, #2
    5476:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    5478:	89fa      	ldrh	r2, [r7, #14]
    547a:	887b      	ldrh	r3, [r7, #2]
    547c:	ea42 0303 	orr.w	r3, r2, r3
    5480:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	89fa      	ldrh	r2, [r7, #14]
    5486:	841a      	strh	r2, [r3, #32]
}
    5488:	f107 0714 	add.w	r7, r7, #20
    548c:	46bd      	mov	sp, r7
    548e:	bc80      	pop	{r7}
    5490:	4770      	bx	lr
    5492:	bf00      	nop

00005494 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5494:	b480      	push	{r7}
    5496:	b085      	sub	sp, #20
    5498:	af00      	add	r7, sp, #0
    549a:	6078      	str	r0, [r7, #4]
    549c:	460b      	mov	r3, r1
    549e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    54a0:	f04f 0300 	mov.w	r3, #0
    54a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	8c1b      	ldrh	r3, [r3, #32]
    54aa:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    54ac:	89fb      	ldrh	r3, [r7, #14]
    54ae:	f023 0308 	bic.w	r3, r3, #8
    54b2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    54b4:	89fa      	ldrh	r2, [r7, #14]
    54b6:	887b      	ldrh	r3, [r7, #2]
    54b8:	ea42 0303 	orr.w	r3, r2, r3
    54bc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	89fa      	ldrh	r2, [r7, #14]
    54c2:	841a      	strh	r2, [r3, #32]
}
    54c4:	f107 0714 	add.w	r7, r7, #20
    54c8:	46bd      	mov	sp, r7
    54ca:	bc80      	pop	{r7}
    54cc:	4770      	bx	lr
    54ce:	bf00      	nop

000054d0 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    54d0:	b480      	push	{r7}
    54d2:	b085      	sub	sp, #20
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
    54d8:	460b      	mov	r3, r1
    54da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    54dc:	f04f 0300 	mov.w	r3, #0
    54e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	8c1b      	ldrh	r3, [r3, #32]
    54e6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    54e8:	89fb      	ldrh	r3, [r7, #14]
    54ea:	f023 0320 	bic.w	r3, r3, #32
    54ee:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    54f0:	887b      	ldrh	r3, [r7, #2]
    54f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    54f6:	b29a      	uxth	r2, r3
    54f8:	89fb      	ldrh	r3, [r7, #14]
    54fa:	ea42 0303 	orr.w	r3, r2, r3
    54fe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	89fa      	ldrh	r2, [r7, #14]
    5504:	841a      	strh	r2, [r3, #32]
}
    5506:	f107 0714 	add.w	r7, r7, #20
    550a:	46bd      	mov	sp, r7
    550c:	bc80      	pop	{r7}
    550e:	4770      	bx	lr

00005510 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5510:	b480      	push	{r7}
    5512:	b085      	sub	sp, #20
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    5518:	460b      	mov	r3, r1
    551a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    551c:	f04f 0300 	mov.w	r3, #0
    5520:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	8c1b      	ldrh	r3, [r3, #32]
    5526:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    5528:	89fb      	ldrh	r3, [r7, #14]
    552a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    552e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    5530:	887b      	ldrh	r3, [r7, #2]
    5532:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5536:	b29a      	uxth	r2, r3
    5538:	89fb      	ldrh	r3, [r7, #14]
    553a:	ea42 0303 	orr.w	r3, r2, r3
    553e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	89fa      	ldrh	r2, [r7, #14]
    5544:	841a      	strh	r2, [r3, #32]
}
    5546:	f107 0714 	add.w	r7, r7, #20
    554a:	46bd      	mov	sp, r7
    554c:	bc80      	pop	{r7}
    554e:	4770      	bx	lr

00005550 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5550:	b480      	push	{r7}
    5552:	b085      	sub	sp, #20
    5554:	af00      	add	r7, sp, #0
    5556:	6078      	str	r0, [r7, #4]
    5558:	460b      	mov	r3, r1
    555a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    555c:	f04f 0300 	mov.w	r3, #0
    5560:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	8c1b      	ldrh	r3, [r3, #32]
    5566:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    5568:	89fb      	ldrh	r3, [r7, #14]
    556a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    556e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    5570:	887b      	ldrh	r3, [r7, #2]
    5572:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5576:	b29a      	uxth	r2, r3
    5578:	89fb      	ldrh	r3, [r7, #14]
    557a:	ea42 0303 	orr.w	r3, r2, r3
    557e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	89fa      	ldrh	r2, [r7, #14]
    5584:	841a      	strh	r2, [r3, #32]
}
    5586:	f107 0714 	add.w	r7, r7, #20
    558a:	46bd      	mov	sp, r7
    558c:	bc80      	pop	{r7}
    558e:	4770      	bx	lr

00005590 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5590:	b480      	push	{r7}
    5592:	b085      	sub	sp, #20
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	460b      	mov	r3, r1
    559a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    559c:	f04f 0300 	mov.w	r3, #0
    55a0:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	8c1b      	ldrh	r3, [r3, #32]
    55a6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    55a8:	89fb      	ldrh	r3, [r7, #14]
    55aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    55ae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    55b0:	887b      	ldrh	r3, [r7, #2]
    55b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    55b6:	b29a      	uxth	r2, r3
    55b8:	89fb      	ldrh	r3, [r7, #14]
    55ba:	ea42 0303 	orr.w	r3, r2, r3
    55be:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	89fa      	ldrh	r2, [r7, #14]
    55c4:	841a      	strh	r2, [r3, #32]
}
    55c6:	f107 0714 	add.w	r7, r7, #20
    55ca:	46bd      	mov	sp, r7
    55cc:	bc80      	pop	{r7}
    55ce:	4770      	bx	lr

000055d0 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    55d0:	b480      	push	{r7}
    55d2:	b085      	sub	sp, #20
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
    55d8:	460b      	mov	r3, r1
    55da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    55dc:	f04f 0300 	mov.w	r3, #0
    55e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	8c1b      	ldrh	r3, [r3, #32]
    55e6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    55e8:	89fb      	ldrh	r3, [r7, #14]
    55ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    55ee:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    55f0:	887b      	ldrh	r3, [r7, #2]
    55f2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    55f6:	b29a      	uxth	r2, r3
    55f8:	89fb      	ldrh	r3, [r7, #14]
    55fa:	ea42 0303 	orr.w	r3, r2, r3
    55fe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	89fa      	ldrh	r2, [r7, #14]
    5604:	841a      	strh	r2, [r3, #32]
}
    5606:	f107 0714 	add.w	r7, r7, #20
    560a:	46bd      	mov	sp, r7
    560c:	bc80      	pop	{r7}
    560e:	4770      	bx	lr

00005610 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    5610:	b480      	push	{r7}
    5612:	b085      	sub	sp, #20
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
    5618:	4613      	mov	r3, r2
    561a:	460a      	mov	r2, r1
    561c:	807a      	strh	r2, [r7, #2]
    561e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    5620:	f04f 0300 	mov.w	r3, #0
    5624:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    5626:	887b      	ldrh	r3, [r7, #2]
    5628:	f04f 0201 	mov.w	r2, #1
    562c:	fa02 f303 	lsl.w	r3, r2, r3
    5630:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	8c1b      	ldrh	r3, [r3, #32]
    5636:	b29a      	uxth	r2, r3
    5638:	89fb      	ldrh	r3, [r7, #14]
    563a:	ea6f 0303 	mvn.w	r3, r3
    563e:	b29b      	uxth	r3, r3
    5640:	ea02 0303 	and.w	r3, r2, r3
    5644:	b29a      	uxth	r2, r3
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	8c1b      	ldrh	r3, [r3, #32]
    564e:	b29a      	uxth	r2, r3
    5650:	8839      	ldrh	r1, [r7, #0]
    5652:	887b      	ldrh	r3, [r7, #2]
    5654:	fa01 f303 	lsl.w	r3, r1, r3
    5658:	b29b      	uxth	r3, r3
    565a:	ea42 0303 	orr.w	r3, r2, r3
    565e:	b29a      	uxth	r2, r3
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	841a      	strh	r2, [r3, #32]
}
    5664:	f107 0714 	add.w	r7, r7, #20
    5668:	46bd      	mov	sp, r7
    566a:	bc80      	pop	{r7}
    566c:	4770      	bx	lr
    566e:	bf00      	nop

00005670 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    5670:	b480      	push	{r7}
    5672:	b085      	sub	sp, #20
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
    5678:	4613      	mov	r3, r2
    567a:	460a      	mov	r2, r1
    567c:	807a      	strh	r2, [r7, #2]
    567e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    5680:	f04f 0300 	mov.w	r3, #0
    5684:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    5686:	887b      	ldrh	r3, [r7, #2]
    5688:	f04f 0204 	mov.w	r2, #4
    568c:	fa02 f303 	lsl.w	r3, r2, r3
    5690:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	8c1b      	ldrh	r3, [r3, #32]
    5696:	b29a      	uxth	r2, r3
    5698:	89fb      	ldrh	r3, [r7, #14]
    569a:	ea6f 0303 	mvn.w	r3, r3
    569e:	b29b      	uxth	r3, r3
    56a0:	ea02 0303 	and.w	r3, r2, r3
    56a4:	b29a      	uxth	r2, r3
    56a6:	687b      	ldr	r3, [r7, #4]
    56a8:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	8c1b      	ldrh	r3, [r3, #32]
    56ae:	b29a      	uxth	r2, r3
    56b0:	8839      	ldrh	r1, [r7, #0]
    56b2:	887b      	ldrh	r3, [r7, #2]
    56b4:	fa01 f303 	lsl.w	r3, r1, r3
    56b8:	b29b      	uxth	r3, r3
    56ba:	ea42 0303 	orr.w	r3, r2, r3
    56be:	b29a      	uxth	r2, r3
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	841a      	strh	r2, [r3, #32]
}
    56c4:	f107 0714 	add.w	r7, r7, #20
    56c8:	46bd      	mov	sp, r7
    56ca:	bc80      	pop	{r7}
    56cc:	4770      	bx	lr
    56ce:	bf00      	nop

000056d0 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    56d0:	b480      	push	{r7}
    56d2:	b085      	sub	sp, #20
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
    56d8:	4613      	mov	r3, r2
    56da:	460a      	mov	r2, r1
    56dc:	807a      	strh	r2, [r7, #2]
    56de:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    56e0:	f04f 0300 	mov.w	r3, #0
    56e4:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    56e6:	f04f 0300 	mov.w	r3, #0
    56ea:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    56f0:	68fb      	ldr	r3, [r7, #12]
    56f2:	f103 0318 	add.w	r3, r3, #24
    56f6:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    56f8:	887b      	ldrh	r3, [r7, #2]
    56fa:	f04f 0201 	mov.w	r2, #1
    56fe:	fa02 f303 	lsl.w	r3, r2, r3
    5702:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	8c1b      	ldrh	r3, [r3, #32]
    5708:	b29a      	uxth	r2, r3
    570a:	897b      	ldrh	r3, [r7, #10]
    570c:	ea6f 0303 	mvn.w	r3, r3
    5710:	b29b      	uxth	r3, r3
    5712:	ea02 0303 	and.w	r3, r2, r3
    5716:	b29a      	uxth	r2, r3
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    571c:	887b      	ldrh	r3, [r7, #2]
    571e:	2b00      	cmp	r3, #0
    5720:	d002      	beq.n	5728 <TIM_SelectOCxM+0x58>
    5722:	887b      	ldrh	r3, [r7, #2]
    5724:	2b08      	cmp	r3, #8
    5726:	d114      	bne.n	5752 <TIM_SelectOCxM+0x82>
  {
    tmp += (TIM_Channel>>1);
    5728:	887b      	ldrh	r3, [r7, #2]
    572a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    572e:	b29b      	uxth	r3, r3
    5730:	68fa      	ldr	r2, [r7, #12]
    5732:	18d3      	adds	r3, r2, r3
    5734:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	68fa      	ldr	r2, [r7, #12]
    573a:	6812      	ldr	r2, [r2, #0]
    573c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    5740:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	68fa      	ldr	r2, [r7, #12]
    5746:	6811      	ldr	r1, [r2, #0]
    5748:	883a      	ldrh	r2, [r7, #0]
    574a:	ea41 0202 	orr.w	r2, r1, r2
    574e:	601a      	str	r2, [r3, #0]
    5750:	e019      	b.n	5786 <TIM_SelectOCxM+0xb6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    5752:	887b      	ldrh	r3, [r7, #2]
    5754:	f1a3 0304 	sub.w	r3, r3, #4
    5758:	b29b      	uxth	r3, r3
    575a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    575e:	b29b      	uxth	r3, r3
    5760:	68fa      	ldr	r2, [r7, #12]
    5762:	18d3      	adds	r3, r2, r3
    5764:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	68fa      	ldr	r2, [r7, #12]
    576a:	6812      	ldr	r2, [r2, #0]
    576c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    5770:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    5772:	68fb      	ldr	r3, [r7, #12]
    5774:	68fa      	ldr	r2, [r7, #12]
    5776:	6811      	ldr	r1, [r2, #0]
    5778:	883a      	ldrh	r2, [r7, #0]
    577a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    577e:	b292      	uxth	r2, r2
    5780:	ea41 0202 	orr.w	r2, r1, r2
    5784:	601a      	str	r2, [r3, #0]
  }
}
    5786:	f107 0714 	add.w	r7, r7, #20
    578a:	46bd      	mov	sp, r7
    578c:	bc80      	pop	{r7}
    578e:	4770      	bx	lr

00005790 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5790:	b480      	push	{r7}
    5792:	b083      	sub	sp, #12
    5794:	af00      	add	r7, sp, #0
    5796:	6078      	str	r0, [r7, #4]
    5798:	460b      	mov	r3, r1
    579a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    579c:	78fb      	ldrb	r3, [r7, #3]
    579e:	2b00      	cmp	r3, #0
    57a0:	d008      	beq.n	57b4 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    57a2:	687b      	ldr	r3, [r7, #4]
    57a4:	881b      	ldrh	r3, [r3, #0]
    57a6:	b29b      	uxth	r3, r3
    57a8:	f043 0302 	orr.w	r3, r3, #2
    57ac:	b29a      	uxth	r2, r3
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	801a      	strh	r2, [r3, #0]
    57b2:	e007      	b.n	57c4 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	881b      	ldrh	r3, [r3, #0]
    57b8:	b29b      	uxth	r3, r3
    57ba:	f023 0302 	bic.w	r3, r3, #2
    57be:	b29a      	uxth	r2, r3
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	801a      	strh	r2, [r3, #0]
  }
}
    57c4:	f107 070c 	add.w	r7, r7, #12
    57c8:	46bd      	mov	sp, r7
    57ca:	bc80      	pop	{r7}
    57cc:	4770      	bx	lr
    57ce:	bf00      	nop

000057d0 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    57d0:	b480      	push	{r7}
    57d2:	b083      	sub	sp, #12
    57d4:	af00      	add	r7, sp, #0
    57d6:	6078      	str	r0, [r7, #4]
    57d8:	460b      	mov	r3, r1
    57da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    57dc:	887b      	ldrh	r3, [r7, #2]
    57de:	2b00      	cmp	r3, #0
    57e0:	d008      	beq.n	57f4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    57e2:	687b      	ldr	r3, [r7, #4]
    57e4:	881b      	ldrh	r3, [r3, #0]
    57e6:	b29b      	uxth	r3, r3
    57e8:	f043 0304 	orr.w	r3, r3, #4
    57ec:	b29a      	uxth	r2, r3
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	801a      	strh	r2, [r3, #0]
    57f2:	e007      	b.n	5804 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    57f4:	687b      	ldr	r3, [r7, #4]
    57f6:	881b      	ldrh	r3, [r3, #0]
    57f8:	b29b      	uxth	r3, r3
    57fa:	f023 0304 	bic.w	r3, r3, #4
    57fe:	b29a      	uxth	r2, r3
    5800:	687b      	ldr	r3, [r7, #4]
    5802:	801a      	strh	r2, [r3, #0]
  }
}
    5804:	f107 070c 	add.w	r7, r7, #12
    5808:	46bd      	mov	sp, r7
    580a:	bc80      	pop	{r7}
    580c:	4770      	bx	lr
    580e:	bf00      	nop

00005810 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5810:	b480      	push	{r7}
    5812:	b083      	sub	sp, #12
    5814:	af00      	add	r7, sp, #0
    5816:	6078      	str	r0, [r7, #4]
    5818:	460b      	mov	r3, r1
    581a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    581c:	78fb      	ldrb	r3, [r7, #3]
    581e:	2b00      	cmp	r3, #0
    5820:	d008      	beq.n	5834 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    5822:	687b      	ldr	r3, [r7, #4]
    5824:	889b      	ldrh	r3, [r3, #4]
    5826:	b29b      	uxth	r3, r3
    5828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    582c:	b29a      	uxth	r2, r3
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	809a      	strh	r2, [r3, #4]
    5832:	e007      	b.n	5844 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    5834:	687b      	ldr	r3, [r7, #4]
    5836:	889b      	ldrh	r3, [r3, #4]
    5838:	b29b      	uxth	r3, r3
    583a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    583e:	b29a      	uxth	r2, r3
    5840:	687b      	ldr	r3, [r7, #4]
    5842:	809a      	strh	r2, [r3, #4]
  }
}
    5844:	f107 070c 	add.w	r7, r7, #12
    5848:	46bd      	mov	sp, r7
    584a:	bc80      	pop	{r7}
    584c:	4770      	bx	lr
    584e:	bf00      	nop

00005850 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    5850:	b480      	push	{r7}
    5852:	b083      	sub	sp, #12
    5854:	af00      	add	r7, sp, #0
    5856:	6078      	str	r0, [r7, #4]
    5858:	460b      	mov	r3, r1
    585a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    585c:	687b      	ldr	r3, [r7, #4]
    585e:	881b      	ldrh	r3, [r3, #0]
    5860:	b29b      	uxth	r3, r3
    5862:	f023 0308 	bic.w	r3, r3, #8
    5866:	b29a      	uxth	r2, r3
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    586c:	687b      	ldr	r3, [r7, #4]
    586e:	881b      	ldrh	r3, [r3, #0]
    5870:	b29a      	uxth	r2, r3
    5872:	887b      	ldrh	r3, [r7, #2]
    5874:	ea42 0303 	orr.w	r3, r2, r3
    5878:	b29a      	uxth	r2, r3
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	801a      	strh	r2, [r3, #0]
}
    587e:	f107 070c 	add.w	r7, r7, #12
    5882:	46bd      	mov	sp, r7
    5884:	bc80      	pop	{r7}
    5886:	4770      	bx	lr

00005888 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    5888:	b480      	push	{r7}
    588a:	b083      	sub	sp, #12
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
    5890:	460b      	mov	r3, r1
    5892:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	889b      	ldrh	r3, [r3, #4]
    5898:	b29b      	uxth	r3, r3
    589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    589e:	b29a      	uxth	r2, r3
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    58a4:	687b      	ldr	r3, [r7, #4]
    58a6:	889b      	ldrh	r3, [r3, #4]
    58a8:	b29a      	uxth	r2, r3
    58aa:	887b      	ldrh	r3, [r7, #2]
    58ac:	ea42 0303 	orr.w	r3, r2, r3
    58b0:	b29a      	uxth	r2, r3
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	809a      	strh	r2, [r3, #4]
}
    58b6:	f107 070c 	add.w	r7, r7, #12
    58ba:	46bd      	mov	sp, r7
    58bc:	bc80      	pop	{r7}
    58be:	4770      	bx	lr

000058c0 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    58c0:	b480      	push	{r7}
    58c2:	b083      	sub	sp, #12
    58c4:	af00      	add	r7, sp, #0
    58c6:	6078      	str	r0, [r7, #4]
    58c8:	460b      	mov	r3, r1
    58ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	891b      	ldrh	r3, [r3, #8]
    58d0:	b29b      	uxth	r3, r3
    58d2:	f023 0307 	bic.w	r3, r3, #7
    58d6:	b29a      	uxth	r2, r3
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	891b      	ldrh	r3, [r3, #8]
    58e0:	b29a      	uxth	r2, r3
    58e2:	887b      	ldrh	r3, [r7, #2]
    58e4:	ea42 0303 	orr.w	r3, r2, r3
    58e8:	b29a      	uxth	r2, r3
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	811a      	strh	r2, [r3, #8]
}
    58ee:	f107 070c 	add.w	r7, r7, #12
    58f2:	46bd      	mov	sp, r7
    58f4:	bc80      	pop	{r7}
    58f6:	4770      	bx	lr

000058f8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    58f8:	b480      	push	{r7}
    58fa:	b083      	sub	sp, #12
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
    5900:	460b      	mov	r3, r1
    5902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	891b      	ldrh	r3, [r3, #8]
    5908:	b29b      	uxth	r3, r3
    590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    590e:	b29a      	uxth	r2, r3
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	891b      	ldrh	r3, [r3, #8]
    5918:	b29a      	uxth	r2, r3
    591a:	887b      	ldrh	r3, [r7, #2]
    591c:	ea42 0303 	orr.w	r3, r2, r3
    5920:	b29a      	uxth	r2, r3
    5922:	687b      	ldr	r3, [r7, #4]
    5924:	811a      	strh	r2, [r3, #8]
}
    5926:	f107 070c 	add.w	r7, r7, #12
    592a:	46bd      	mov	sp, r7
    592c:	bc80      	pop	{r7}
    592e:	4770      	bx	lr

00005930 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    5930:	b480      	push	{r7}
    5932:	b083      	sub	sp, #12
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
    5938:	460b      	mov	r3, r1
    593a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	887a      	ldrh	r2, [r7, #2]
    5940:	849a      	strh	r2, [r3, #36]	; 0x24
}
    5942:	f107 070c 	add.w	r7, r7, #12
    5946:	46bd      	mov	sp, r7
    5948:	bc80      	pop	{r7}
    594a:	4770      	bx	lr

0000594c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    594c:	b480      	push	{r7}
    594e:	b083      	sub	sp, #12
    5950:	af00      	add	r7, sp, #0
    5952:	6078      	str	r0, [r7, #4]
    5954:	460b      	mov	r3, r1
    5956:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	887a      	ldrh	r2, [r7, #2]
    595c:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    595e:	f107 070c 	add.w	r7, r7, #12
    5962:	46bd      	mov	sp, r7
    5964:	bc80      	pop	{r7}
    5966:	4770      	bx	lr

00005968 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    5968:	b480      	push	{r7}
    596a:	b083      	sub	sp, #12
    596c:	af00      	add	r7, sp, #0
    596e:	6078      	str	r0, [r7, #4]
    5970:	460b      	mov	r3, r1
    5972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    5974:	687b      	ldr	r3, [r7, #4]
    5976:	887a      	ldrh	r2, [r7, #2]
    5978:	869a      	strh	r2, [r3, #52]	; 0x34
}
    597a:	f107 070c 	add.w	r7, r7, #12
    597e:	46bd      	mov	sp, r7
    5980:	bc80      	pop	{r7}
    5982:	4770      	bx	lr

00005984 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    5984:	b480      	push	{r7}
    5986:	b083      	sub	sp, #12
    5988:	af00      	add	r7, sp, #0
    598a:	6078      	str	r0, [r7, #4]
    598c:	460b      	mov	r3, r1
    598e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	887a      	ldrh	r2, [r7, #2]
    5994:	871a      	strh	r2, [r3, #56]	; 0x38
}
    5996:	f107 070c 	add.w	r7, r7, #12
    599a:	46bd      	mov	sp, r7
    599c:	bc80      	pop	{r7}
    599e:	4770      	bx	lr

000059a0 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    59a0:	b480      	push	{r7}
    59a2:	b083      	sub	sp, #12
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
    59a8:	460b      	mov	r3, r1
    59aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	887a      	ldrh	r2, [r7, #2]
    59b0:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    59b2:	f107 070c 	add.w	r7, r7, #12
    59b6:	46bd      	mov	sp, r7
    59b8:	bc80      	pop	{r7}
    59ba:	4770      	bx	lr

000059bc <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    59bc:	b480      	push	{r7}
    59be:	b083      	sub	sp, #12
    59c0:	af00      	add	r7, sp, #0
    59c2:	6078      	str	r0, [r7, #4]
    59c4:	460b      	mov	r3, r1
    59c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	887a      	ldrh	r2, [r7, #2]
    59cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    59d0:	f107 070c 	add.w	r7, r7, #12
    59d4:	46bd      	mov	sp, r7
    59d6:	bc80      	pop	{r7}
    59d8:	4770      	bx	lr
    59da:	bf00      	nop

000059dc <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    59dc:	b480      	push	{r7}
    59de:	b083      	sub	sp, #12
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
    59e4:	460b      	mov	r3, r1
    59e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	8b1b      	ldrh	r3, [r3, #24]
    59ec:	b29b      	uxth	r3, r3
    59ee:	f023 030c 	bic.w	r3, r3, #12
    59f2:	b29a      	uxth	r2, r3
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	8b1b      	ldrh	r3, [r3, #24]
    59fc:	b29a      	uxth	r2, r3
    59fe:	887b      	ldrh	r3, [r7, #2]
    5a00:	ea42 0303 	orr.w	r3, r2, r3
    5a04:	b29a      	uxth	r2, r3
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	831a      	strh	r2, [r3, #24]
}
    5a0a:	f107 070c 	add.w	r7, r7, #12
    5a0e:	46bd      	mov	sp, r7
    5a10:	bc80      	pop	{r7}
    5a12:	4770      	bx	lr

00005a14 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    5a14:	b480      	push	{r7}
    5a16:	b083      	sub	sp, #12
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
    5a1c:	460b      	mov	r3, r1
    5a1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    5a20:	687b      	ldr	r3, [r7, #4]
    5a22:	8b1b      	ldrh	r3, [r3, #24]
    5a24:	b29b      	uxth	r3, r3
    5a26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    5a2a:	b29a      	uxth	r2, r3
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	8b1b      	ldrh	r3, [r3, #24]
    5a34:	b29a      	uxth	r2, r3
    5a36:	887b      	ldrh	r3, [r7, #2]
    5a38:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5a3c:	b29b      	uxth	r3, r3
    5a3e:	ea42 0303 	orr.w	r3, r2, r3
    5a42:	b29a      	uxth	r2, r3
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	831a      	strh	r2, [r3, #24]
}
    5a48:	f107 070c 	add.w	r7, r7, #12
    5a4c:	46bd      	mov	sp, r7
    5a4e:	bc80      	pop	{r7}
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    5a54:	b480      	push	{r7}
    5a56:	b083      	sub	sp, #12
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
    5a5c:	460b      	mov	r3, r1
    5a5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	8b9b      	ldrh	r3, [r3, #28]
    5a64:	b29b      	uxth	r3, r3
    5a66:	f023 030c 	bic.w	r3, r3, #12
    5a6a:	b29a      	uxth	r2, r3
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	8b9b      	ldrh	r3, [r3, #28]
    5a74:	b29a      	uxth	r2, r3
    5a76:	887b      	ldrh	r3, [r7, #2]
    5a78:	ea42 0303 	orr.w	r3, r2, r3
    5a7c:	b29a      	uxth	r2, r3
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	839a      	strh	r2, [r3, #28]
}
    5a82:	f107 070c 	add.w	r7, r7, #12
    5a86:	46bd      	mov	sp, r7
    5a88:	bc80      	pop	{r7}
    5a8a:	4770      	bx	lr

00005a8c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    5a8c:	b480      	push	{r7}
    5a8e:	b083      	sub	sp, #12
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    5a94:	460b      	mov	r3, r1
    5a96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	8b9b      	ldrh	r3, [r3, #28]
    5a9c:	b29b      	uxth	r3, r3
    5a9e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    5aa2:	b29a      	uxth	r2, r3
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	8b9b      	ldrh	r3, [r3, #28]
    5aac:	b29a      	uxth	r2, r3
    5aae:	887b      	ldrh	r3, [r7, #2]
    5ab0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5ab4:	b29b      	uxth	r3, r3
    5ab6:	ea42 0303 	orr.w	r3, r2, r3
    5aba:	b29a      	uxth	r2, r3
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	839a      	strh	r2, [r3, #28]
}
    5ac0:	f107 070c 	add.w	r7, r7, #12
    5ac4:	46bd      	mov	sp, r7
    5ac6:	bc80      	pop	{r7}
    5ac8:	4770      	bx	lr
    5aca:	bf00      	nop

00005acc <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    5acc:	b480      	push	{r7}
    5ace:	b083      	sub	sp, #12
    5ad0:	af00      	add	r7, sp, #0
    5ad2:	6078      	str	r0, [r7, #4]
    5ad4:	460b      	mov	r3, r1
    5ad6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	881b      	ldrh	r3, [r3, #0]
    5adc:	b29b      	uxth	r3, r3
    5ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5ae2:	b29a      	uxth	r2, r3
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	881b      	ldrh	r3, [r3, #0]
    5aec:	b29a      	uxth	r2, r3
    5aee:	887b      	ldrh	r3, [r7, #2]
    5af0:	ea42 0303 	orr.w	r3, r2, r3
    5af4:	b29a      	uxth	r2, r3
    5af6:	687b      	ldr	r3, [r7, #4]
    5af8:	801a      	strh	r2, [r3, #0]
}
    5afa:	f107 070c 	add.w	r7, r7, #12
    5afe:	46bd      	mov	sp, r7
    5b00:	bc80      	pop	{r7}
    5b02:	4770      	bx	lr

00005b04 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    5b04:	b480      	push	{r7}
    5b06:	b083      	sub	sp, #12
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5b10:	b29b      	uxth	r3, r3
}
    5b12:	4618      	mov	r0, r3
    5b14:	f107 070c 	add.w	r7, r7, #12
    5b18:	46bd      	mov	sp, r7
    5b1a:	bc80      	pop	{r7}
    5b1c:	4770      	bx	lr
    5b1e:	bf00      	nop

00005b20 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    5b20:	b480      	push	{r7}
    5b22:	b083      	sub	sp, #12
    5b24:	af00      	add	r7, sp, #0
    5b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5b2c:	b29b      	uxth	r3, r3
}
    5b2e:	4618      	mov	r0, r3
    5b30:	f107 070c 	add.w	r7, r7, #12
    5b34:	46bd      	mov	sp, r7
    5b36:	bc80      	pop	{r7}
    5b38:	4770      	bx	lr
    5b3a:	bf00      	nop

00005b3c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    5b3c:	b480      	push	{r7}
    5b3e:	b083      	sub	sp, #12
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    5b48:	b29b      	uxth	r3, r3
}
    5b4a:	4618      	mov	r0, r3
    5b4c:	f107 070c 	add.w	r7, r7, #12
    5b50:	46bd      	mov	sp, r7
    5b52:	bc80      	pop	{r7}
    5b54:	4770      	bx	lr
    5b56:	bf00      	nop

00005b58 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    5b58:	b480      	push	{r7}
    5b5a:	b083      	sub	sp, #12
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    5b66:	b29b      	uxth	r3, r3
}
    5b68:	4618      	mov	r0, r3
    5b6a:	f107 070c 	add.w	r7, r7, #12
    5b6e:	46bd      	mov	sp, r7
    5b70:	bc80      	pop	{r7}
    5b72:	4770      	bx	lr

00005b74 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    5b74:	b480      	push	{r7}
    5b76:	b083      	sub	sp, #12
    5b78:	af00      	add	r7, sp, #0
    5b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5b80:	b29b      	uxth	r3, r3
}
    5b82:	4618      	mov	r0, r3
    5b84:	f107 070c 	add.w	r7, r7, #12
    5b88:	46bd      	mov	sp, r7
    5b8a:	bc80      	pop	{r7}
    5b8c:	4770      	bx	lr
    5b8e:	bf00      	nop

00005b90 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    5b90:	b480      	push	{r7}
    5b92:	b083      	sub	sp, #12
    5b94:	af00      	add	r7, sp, #0
    5b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5b9c:	b29b      	uxth	r3, r3
}
    5b9e:	4618      	mov	r0, r3
    5ba0:	f107 070c 	add.w	r7, r7, #12
    5ba4:	46bd      	mov	sp, r7
    5ba6:	bc80      	pop	{r7}
    5ba8:	4770      	bx	lr
    5baa:	bf00      	nop

00005bac <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    5bac:	b480      	push	{r7}
    5bae:	b085      	sub	sp, #20
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	460b      	mov	r3, r1
    5bb6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    5bb8:	f04f 0300 	mov.w	r3, #0
    5bbc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	8a1b      	ldrh	r3, [r3, #16]
    5bc2:	b29a      	uxth	r2, r3
    5bc4:	887b      	ldrh	r3, [r7, #2]
    5bc6:	ea02 0303 	and.w	r3, r2, r3
    5bca:	b29b      	uxth	r3, r3
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d003      	beq.n	5bd8 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    5bd0:	f04f 0301 	mov.w	r3, #1
    5bd4:	73fb      	strb	r3, [r7, #15]
    5bd6:	e002      	b.n	5bde <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    5bd8:	f04f 0300 	mov.w	r3, #0
    5bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5bde:	7bfb      	ldrb	r3, [r7, #15]
}
    5be0:	4618      	mov	r0, r3
    5be2:	f107 0714 	add.w	r7, r7, #20
    5be6:	46bd      	mov	sp, r7
    5be8:	bc80      	pop	{r7}
    5bea:	4770      	bx	lr

00005bec <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    5bec:	b480      	push	{r7}
    5bee:	b083      	sub	sp, #12
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	6078      	str	r0, [r7, #4]
    5bf4:	460b      	mov	r3, r1
    5bf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    5bf8:	887b      	ldrh	r3, [r7, #2]
    5bfa:	ea6f 0303 	mvn.w	r3, r3
    5bfe:	b29a      	uxth	r2, r3
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	821a      	strh	r2, [r3, #16]
}
    5c04:	f107 070c 	add.w	r7, r7, #12
    5c08:	46bd      	mov	sp, r7
    5c0a:	bc80      	pop	{r7}
    5c0c:	4770      	bx	lr
    5c0e:	bf00      	nop

00005c10 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    5c10:	b480      	push	{r7}
    5c12:	b085      	sub	sp, #20
    5c14:	af00      	add	r7, sp, #0
    5c16:	6078      	str	r0, [r7, #4]
    5c18:	460b      	mov	r3, r1
    5c1a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    5c1c:	f04f 0300 	mov.w	r3, #0
    5c20:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    5c22:	f04f 0300 	mov.w	r3, #0
    5c26:	81bb      	strh	r3, [r7, #12]
    5c28:	f04f 0300 	mov.w	r3, #0
    5c2c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	8a1b      	ldrh	r3, [r3, #16]
    5c32:	b29a      	uxth	r2, r3
    5c34:	887b      	ldrh	r3, [r7, #2]
    5c36:	ea02 0303 	and.w	r3, r2, r3
    5c3a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	899b      	ldrh	r3, [r3, #12]
    5c40:	b29a      	uxth	r2, r3
    5c42:	887b      	ldrh	r3, [r7, #2]
    5c44:	ea02 0303 	and.w	r3, r2, r3
    5c48:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    5c4a:	89bb      	ldrh	r3, [r7, #12]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d006      	beq.n	5c5e <TIM_GetITStatus+0x4e>
    5c50:	897b      	ldrh	r3, [r7, #10]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d003      	beq.n	5c5e <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    5c56:	f04f 0301 	mov.w	r3, #1
    5c5a:	73fb      	strb	r3, [r7, #15]
    5c5c:	e002      	b.n	5c64 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    5c5e:	f04f 0300 	mov.w	r3, #0
    5c62:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5c64:	7bfb      	ldrb	r3, [r7, #15]
}
    5c66:	4618      	mov	r0, r3
    5c68:	f107 0714 	add.w	r7, r7, #20
    5c6c:	46bd      	mov	sp, r7
    5c6e:	bc80      	pop	{r7}
    5c70:	4770      	bx	lr
    5c72:	bf00      	nop

00005c74 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    5c74:	b480      	push	{r7}
    5c76:	b083      	sub	sp, #12
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
    5c7c:	460b      	mov	r3, r1
    5c7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    5c80:	887b      	ldrh	r3, [r7, #2]
    5c82:	ea6f 0303 	mvn.w	r3, r3
    5c86:	b29a      	uxth	r2, r3
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	821a      	strh	r2, [r3, #16]
}
    5c8c:	f107 070c 	add.w	r7, r7, #12
    5c90:	46bd      	mov	sp, r7
    5c92:	bc80      	pop	{r7}
    5c94:	4770      	bx	lr
    5c96:	bf00      	nop

00005c98 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5c98:	b480      	push	{r7}
    5c9a:	b087      	sub	sp, #28
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	60f8      	str	r0, [r7, #12]
    5ca0:	8179      	strh	r1, [r7, #10]
    5ca2:	813a      	strh	r2, [r7, #8]
    5ca4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    5ca6:	f04f 0300 	mov.w	r3, #0
    5caa:	82bb      	strh	r3, [r7, #20]
    5cac:	f04f 0300 	mov.w	r3, #0
    5cb0:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    5cb2:	68fb      	ldr	r3, [r7, #12]
    5cb4:	8c1b      	ldrh	r3, [r3, #32]
    5cb6:	b29b      	uxth	r3, r3
    5cb8:	f023 0301 	bic.w	r3, r3, #1
    5cbc:	b29a      	uxth	r2, r3
    5cbe:	68fb      	ldr	r3, [r7, #12]
    5cc0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    5cc2:	68fb      	ldr	r3, [r7, #12]
    5cc4:	8b1b      	ldrh	r3, [r3, #24]
    5cc6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5cc8:	68fb      	ldr	r3, [r7, #12]
    5cca:	8c1b      	ldrh	r3, [r3, #32]
    5ccc:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    5cce:	8abb      	ldrh	r3, [r7, #20]
    5cd0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    5cd4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5cd6:	88fb      	ldrh	r3, [r7, #6]
    5cd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5cdc:	b29a      	uxth	r2, r3
    5cde:	893b      	ldrh	r3, [r7, #8]
    5ce0:	ea42 0303 	orr.w	r3, r2, r3
    5ce4:	b29a      	uxth	r2, r3
    5ce6:	8abb      	ldrh	r3, [r7, #20]
    5ce8:	ea42 0303 	orr.w	r3, r2, r3
    5cec:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5cee:	68fa      	ldr	r2, [r7, #12]
    5cf0:	4b1d      	ldr	r3, [pc, #116]	; (5d68 <TI1_Config+0xd0>)
    5cf2:	429a      	cmp	r2, r3
    5cf4:	d013      	beq.n	5d1e <TI1_Config+0x86>
    5cf6:	68fa      	ldr	r2, [r7, #12]
    5cf8:	4b1c      	ldr	r3, [pc, #112]	; (5d6c <TI1_Config+0xd4>)
    5cfa:	429a      	cmp	r2, r3
    5cfc:	d00f      	beq.n	5d1e <TI1_Config+0x86>
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5d04:	d00b      	beq.n	5d1e <TI1_Config+0x86>
    5d06:	68fa      	ldr	r2, [r7, #12]
    5d08:	4b19      	ldr	r3, [pc, #100]	; (5d70 <TI1_Config+0xd8>)
    5d0a:	429a      	cmp	r2, r3
    5d0c:	d007      	beq.n	5d1e <TI1_Config+0x86>
    5d0e:	68fa      	ldr	r2, [r7, #12]
    5d10:	4b18      	ldr	r3, [pc, #96]	; (5d74 <TI1_Config+0xdc>)
    5d12:	429a      	cmp	r2, r3
    5d14:	d003      	beq.n	5d1e <TI1_Config+0x86>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5d16:	68fa      	ldr	r2, [r7, #12]
    5d18:	4b17      	ldr	r3, [pc, #92]	; (5d78 <TI1_Config+0xe0>)
    5d1a:	429a      	cmp	r2, r3
    5d1c:	d10c      	bne.n	5d38 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    5d1e:	8afb      	ldrh	r3, [r7, #22]
    5d20:	f023 0302 	bic.w	r3, r3, #2
    5d24:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    5d26:	897a      	ldrh	r2, [r7, #10]
    5d28:	8afb      	ldrh	r3, [r7, #22]
    5d2a:	ea42 0303 	orr.w	r3, r2, r3
    5d2e:	b29b      	uxth	r3, r3
    5d30:	f043 0301 	orr.w	r3, r3, #1
    5d34:	82fb      	strh	r3, [r7, #22]
    5d36:	e00b      	b.n	5d50 <TI1_Config+0xb8>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    5d38:	8afb      	ldrh	r3, [r7, #22]
    5d3a:	f023 030a 	bic.w	r3, r3, #10
    5d3e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    5d40:	897a      	ldrh	r2, [r7, #10]
    5d42:	8afb      	ldrh	r3, [r7, #22]
    5d44:	ea42 0303 	orr.w	r3, r2, r3
    5d48:	b29b      	uxth	r3, r3
    5d4a:	f043 0301 	orr.w	r3, r3, #1
    5d4e:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    5d50:	68fb      	ldr	r3, [r7, #12]
    5d52:	8aba      	ldrh	r2, [r7, #20]
    5d54:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5d56:	68fb      	ldr	r3, [r7, #12]
    5d58:	8afa      	ldrh	r2, [r7, #22]
    5d5a:	841a      	strh	r2, [r3, #32]
}
    5d5c:	f107 071c 	add.w	r7, r7, #28
    5d60:	46bd      	mov	sp, r7
    5d62:	bc80      	pop	{r7}
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop
    5d68:	40012c00 	.word	0x40012c00
    5d6c:	40013400 	.word	0x40013400
    5d70:	40000400 	.word	0x40000400
    5d74:	40000800 	.word	0x40000800
    5d78:	40000c00 	.word	0x40000c00

00005d7c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5d7c:	b480      	push	{r7}
    5d7e:	b087      	sub	sp, #28
    5d80:	af00      	add	r7, sp, #0
    5d82:	60f8      	str	r0, [r7, #12]
    5d84:	8179      	strh	r1, [r7, #10]
    5d86:	813a      	strh	r2, [r7, #8]
    5d88:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    5d8a:	f04f 0300 	mov.w	r3, #0
    5d8e:	82bb      	strh	r3, [r7, #20]
    5d90:	f04f 0300 	mov.w	r3, #0
    5d94:	82fb      	strh	r3, [r7, #22]
    5d96:	f04f 0300 	mov.w	r3, #0
    5d9a:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    5d9c:	68fb      	ldr	r3, [r7, #12]
    5d9e:	8c1b      	ldrh	r3, [r3, #32]
    5da0:	b29b      	uxth	r3, r3
    5da2:	f023 0310 	bic.w	r3, r3, #16
    5da6:	b29a      	uxth	r2, r3
    5da8:	68fb      	ldr	r3, [r7, #12]
    5daa:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    5dac:	68fb      	ldr	r3, [r7, #12]
    5dae:	8b1b      	ldrh	r3, [r3, #24]
    5db0:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	8c1b      	ldrh	r3, [r3, #32]
    5db6:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    5db8:	897b      	ldrh	r3, [r7, #10]
    5dba:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5dbe:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    5dc0:	8abb      	ldrh	r3, [r7, #20]
    5dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5dc6:	ea4f 5303 	mov.w	r3, r3, lsl #20
    5dca:	ea4f 5313 	mov.w	r3, r3, lsr #20
    5dce:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    5dd0:	88fb      	ldrh	r3, [r7, #6]
    5dd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5dd6:	b29a      	uxth	r2, r3
    5dd8:	8abb      	ldrh	r3, [r7, #20]
    5dda:	ea42 0303 	orr.w	r3, r2, r3
    5dde:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    5de0:	893b      	ldrh	r3, [r7, #8]
    5de2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5de6:	b29a      	uxth	r2, r3
    5de8:	8abb      	ldrh	r3, [r7, #20]
    5dea:	ea42 0303 	orr.w	r3, r2, r3
    5dee:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5df0:	68fa      	ldr	r2, [r7, #12]
    5df2:	4b1d      	ldr	r3, [pc, #116]	; (5e68 <TI2_Config+0xec>)
    5df4:	429a      	cmp	r2, r3
    5df6:	d013      	beq.n	5e20 <TI2_Config+0xa4>
    5df8:	68fa      	ldr	r2, [r7, #12]
    5dfa:	4b1c      	ldr	r3, [pc, #112]	; (5e6c <TI2_Config+0xf0>)
    5dfc:	429a      	cmp	r2, r3
    5dfe:	d00f      	beq.n	5e20 <TI2_Config+0xa4>
    5e00:	68fb      	ldr	r3, [r7, #12]
    5e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5e06:	d00b      	beq.n	5e20 <TI2_Config+0xa4>
    5e08:	68fa      	ldr	r2, [r7, #12]
    5e0a:	4b19      	ldr	r3, [pc, #100]	; (5e70 <TI2_Config+0xf4>)
    5e0c:	429a      	cmp	r2, r3
    5e0e:	d007      	beq.n	5e20 <TI2_Config+0xa4>
    5e10:	68fa      	ldr	r2, [r7, #12]
    5e12:	4b18      	ldr	r3, [pc, #96]	; (5e74 <TI2_Config+0xf8>)
    5e14:	429a      	cmp	r2, r3
    5e16:	d003      	beq.n	5e20 <TI2_Config+0xa4>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5e18:	68fa      	ldr	r2, [r7, #12]
    5e1a:	4b17      	ldr	r3, [pc, #92]	; (5e78 <TI2_Config+0xfc>)
    5e1c:	429a      	cmp	r2, r3
    5e1e:	d10c      	bne.n	5e3a <TI2_Config+0xbe>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    5e20:	8afb      	ldrh	r3, [r7, #22]
    5e22:	f023 0320 	bic.w	r3, r3, #32
    5e26:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    5e28:	8a7a      	ldrh	r2, [r7, #18]
    5e2a:	8afb      	ldrh	r3, [r7, #22]
    5e2c:	ea42 0303 	orr.w	r3, r2, r3
    5e30:	b29b      	uxth	r3, r3
    5e32:	f043 0310 	orr.w	r3, r3, #16
    5e36:	82fb      	strh	r3, [r7, #22]
    5e38:	e00b      	b.n	5e52 <TI2_Config+0xd6>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    5e3a:	8afb      	ldrh	r3, [r7, #22]
    5e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    5e40:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    5e42:	897a      	ldrh	r2, [r7, #10]
    5e44:	8afb      	ldrh	r3, [r7, #22]
    5e46:	ea42 0303 	orr.w	r3, r2, r3
    5e4a:	b29b      	uxth	r3, r3
    5e4c:	f043 0310 	orr.w	r3, r3, #16
    5e50:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	8aba      	ldrh	r2, [r7, #20]
    5e56:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    5e58:	68fb      	ldr	r3, [r7, #12]
    5e5a:	8afa      	ldrh	r2, [r7, #22]
    5e5c:	841a      	strh	r2, [r3, #32]
}
    5e5e:	f107 071c 	add.w	r7, r7, #28
    5e62:	46bd      	mov	sp, r7
    5e64:	bc80      	pop	{r7}
    5e66:	4770      	bx	lr
    5e68:	40012c00 	.word	0x40012c00
    5e6c:	40013400 	.word	0x40013400
    5e70:	40000400 	.word	0x40000400
    5e74:	40000800 	.word	0x40000800
    5e78:	40000c00 	.word	0x40000c00

00005e7c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5e7c:	b480      	push	{r7}
    5e7e:	b087      	sub	sp, #28
    5e80:	af00      	add	r7, sp, #0
    5e82:	60f8      	str	r0, [r7, #12]
    5e84:	8179      	strh	r1, [r7, #10]
    5e86:	813a      	strh	r2, [r7, #8]
    5e88:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5e8a:	f04f 0300 	mov.w	r3, #0
    5e8e:	82bb      	strh	r3, [r7, #20]
    5e90:	f04f 0300 	mov.w	r3, #0
    5e94:	82fb      	strh	r3, [r7, #22]
    5e96:	f04f 0300 	mov.w	r3, #0
    5e9a:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	8c1b      	ldrh	r3, [r3, #32]
    5ea0:	b29b      	uxth	r3, r3
    5ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5ea6:	b29a      	uxth	r2, r3
    5ea8:	68fb      	ldr	r3, [r7, #12]
    5eaa:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5eac:	68fb      	ldr	r3, [r7, #12]
    5eae:	8b9b      	ldrh	r3, [r3, #28]
    5eb0:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5eb2:	68fb      	ldr	r3, [r7, #12]
    5eb4:	8c1b      	ldrh	r3, [r3, #32]
    5eb6:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    5eb8:	897b      	ldrh	r3, [r7, #10]
    5eba:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5ebe:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    5ec0:	8abb      	ldrh	r3, [r7, #20]
    5ec2:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    5ec6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5ec8:	88fb      	ldrh	r3, [r7, #6]
    5eca:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5ece:	b29a      	uxth	r2, r3
    5ed0:	893b      	ldrh	r3, [r7, #8]
    5ed2:	ea42 0303 	orr.w	r3, r2, r3
    5ed6:	b29a      	uxth	r2, r3
    5ed8:	8abb      	ldrh	r3, [r7, #20]
    5eda:	ea42 0303 	orr.w	r3, r2, r3
    5ede:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5ee0:	68fa      	ldr	r2, [r7, #12]
    5ee2:	4b1d      	ldr	r3, [pc, #116]	; (5f58 <TI3_Config+0xdc>)
    5ee4:	429a      	cmp	r2, r3
    5ee6:	d013      	beq.n	5f10 <TI3_Config+0x94>
    5ee8:	68fa      	ldr	r2, [r7, #12]
    5eea:	4b1c      	ldr	r3, [pc, #112]	; (5f5c <TI3_Config+0xe0>)
    5eec:	429a      	cmp	r2, r3
    5eee:	d00f      	beq.n	5f10 <TI3_Config+0x94>
    5ef0:	68fb      	ldr	r3, [r7, #12]
    5ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5ef6:	d00b      	beq.n	5f10 <TI3_Config+0x94>
    5ef8:	68fa      	ldr	r2, [r7, #12]
    5efa:	4b19      	ldr	r3, [pc, #100]	; (5f60 <TI3_Config+0xe4>)
    5efc:	429a      	cmp	r2, r3
    5efe:	d007      	beq.n	5f10 <TI3_Config+0x94>
    5f00:	68fa      	ldr	r2, [r7, #12]
    5f02:	4b18      	ldr	r3, [pc, #96]	; (5f64 <TI3_Config+0xe8>)
    5f04:	429a      	cmp	r2, r3
    5f06:	d003      	beq.n	5f10 <TI3_Config+0x94>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5f08:	68fa      	ldr	r2, [r7, #12]
    5f0a:	4b17      	ldr	r3, [pc, #92]	; (5f68 <TI3_Config+0xec>)
    5f0c:	429a      	cmp	r2, r3
    5f0e:	d10c      	bne.n	5f2a <TI3_Config+0xae>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    5f10:	8afb      	ldrh	r3, [r7, #22]
    5f12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5f16:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    5f18:	8a7a      	ldrh	r2, [r7, #18]
    5f1a:	8afb      	ldrh	r3, [r7, #22]
    5f1c:	ea42 0303 	orr.w	r3, r2, r3
    5f20:	b29b      	uxth	r3, r3
    5f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5f26:	82fb      	strh	r3, [r7, #22]
    5f28:	e00b      	b.n	5f42 <TI3_Config+0xc6>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    5f2a:	8afb      	ldrh	r3, [r7, #22]
    5f2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    5f30:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    5f32:	897a      	ldrh	r2, [r7, #10]
    5f34:	8afb      	ldrh	r3, [r7, #22]
    5f36:	ea42 0303 	orr.w	r3, r2, r3
    5f3a:	b29b      	uxth	r3, r3
    5f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5f40:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    5f42:	68fb      	ldr	r3, [r7, #12]
    5f44:	8aba      	ldrh	r2, [r7, #20]
    5f46:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	8afa      	ldrh	r2, [r7, #22]
    5f4c:	841a      	strh	r2, [r3, #32]
}
    5f4e:	f107 071c 	add.w	r7, r7, #28
    5f52:	46bd      	mov	sp, r7
    5f54:	bc80      	pop	{r7}
    5f56:	4770      	bx	lr
    5f58:	40012c00 	.word	0x40012c00
    5f5c:	40013400 	.word	0x40013400
    5f60:	40000400 	.word	0x40000400
    5f64:	40000800 	.word	0x40000800
    5f68:	40000c00 	.word	0x40000c00

00005f6c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5f6c:	b480      	push	{r7}
    5f6e:	b087      	sub	sp, #28
    5f70:	af00      	add	r7, sp, #0
    5f72:	60f8      	str	r0, [r7, #12]
    5f74:	8179      	strh	r1, [r7, #10]
    5f76:	813a      	strh	r2, [r7, #8]
    5f78:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5f7a:	f04f 0300 	mov.w	r3, #0
    5f7e:	82bb      	strh	r3, [r7, #20]
    5f80:	f04f 0300 	mov.w	r3, #0
    5f84:	82fb      	strh	r3, [r7, #22]
    5f86:	f04f 0300 	mov.w	r3, #0
    5f8a:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    5f8c:	68fb      	ldr	r3, [r7, #12]
    5f8e:	8c1b      	ldrh	r3, [r3, #32]
    5f90:	b29b      	uxth	r3, r3
    5f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5f96:	b29a      	uxth	r2, r3
    5f98:	68fb      	ldr	r3, [r7, #12]
    5f9a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5f9c:	68fb      	ldr	r3, [r7, #12]
    5f9e:	8b9b      	ldrh	r3, [r3, #28]
    5fa0:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5fa2:	68fb      	ldr	r3, [r7, #12]
    5fa4:	8c1b      	ldrh	r3, [r3, #32]
    5fa6:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    5fa8:	897b      	ldrh	r3, [r7, #10]
    5faa:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5fae:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    5fb0:	8abb      	ldrh	r3, [r7, #20]
    5fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5fb6:	ea4f 5303 	mov.w	r3, r3, lsl #20
    5fba:	ea4f 5313 	mov.w	r3, r3, lsr #20
    5fbe:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    5fc0:	893b      	ldrh	r3, [r7, #8]
    5fc2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5fc6:	b29a      	uxth	r2, r3
    5fc8:	8abb      	ldrh	r3, [r7, #20]
    5fca:	ea42 0303 	orr.w	r3, r2, r3
    5fce:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    5fd0:	88fb      	ldrh	r3, [r7, #6]
    5fd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5fd6:	b29a      	uxth	r2, r3
    5fd8:	8abb      	ldrh	r3, [r7, #20]
    5fda:	ea42 0303 	orr.w	r3, r2, r3
    5fde:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5fe0:	68fa      	ldr	r2, [r7, #12]
    5fe2:	4b1f      	ldr	r3, [pc, #124]	; (6060 <TI4_Config+0xf4>)
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d013      	beq.n	6010 <TI4_Config+0xa4>
    5fe8:	68fa      	ldr	r2, [r7, #12]
    5fea:	4b1e      	ldr	r3, [pc, #120]	; (6064 <TI4_Config+0xf8>)
    5fec:	429a      	cmp	r2, r3
    5fee:	d00f      	beq.n	6010 <TI4_Config+0xa4>
    5ff0:	68fb      	ldr	r3, [r7, #12]
    5ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5ff6:	d00b      	beq.n	6010 <TI4_Config+0xa4>
    5ff8:	68fa      	ldr	r2, [r7, #12]
    5ffa:	4b1b      	ldr	r3, [pc, #108]	; (6068 <TI4_Config+0xfc>)
    5ffc:	429a      	cmp	r2, r3
    5ffe:	d007      	beq.n	6010 <TI4_Config+0xa4>
    6000:	68fa      	ldr	r2, [r7, #12]
    6002:	4b1a      	ldr	r3, [pc, #104]	; (606c <TI4_Config+0x100>)
    6004:	429a      	cmp	r2, r3
    6006:	d003      	beq.n	6010 <TI4_Config+0xa4>
     (TIMx == TIM4) ||(TIMx == TIM5))
    6008:	68fa      	ldr	r2, [r7, #12]
    600a:	4b19      	ldr	r3, [pc, #100]	; (6070 <TI4_Config+0x104>)
    600c:	429a      	cmp	r2, r3
    600e:	d10c      	bne.n	602a <TI4_Config+0xbe>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    6010:	8afb      	ldrh	r3, [r7, #22]
    6012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6016:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    6018:	8a7a      	ldrh	r2, [r7, #18]
    601a:	8afb      	ldrh	r3, [r7, #22]
    601c:	ea42 0303 	orr.w	r3, r2, r3
    6020:	b29b      	uxth	r3, r3
    6022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6026:	82fb      	strh	r3, [r7, #22]
    6028:	e00f      	b.n	604a <TI4_Config+0xde>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    602a:	8afb      	ldrh	r3, [r7, #22]
    602c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    6030:	ea4f 4343 	mov.w	r3, r3, lsl #17
    6034:	ea4f 4353 	mov.w	r3, r3, lsr #17
    6038:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    603a:	897a      	ldrh	r2, [r7, #10]
    603c:	8afb      	ldrh	r3, [r7, #22]
    603e:	ea42 0303 	orr.w	r3, r2, r3
    6042:	b29b      	uxth	r3, r3
    6044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6048:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    604a:	68fb      	ldr	r3, [r7, #12]
    604c:	8aba      	ldrh	r2, [r7, #20]
    604e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	8afa      	ldrh	r2, [r7, #22]
    6054:	841a      	strh	r2, [r3, #32]
}
    6056:	f107 071c 	add.w	r7, r7, #28
    605a:	46bd      	mov	sp, r7
    605c:	bc80      	pop	{r7}
    605e:	4770      	bx	lr
    6060:	40012c00 	.word	0x40012c00
    6064:	40013400 	.word	0x40013400
    6068:	40000400 	.word	0x40000400
    606c:	40000800 	.word	0x40000800
    6070:	40000c00 	.word	0x40000c00

00006074 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    6074:	b480      	push	{r7}
    6076:	b083      	sub	sp, #12
    6078:	af00      	add	r7, sp, #0
    607a:	4602      	mov	r2, r0
    607c:	460b      	mov	r3, r1
    607e:	80fa      	strh	r2, [r7, #6]
    6080:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    6082:	797b      	ldrb	r3, [r7, #5]
    6084:	2b00      	cmp	r3, #0
    6086:	d009      	beq.n	609c <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
    6088:	4b0d      	ldr	r3, [pc, #52]	; (60c0 <RTC_ITConfig+0x4c>)
    608a:	4a0d      	ldr	r2, [pc, #52]	; (60c0 <RTC_ITConfig+0x4c>)
    608c:	8812      	ldrh	r2, [r2, #0]
    608e:	b291      	uxth	r1, r2
    6090:	88fa      	ldrh	r2, [r7, #6]
    6092:	ea41 0202 	orr.w	r2, r1, r2
    6096:	b292      	uxth	r2, r2
    6098:	801a      	strh	r2, [r3, #0]
    609a:	e00b      	b.n	60b4 <RTC_ITConfig+0x40>
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
    609c:	4b08      	ldr	r3, [pc, #32]	; (60c0 <RTC_ITConfig+0x4c>)
    609e:	4a08      	ldr	r2, [pc, #32]	; (60c0 <RTC_ITConfig+0x4c>)
    60a0:	8812      	ldrh	r2, [r2, #0]
    60a2:	b291      	uxth	r1, r2
    60a4:	88fa      	ldrh	r2, [r7, #6]
    60a6:	ea6f 0202 	mvn.w	r2, r2
    60aa:	b292      	uxth	r2, r2
    60ac:	ea01 0202 	and.w	r2, r1, r2
    60b0:	b292      	uxth	r2, r2
    60b2:	801a      	strh	r2, [r3, #0]
  }
}
    60b4:	f107 070c 	add.w	r7, r7, #12
    60b8:	46bd      	mov	sp, r7
    60ba:	bc80      	pop	{r7}
    60bc:	4770      	bx	lr
    60be:	bf00      	nop
    60c0:	40002800 	.word	0x40002800

000060c4 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    60c4:	b480      	push	{r7}
    60c6:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
    60c8:	4b05      	ldr	r3, [pc, #20]	; (60e0 <RTC_EnterConfigMode+0x1c>)
    60ca:	4a05      	ldr	r2, [pc, #20]	; (60e0 <RTC_EnterConfigMode+0x1c>)
    60cc:	8892      	ldrh	r2, [r2, #4]
    60ce:	b292      	uxth	r2, r2
    60d0:	f042 0210 	orr.w	r2, r2, #16
    60d4:	b292      	uxth	r2, r2
    60d6:	809a      	strh	r2, [r3, #4]
}
    60d8:	46bd      	mov	sp, r7
    60da:	bc80      	pop	{r7}
    60dc:	4770      	bx	lr
    60de:	bf00      	nop
    60e0:	40002800 	.word	0x40002800

000060e4 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    60e4:	b480      	push	{r7}
    60e6:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    60e8:	4b05      	ldr	r3, [pc, #20]	; (6100 <RTC_ExitConfigMode+0x1c>)
    60ea:	4a05      	ldr	r2, [pc, #20]	; (6100 <RTC_ExitConfigMode+0x1c>)
    60ec:	8892      	ldrh	r2, [r2, #4]
    60ee:	b292      	uxth	r2, r2
    60f0:	f022 0210 	bic.w	r2, r2, #16
    60f4:	b292      	uxth	r2, r2
    60f6:	809a      	strh	r2, [r3, #4]
}
    60f8:	46bd      	mov	sp, r7
    60fa:	bc80      	pop	{r7}
    60fc:	4770      	bx	lr
    60fe:	bf00      	nop
    6100:	40002800 	.word	0x40002800

00006104 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    6104:	b480      	push	{r7}
    6106:	b083      	sub	sp, #12
    6108:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    610a:	f04f 0300 	mov.w	r3, #0
    610e:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
    6110:	4b08      	ldr	r3, [pc, #32]	; (6134 <RTC_GetCounter+0x30>)
    6112:	8b9b      	ldrh	r3, [r3, #28]
    6114:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    6116:	4b07      	ldr	r3, [pc, #28]	; (6134 <RTC_GetCounter+0x30>)
    6118:	8b1b      	ldrh	r3, [r3, #24]
    611a:	b29b      	uxth	r3, r3
    611c:	ea4f 4203 	mov.w	r2, r3, lsl #16
    6120:	88fb      	ldrh	r3, [r7, #6]
    6122:	ea42 0303 	orr.w	r3, r2, r3
}
    6126:	4618      	mov	r0, r3
    6128:	f107 070c 	add.w	r7, r7, #12
    612c:	46bd      	mov	sp, r7
    612e:	bc80      	pop	{r7}
    6130:	4770      	bx	lr
    6132:	bf00      	nop
    6134:	40002800 	.word	0x40002800

00006138 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    6138:	b580      	push	{r7, lr}
    613a:	b082      	sub	sp, #8
    613c:	af00      	add	r7, sp, #0
    613e:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    6140:	f7ff ffc0 	bl	60c4 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    6144:	4b07      	ldr	r3, [pc, #28]	; (6164 <RTC_SetCounter+0x2c>)
    6146:	687a      	ldr	r2, [r7, #4]
    6148:	ea4f 4212 	mov.w	r2, r2, lsr #16
    614c:	b292      	uxth	r2, r2
    614e:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    6150:	4b04      	ldr	r3, [pc, #16]	; (6164 <RTC_SetCounter+0x2c>)
    6152:	687a      	ldr	r2, [r7, #4]
    6154:	b292      	uxth	r2, r2
    6156:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
    6158:	f7ff ffc4 	bl	60e4 <RTC_ExitConfigMode>
}
    615c:	f107 0708 	add.w	r7, r7, #8
    6160:	46bd      	mov	sp, r7
    6162:	bd80      	pop	{r7, pc}
    6164:	40002800 	.word	0x40002800

00006168 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    6168:	b580      	push	{r7, lr}
    616a:	b082      	sub	sp, #8
    616c:	af00      	add	r7, sp, #0
    616e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    6170:	f7ff ffa8 	bl	60c4 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    6174:	4b08      	ldr	r3, [pc, #32]	; (6198 <RTC_SetPrescaler+0x30>)
    6176:	687a      	ldr	r2, [r7, #4]
    6178:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    617c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    6180:	b292      	uxth	r2, r2
    6182:	811a      	strh	r2, [r3, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    6184:	4b04      	ldr	r3, [pc, #16]	; (6198 <RTC_SetPrescaler+0x30>)
    6186:	687a      	ldr	r2, [r7, #4]
    6188:	b292      	uxth	r2, r2
    618a:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
    618c:	f7ff ffaa 	bl	60e4 <RTC_ExitConfigMode>
}
    6190:	f107 0708 	add.w	r7, r7, #8
    6194:	46bd      	mov	sp, r7
    6196:	bd80      	pop	{r7, pc}
    6198:	40002800 	.word	0x40002800

0000619c <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    619c:	b580      	push	{r7, lr}
    619e:	b082      	sub	sp, #8
    61a0:	af00      	add	r7, sp, #0
    61a2:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    61a4:	f7ff ff8e 	bl	60c4 <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    61a8:	4b07      	ldr	r3, [pc, #28]	; (61c8 <RTC_SetAlarm+0x2c>)
    61aa:	687a      	ldr	r2, [r7, #4]
    61ac:	ea4f 4212 	mov.w	r2, r2, lsr #16
    61b0:	b292      	uxth	r2, r2
    61b2:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    61b4:	4b04      	ldr	r3, [pc, #16]	; (61c8 <RTC_SetAlarm+0x2c>)
    61b6:	687a      	ldr	r2, [r7, #4]
    61b8:	b292      	uxth	r2, r2
    61ba:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
    61bc:	f7ff ff92 	bl	60e4 <RTC_ExitConfigMode>
}
    61c0:	f107 0708 	add.w	r7, r7, #8
    61c4:	46bd      	mov	sp, r7
    61c6:	bd80      	pop	{r7, pc}
    61c8:	40002800 	.word	0x40002800

000061cc <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    61cc:	b480      	push	{r7}
    61ce:	b083      	sub	sp, #12
    61d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    61d2:	f04f 0300 	mov.w	r3, #0
    61d6:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    61d8:	4b0a      	ldr	r3, [pc, #40]	; (6204 <RTC_GetDivider+0x38>)
    61da:	8a1b      	ldrh	r3, [r3, #16]
    61dc:	b29b      	uxth	r3, r3
    61de:	f003 030f 	and.w	r3, r3, #15
    61e2:	ea4f 4303 	mov.w	r3, r3, lsl #16
    61e6:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
    61e8:	4b06      	ldr	r3, [pc, #24]	; (6204 <RTC_GetDivider+0x38>)
    61ea:	8a9b      	ldrh	r3, [r3, #20]
    61ec:	b29b      	uxth	r3, r3
    61ee:	687a      	ldr	r2, [r7, #4]
    61f0:	ea42 0303 	orr.w	r3, r2, r3
    61f4:	607b      	str	r3, [r7, #4]
  return tmp;
    61f6:	687b      	ldr	r3, [r7, #4]
}
    61f8:	4618      	mov	r0, r3
    61fa:	f107 070c 	add.w	r7, r7, #12
    61fe:	46bd      	mov	sp, r7
    6200:	bc80      	pop	{r7}
    6202:	4770      	bx	lr
    6204:	40002800 	.word	0x40002800

00006208 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    6208:	b480      	push	{r7}
    620a:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    620c:	bf00      	nop
    620e:	4b05      	ldr	r3, [pc, #20]	; (6224 <RTC_WaitForLastTask+0x1c>)
    6210:	889b      	ldrh	r3, [r3, #4]
    6212:	b29b      	uxth	r3, r3
    6214:	f003 0320 	and.w	r3, r3, #32
    6218:	2b00      	cmp	r3, #0
    621a:	d0f8      	beq.n	620e <RTC_WaitForLastTask+0x6>
  {
  }
}
    621c:	46bd      	mov	sp, r7
    621e:	bc80      	pop	{r7}
    6220:	4770      	bx	lr
    6222:	bf00      	nop
    6224:	40002800 	.word	0x40002800

00006228 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    6228:	b480      	push	{r7}
    622a:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    622c:	4b09      	ldr	r3, [pc, #36]	; (6254 <RTC_WaitForSynchro+0x2c>)
    622e:	4a09      	ldr	r2, [pc, #36]	; (6254 <RTC_WaitForSynchro+0x2c>)
    6230:	8892      	ldrh	r2, [r2, #4]
    6232:	b292      	uxth	r2, r2
    6234:	f022 0208 	bic.w	r2, r2, #8
    6238:	b292      	uxth	r2, r2
    623a:	809a      	strh	r2, [r3, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    623c:	bf00      	nop
    623e:	4b05      	ldr	r3, [pc, #20]	; (6254 <RTC_WaitForSynchro+0x2c>)
    6240:	889b      	ldrh	r3, [r3, #4]
    6242:	b29b      	uxth	r3, r3
    6244:	f003 0308 	and.w	r3, r3, #8
    6248:	2b00      	cmp	r3, #0
    624a:	d0f8      	beq.n	623e <RTC_WaitForSynchro+0x16>
  {
  }
}
    624c:	46bd      	mov	sp, r7
    624e:	bc80      	pop	{r7}
    6250:	4770      	bx	lr
    6252:	bf00      	nop
    6254:	40002800 	.word	0x40002800

00006258 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    6258:	b480      	push	{r7}
    625a:	b085      	sub	sp, #20
    625c:	af00      	add	r7, sp, #0
    625e:	4603      	mov	r3, r0
    6260:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
    6262:	f04f 0300 	mov.w	r3, #0
    6266:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    6268:	4b0b      	ldr	r3, [pc, #44]	; (6298 <RTC_GetFlagStatus+0x40>)
    626a:	889b      	ldrh	r3, [r3, #4]
    626c:	b29a      	uxth	r2, r3
    626e:	88fb      	ldrh	r3, [r7, #6]
    6270:	ea02 0303 	and.w	r3, r2, r3
    6274:	b29b      	uxth	r3, r3
    6276:	2b00      	cmp	r3, #0
    6278:	d003      	beq.n	6282 <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    627a:	f04f 0301 	mov.w	r3, #1
    627e:	73fb      	strb	r3, [r7, #15]
    6280:	e002      	b.n	6288 <RTC_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    6282:	f04f 0300 	mov.w	r3, #0
    6286:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    6288:	7bfb      	ldrb	r3, [r7, #15]
}
    628a:	4618      	mov	r0, r3
    628c:	f107 0714 	add.w	r7, r7, #20
    6290:	46bd      	mov	sp, r7
    6292:	bc80      	pop	{r7}
    6294:	4770      	bx	lr
    6296:	bf00      	nop
    6298:	40002800 	.word	0x40002800

0000629c <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    629c:	b480      	push	{r7}
    629e:	b083      	sub	sp, #12
    62a0:	af00      	add	r7, sp, #0
    62a2:	4603      	mov	r3, r0
    62a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    62a6:	4b08      	ldr	r3, [pc, #32]	; (62c8 <RTC_ClearFlag+0x2c>)
    62a8:	4a07      	ldr	r2, [pc, #28]	; (62c8 <RTC_ClearFlag+0x2c>)
    62aa:	8892      	ldrh	r2, [r2, #4]
    62ac:	b291      	uxth	r1, r2
    62ae:	88fa      	ldrh	r2, [r7, #6]
    62b0:	ea6f 0202 	mvn.w	r2, r2
    62b4:	b292      	uxth	r2, r2
    62b6:	ea01 0202 	and.w	r2, r1, r2
    62ba:	b292      	uxth	r2, r2
    62bc:	809a      	strh	r2, [r3, #4]
}
    62be:	f107 070c 	add.w	r7, r7, #12
    62c2:	46bd      	mov	sp, r7
    62c4:	bc80      	pop	{r7}
    62c6:	4770      	bx	lr
    62c8:	40002800 	.word	0x40002800

000062cc <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    62cc:	b480      	push	{r7}
    62ce:	b085      	sub	sp, #20
    62d0:	af00      	add	r7, sp, #0
    62d2:	4603      	mov	r3, r0
    62d4:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
    62d6:	f04f 0300 	mov.w	r3, #0
    62da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    62dc:	4b11      	ldr	r3, [pc, #68]	; (6324 <RTC_GetITStatus+0x58>)
    62de:	889b      	ldrh	r3, [r3, #4]
    62e0:	b29b      	uxth	r3, r3
    62e2:	b2da      	uxtb	r2, r3
    62e4:	88fb      	ldrh	r3, [r7, #6]
    62e6:	b2db      	uxtb	r3, r3
    62e8:	ea02 0303 	and.w	r3, r2, r3
    62ec:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <RTC_GetITStatus+0x58>)
    62f0:	881b      	ldrh	r3, [r3, #0]
    62f2:	b29a      	uxth	r2, r3
    62f4:	88fb      	ldrh	r3, [r7, #6]
    62f6:	ea02 0303 	and.w	r3, r2, r3
    62fa:	b29b      	uxth	r3, r3
    62fc:	2b00      	cmp	r3, #0
    62fe:	d006      	beq.n	630e <RTC_GetITStatus+0x42>
    6300:	7bfb      	ldrb	r3, [r7, #15]
    6302:	2b00      	cmp	r3, #0
    6304:	d003      	beq.n	630e <RTC_GetITStatus+0x42>
  {
    bitstatus = SET;
    6306:	f04f 0301 	mov.w	r3, #1
    630a:	73fb      	strb	r3, [r7, #15]
    630c:	e002      	b.n	6314 <RTC_GetITStatus+0x48>
  }
  else
  {
    bitstatus = RESET;
    630e:	f04f 0300 	mov.w	r3, #0
    6312:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    6314:	7bfb      	ldrb	r3, [r7, #15]
}
    6316:	4618      	mov	r0, r3
    6318:	f107 0714 	add.w	r7, r7, #20
    631c:	46bd      	mov	sp, r7
    631e:	bc80      	pop	{r7}
    6320:	4770      	bx	lr
    6322:	bf00      	nop
    6324:	40002800 	.word	0x40002800

00006328 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    6328:	b480      	push	{r7}
    632a:	b083      	sub	sp, #12
    632c:	af00      	add	r7, sp, #0
    632e:	4603      	mov	r3, r0
    6330:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    6332:	4b08      	ldr	r3, [pc, #32]	; (6354 <RTC_ClearITPendingBit+0x2c>)
    6334:	4a07      	ldr	r2, [pc, #28]	; (6354 <RTC_ClearITPendingBit+0x2c>)
    6336:	8892      	ldrh	r2, [r2, #4]
    6338:	b291      	uxth	r1, r2
    633a:	88fa      	ldrh	r2, [r7, #6]
    633c:	ea6f 0202 	mvn.w	r2, r2
    6340:	b292      	uxth	r2, r2
    6342:	ea01 0202 	and.w	r2, r1, r2
    6346:	b292      	uxth	r2, r2
    6348:	809a      	strh	r2, [r3, #4]
}
    634a:	f107 070c 	add.w	r7, r7, #12
    634e:	46bd      	mov	sp, r7
    6350:	bc80      	pop	{r7}
    6352:	4770      	bx	lr
    6354:	40002800 	.word	0x40002800

00006358 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
    6358:	b580      	push	{r7, lr}
    635a:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    635c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    6360:	f04f 0101 	mov.w	r1, #1
    6364:	f7fb fe98 	bl	2098 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    6368:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    636c:	f04f 0100 	mov.w	r1, #0
    6370:	f7fb fe92 	bl	2098 <RCC_APB1PeriphResetCmd>
}
    6374:	bd80      	pop	{r7, pc}
    6376:	bf00      	nop

00006378 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
    6378:	b480      	push	{r7}
    637a:	b085      	sub	sp, #20
    637c:	af00      	add	r7, sp, #0
    637e:	6078      	str	r0, [r7, #4]
    6380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    6382:	f04f 0300 	mov.w	r3, #0
    6386:	60fb      	str	r3, [r7, #12]
    6388:	f04f 0300 	mov.w	r3, #0
    638c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
    638e:	4b15      	ldr	r3, [pc, #84]	; (63e4 <DAC_Init+0x6c>)
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	f640 72fe 	movw	r2, #4094	; 0xffe
    639a:	fa02 f303 	lsl.w	r3, r2, r3
    639e:	ea6f 0303 	mvn.w	r3, r3
    63a2:	68fa      	ldr	r2, [r7, #12]
    63a4:	ea02 0303 	and.w	r3, r2, r3
    63a8:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    63aa:	683b      	ldr	r3, [r7, #0]
    63ac:	681a      	ldr	r2, [r3, #0]
    63ae:	683b      	ldr	r3, [r7, #0]
    63b0:	685b      	ldr	r3, [r3, #4]
    63b2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    63b4:	683b      	ldr	r3, [r7, #0]
    63b6:	689b      	ldr	r3, [r3, #8]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    63b8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    63ba:	683b      	ldr	r3, [r7, #0]
    63bc:	68db      	ldr	r3, [r3, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    63be:	ea42 0303 	orr.w	r3, r2, r3
    63c2:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
    63c4:	687b      	ldr	r3, [r7, #4]
    63c6:	68ba      	ldr	r2, [r7, #8]
    63c8:	fa02 f303 	lsl.w	r3, r2, r3
    63cc:	68fa      	ldr	r2, [r7, #12]
    63ce:	ea42 0303 	orr.w	r3, r2, r3
    63d2:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
    63d4:	4b03      	ldr	r3, [pc, #12]	; (63e4 <DAC_Init+0x6c>)
    63d6:	68fa      	ldr	r2, [r7, #12]
    63d8:	601a      	str	r2, [r3, #0]
}
    63da:	f107 0714 	add.w	r7, r7, #20
    63de:	46bd      	mov	sp, r7
    63e0:	bc80      	pop	{r7}
    63e2:	4770      	bx	lr
    63e4:	40007400 	.word	0x40007400

000063e8 <DAC_StructInit>:
  * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
    63e8:	b480      	push	{r7}
    63ea:	b083      	sub	sp, #12
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	f04f 0200 	mov.w	r2, #0
    63f6:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	f04f 0200 	mov.w	r2, #0
    63fe:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	f04f 0200 	mov.w	r2, #0
    6406:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	f04f 0200 	mov.w	r2, #0
    640e:	60da      	str	r2, [r3, #12]
}
    6410:	f107 070c 	add.w	r7, r7, #12
    6414:	46bd      	mov	sp, r7
    6416:	bc80      	pop	{r7}
    6418:	4770      	bx	lr
    641a:	bf00      	nop

0000641c <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    641c:	b480      	push	{r7}
    641e:	b083      	sub	sp, #12
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
    6424:	460b      	mov	r3, r1
    6426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6428:	78fb      	ldrb	r3, [r7, #3]
    642a:	2b00      	cmp	r3, #0
    642c:	d00b      	beq.n	6446 <DAC_Cmd+0x2a>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    642e:	4b0f      	ldr	r3, [pc, #60]	; (646c <DAC_Cmd+0x50>)
    6430:	4a0e      	ldr	r2, [pc, #56]	; (646c <DAC_Cmd+0x50>)
    6432:	6811      	ldr	r1, [r2, #0]
    6434:	687a      	ldr	r2, [r7, #4]
    6436:	f04f 0001 	mov.w	r0, #1
    643a:	fa00 f202 	lsl.w	r2, r0, r2
    643e:	ea41 0202 	orr.w	r2, r1, r2
    6442:	601a      	str	r2, [r3, #0]
    6444:	e00c      	b.n	6460 <DAC_Cmd+0x44>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    6446:	4b09      	ldr	r3, [pc, #36]	; (646c <DAC_Cmd+0x50>)
    6448:	4a08      	ldr	r2, [pc, #32]	; (646c <DAC_Cmd+0x50>)
    644a:	6811      	ldr	r1, [r2, #0]
    644c:	687a      	ldr	r2, [r7, #4]
    644e:	f04f 0001 	mov.w	r0, #1
    6452:	fa00 f202 	lsl.w	r2, r0, r2
    6456:	ea6f 0202 	mvn.w	r2, r2
    645a:	ea01 0202 	and.w	r2, r1, r2
    645e:	601a      	str	r2, [r3, #0]
  }
}
    6460:	f107 070c 	add.w	r7, r7, #12
    6464:	46bd      	mov	sp, r7
    6466:	bc80      	pop	{r7}
    6468:	4770      	bx	lr
    646a:	bf00      	nop
    646c:	40007400 	.word	0x40007400

00006470 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    6470:	b480      	push	{r7}
    6472:	b083      	sub	sp, #12
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
    6478:	460b      	mov	r3, r1
    647a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    647c:	78fb      	ldrb	r3, [r7, #3]
    647e:	2b00      	cmp	r3, #0
    6480:	d00b      	beq.n	649a <DAC_DMACmd+0x2a>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    6482:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <DAC_DMACmd+0x50>)
    6484:	4a0e      	ldr	r2, [pc, #56]	; (64c0 <DAC_DMACmd+0x50>)
    6486:	6811      	ldr	r1, [r2, #0]
    6488:	687a      	ldr	r2, [r7, #4]
    648a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    648e:	fa00 f202 	lsl.w	r2, r0, r2
    6492:	ea41 0202 	orr.w	r2, r1, r2
    6496:	601a      	str	r2, [r3, #0]
    6498:	e00c      	b.n	64b4 <DAC_DMACmd+0x44>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    649a:	4b09      	ldr	r3, [pc, #36]	; (64c0 <DAC_DMACmd+0x50>)
    649c:	4a08      	ldr	r2, [pc, #32]	; (64c0 <DAC_DMACmd+0x50>)
    649e:	6811      	ldr	r1, [r2, #0]
    64a0:	687a      	ldr	r2, [r7, #4]
    64a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    64a6:	fa00 f202 	lsl.w	r2, r0, r2
    64aa:	ea6f 0202 	mvn.w	r2, r2
    64ae:	ea01 0202 	and.w	r2, r1, r2
    64b2:	601a      	str	r2, [r3, #0]
  }
}
    64b4:	f107 070c 	add.w	r7, r7, #12
    64b8:	46bd      	mov	sp, r7
    64ba:	bc80      	pop	{r7}
    64bc:	4770      	bx	lr
    64be:	bf00      	nop
    64c0:	40007400 	.word	0x40007400

000064c4 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    64c4:	b480      	push	{r7}
    64c6:	b083      	sub	sp, #12
    64c8:	af00      	add	r7, sp, #0
    64ca:	6078      	str	r0, [r7, #4]
    64cc:	460b      	mov	r3, r1
    64ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    64d0:	78fb      	ldrb	r3, [r7, #3]
    64d2:	2b00      	cmp	r3, #0
    64d4:	d00d      	beq.n	64f2 <DAC_SoftwareTriggerCmd+0x2e>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    64d6:	4b11      	ldr	r3, [pc, #68]	; (651c <DAC_SoftwareTriggerCmd+0x58>)
    64d8:	4a10      	ldr	r2, [pc, #64]	; (651c <DAC_SoftwareTriggerCmd+0x58>)
    64da:	6851      	ldr	r1, [r2, #4]
    64dc:	687a      	ldr	r2, [r7, #4]
    64de:	ea4f 1212 	mov.w	r2, r2, lsr #4
    64e2:	f04f 0001 	mov.w	r0, #1
    64e6:	fa00 f202 	lsl.w	r2, r0, r2
    64ea:	ea41 0202 	orr.w	r2, r1, r2
    64ee:	605a      	str	r2, [r3, #4]
    64f0:	e00e      	b.n	6510 <DAC_SoftwareTriggerCmd+0x4c>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    64f2:	4b0a      	ldr	r3, [pc, #40]	; (651c <DAC_SoftwareTriggerCmd+0x58>)
    64f4:	4a09      	ldr	r2, [pc, #36]	; (651c <DAC_SoftwareTriggerCmd+0x58>)
    64f6:	6851      	ldr	r1, [r2, #4]
    64f8:	687a      	ldr	r2, [r7, #4]
    64fa:	ea4f 1212 	mov.w	r2, r2, lsr #4
    64fe:	f04f 0001 	mov.w	r0, #1
    6502:	fa00 f202 	lsl.w	r2, r0, r2
    6506:	ea6f 0202 	mvn.w	r2, r2
    650a:	ea01 0202 	and.w	r2, r1, r2
    650e:	605a      	str	r2, [r3, #4]
  }
}
    6510:	f107 070c 	add.w	r7, r7, #12
    6514:	46bd      	mov	sp, r7
    6516:	bc80      	pop	{r7}
    6518:	4770      	bx	lr
    651a:	bf00      	nop
    651c:	40007400 	.word	0x40007400

00006520 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
    6520:	b480      	push	{r7}
    6522:	b083      	sub	sp, #12
    6524:	af00      	add	r7, sp, #0
    6526:	4603      	mov	r3, r0
    6528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    652a:	79fb      	ldrb	r3, [r7, #7]
    652c:	2b00      	cmp	r3, #0
    652e:	d006      	beq.n	653e <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
    6530:	4b08      	ldr	r3, [pc, #32]	; (6554 <DAC_DualSoftwareTriggerCmd+0x34>)
    6532:	4a08      	ldr	r2, [pc, #32]	; (6554 <DAC_DualSoftwareTriggerCmd+0x34>)
    6534:	6852      	ldr	r2, [r2, #4]
    6536:	f042 0203 	orr.w	r2, r2, #3
    653a:	605a      	str	r2, [r3, #4]
    653c:	e005      	b.n	654a <DAC_DualSoftwareTriggerCmd+0x2a>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    653e:	4b05      	ldr	r3, [pc, #20]	; (6554 <DAC_DualSoftwareTriggerCmd+0x34>)
    6540:	4a04      	ldr	r2, [pc, #16]	; (6554 <DAC_DualSoftwareTriggerCmd+0x34>)
    6542:	6852      	ldr	r2, [r2, #4]
    6544:	f022 0203 	bic.w	r2, r2, #3
    6548:	605a      	str	r2, [r3, #4]
  }
}
    654a:	f107 070c 	add.w	r7, r7, #12
    654e:	46bd      	mov	sp, r7
    6550:	bc80      	pop	{r7}
    6552:	4770      	bx	lr
    6554:	40007400 	.word	0x40007400

00006558 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
    6558:	b480      	push	{r7}
    655a:	b085      	sub	sp, #20
    655c:	af00      	add	r7, sp, #0
    655e:	60f8      	str	r0, [r7, #12]
    6560:	60b9      	str	r1, [r7, #8]
    6562:	4613      	mov	r3, r2
    6564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6566:	79fb      	ldrb	r3, [r7, #7]
    6568:	2b00      	cmp	r3, #0
    656a:	d00a      	beq.n	6582 <DAC_WaveGenerationCmd+0x2a>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
    656c:	4b0d      	ldr	r3, [pc, #52]	; (65a4 <DAC_WaveGenerationCmd+0x4c>)
    656e:	4a0d      	ldr	r2, [pc, #52]	; (65a4 <DAC_WaveGenerationCmd+0x4c>)
    6570:	6811      	ldr	r1, [r2, #0]
    6572:	68fa      	ldr	r2, [r7, #12]
    6574:	68b8      	ldr	r0, [r7, #8]
    6576:	fa00 f202 	lsl.w	r2, r0, r2
    657a:	ea41 0202 	orr.w	r2, r1, r2
    657e:	601a      	str	r2, [r3, #0]
    6580:	e00b      	b.n	659a <DAC_WaveGenerationCmd+0x42>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
    6582:	4b08      	ldr	r3, [pc, #32]	; (65a4 <DAC_WaveGenerationCmd+0x4c>)
    6584:	4a07      	ldr	r2, [pc, #28]	; (65a4 <DAC_WaveGenerationCmd+0x4c>)
    6586:	6811      	ldr	r1, [r2, #0]
    6588:	68fa      	ldr	r2, [r7, #12]
    658a:	68b8      	ldr	r0, [r7, #8]
    658c:	fa00 f202 	lsl.w	r2, r0, r2
    6590:	ea6f 0202 	mvn.w	r2, r2
    6594:	ea01 0202 	and.w	r2, r1, r2
    6598:	601a      	str	r2, [r3, #0]
  }
}
    659a:	f107 0714 	add.w	r7, r7, #20
    659e:	46bd      	mov	sp, r7
    65a0:	bc80      	pop	{r7}
    65a2:	4770      	bx	lr
    65a4:	40007400 	.word	0x40007400

000065a8 <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
    65a8:	b480      	push	{r7}
    65aa:	b085      	sub	sp, #20
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
    65b0:	460b      	mov	r3, r1
    65b2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    65b4:	f04f 0300 	mov.w	r3, #0
    65b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
    65ba:	4b08      	ldr	r3, [pc, #32]	; (65dc <DAC_SetChannel1Data+0x34>)
    65bc:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
    65be:	68fa      	ldr	r2, [r7, #12]
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	18d3      	adds	r3, r2, r3
    65c4:	f103 0308 	add.w	r3, r3, #8
    65c8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
    65ca:	68fb      	ldr	r3, [r7, #12]
    65cc:	887a      	ldrh	r2, [r7, #2]
    65ce:	601a      	str	r2, [r3, #0]
}
    65d0:	f107 0714 	add.w	r7, r7, #20
    65d4:	46bd      	mov	sp, r7
    65d6:	bc80      	pop	{r7}
    65d8:	4770      	bx	lr
    65da:	bf00      	nop
    65dc:	40007400 	.word	0x40007400

000065e0 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
    65e0:	b480      	push	{r7}
    65e2:	b085      	sub	sp, #20
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
    65e8:	460b      	mov	r3, r1
    65ea:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    65ec:	f04f 0300 	mov.w	r3, #0
    65f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
    65f2:	4b08      	ldr	r3, [pc, #32]	; (6614 <DAC_SetChannel2Data+0x34>)
    65f4:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
    65f6:	68fa      	ldr	r2, [r7, #12]
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	18d3      	adds	r3, r2, r3
    65fc:	f103 0314 	add.w	r3, r3, #20
    6600:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
    6602:	68fb      	ldr	r3, [r7, #12]
    6604:	887a      	ldrh	r2, [r7, #2]
    6606:	601a      	str	r2, [r3, #0]
}
    6608:	f107 0714 	add.w	r7, r7, #20
    660c:	46bd      	mov	sp, r7
    660e:	bc80      	pop	{r7}
    6610:	4770      	bx	lr
    6612:	bf00      	nop
    6614:	40007400 	.word	0x40007400

00006618 <DAC_SetDualChannelData>:
  * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
  *   holding register.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
    6618:	b480      	push	{r7}
    661a:	b085      	sub	sp, #20
    661c:	af00      	add	r7, sp, #0
    661e:	6078      	str	r0, [r7, #4]
    6620:	4613      	mov	r3, r2
    6622:	460a      	mov	r2, r1
    6624:	807a      	strh	r2, [r7, #2]
    6626:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
    6628:	f04f 0300 	mov.w	r3, #0
    662c:	60fb      	str	r3, [r7, #12]
    662e:	f04f 0300 	mov.w	r3, #0
    6632:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	2b08      	cmp	r3, #8
    6638:	d107      	bne.n	664a <DAC_SetDualChannelData+0x32>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
    663a:	887b      	ldrh	r3, [r7, #2]
    663c:	ea4f 2203 	mov.w	r2, r3, lsl #8
    6640:	883b      	ldrh	r3, [r7, #0]
    6642:	ea42 0303 	orr.w	r3, r2, r3
    6646:	60fb      	str	r3, [r7, #12]
    6648:	e006      	b.n	6658 <DAC_SetDualChannelData+0x40>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
    664a:	887b      	ldrh	r3, [r7, #2]
    664c:	ea4f 4203 	mov.w	r2, r3, lsl #16
    6650:	883b      	ldrh	r3, [r7, #0]
    6652:	ea42 0303 	orr.w	r3, r2, r3
    6656:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
    6658:	4b07      	ldr	r3, [pc, #28]	; (6678 <DAC_SetDualChannelData+0x60>)
    665a:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
    665c:	687a      	ldr	r2, [r7, #4]
    665e:	68bb      	ldr	r3, [r7, #8]
    6660:	18d3      	adds	r3, r2, r3
    6662:	f103 0320 	add.w	r3, r3, #32
    6666:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
    6668:	68bb      	ldr	r3, [r7, #8]
    666a:	68fa      	ldr	r2, [r7, #12]
    666c:	601a      	str	r2, [r3, #0]
}
    666e:	f107 0714 	add.w	r7, r7, #20
    6672:	46bd      	mov	sp, r7
    6674:	bc80      	pop	{r7}
    6676:	4770      	bx	lr
    6678:	40007400 	.word	0x40007400

0000667c <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
    667c:	b480      	push	{r7}
    667e:	b085      	sub	sp, #20
    6680:	af00      	add	r7, sp, #0
    6682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
    6684:	f04f 0300 	mov.w	r3, #0
    6688:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
    668a:	4b09      	ldr	r3, [pc, #36]	; (66b0 <DAC_GetDataOutputValue+0x34>)
    668c:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	ea4f 0293 	mov.w	r2, r3, lsr #2
    6694:	68fb      	ldr	r3, [r7, #12]
    6696:	18d3      	adds	r3, r2, r3
    6698:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    669c:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
    669e:	68fb      	ldr	r3, [r7, #12]
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	b29b      	uxth	r3, r3
}
    66a4:	4618      	mov	r0, r3
    66a6:	f107 0714 	add.w	r7, r7, #20
    66aa:	46bd      	mov	sp, r7
    66ac:	bc80      	pop	{r7}
    66ae:	4770      	bx	lr
    66b0:	40007400 	.word	0x40007400

000066b4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    66b4:	b480      	push	{r7}
    66b6:	b083      	sub	sp, #12
    66b8:	af00      	add	r7, sp, #0
    66ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    66bc:	4a05      	ldr	r2, [pc, #20]	; (66d4 <NVIC_PriorityGroupConfig+0x20>)
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
    66c4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    66c8:	60d3      	str	r3, [r2, #12]
}
    66ca:	f107 070c 	add.w	r7, r7, #12
    66ce:	46bd      	mov	sp, r7
    66d0:	bc80      	pop	{r7}
    66d2:	4770      	bx	lr
    66d4:	e000ed00 	.word	0xe000ed00

000066d8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    66d8:	b480      	push	{r7}
    66da:	b087      	sub	sp, #28
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    66e0:	f04f 0300 	mov.w	r3, #0
    66e4:	617b      	str	r3, [r7, #20]
    66e6:	f04f 0300 	mov.w	r3, #0
    66ea:	613b      	str	r3, [r7, #16]
    66ec:	f04f 030f 	mov.w	r3, #15
    66f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	78db      	ldrb	r3, [r3, #3]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d03f      	beq.n	677a <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    66fa:	4b2b      	ldr	r3, [pc, #172]	; (67a8 <NVIC_Init+0xd0>)
    66fc:	68db      	ldr	r3, [r3, #12]
    66fe:	ea6f 0303 	mvn.w	r3, r3
    6702:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6706:	ea4f 2313 	mov.w	r3, r3, lsr #8
    670a:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    670c:	697b      	ldr	r3, [r7, #20]
    670e:	f1c3 0304 	rsb	r3, r3, #4
    6712:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    6714:	697b      	ldr	r3, [r7, #20]
    6716:	68fa      	ldr	r2, [r7, #12]
    6718:	fa22 f303 	lsr.w	r3, r2, r3
    671c:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	785b      	ldrb	r3, [r3, #1]
    6722:	461a      	mov	r2, r3
    6724:	693b      	ldr	r3, [r7, #16]
    6726:	fa02 f303 	lsl.w	r3, r2, r3
    672a:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	789b      	ldrb	r3, [r3, #2]
    6730:	461a      	mov	r2, r3
    6732:	68fb      	ldr	r3, [r7, #12]
    6734:	ea02 0303 	and.w	r3, r2, r3
    6738:	697a      	ldr	r2, [r7, #20]
    673a:	ea42 0303 	orr.w	r3, r2, r3
    673e:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    6740:	697b      	ldr	r3, [r7, #20]
    6742:	ea4f 1303 	mov.w	r3, r3, lsl #4
    6746:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    6748:	4918      	ldr	r1, [pc, #96]	; (67ac <NVIC_Init+0xd4>)
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	697a      	ldr	r2, [r7, #20]
    6750:	b2d2      	uxtb	r2, r2
    6752:	18cb      	adds	r3, r1, r3
    6754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6758:	4b14      	ldr	r3, [pc, #80]	; (67ac <NVIC_Init+0xd4>)
    675a:	687a      	ldr	r2, [r7, #4]
    675c:	7812      	ldrb	r2, [r2, #0]
    675e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    6762:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6764:	6879      	ldr	r1, [r7, #4]
    6766:	7809      	ldrb	r1, [r1, #0]
    6768:	f001 011f 	and.w	r1, r1, #31
    676c:	f04f 0001 	mov.w	r0, #1
    6770:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6778:	e011      	b.n	679e <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    677a:	4b0c      	ldr	r3, [pc, #48]	; (67ac <NVIC_Init+0xd4>)
    677c:	687a      	ldr	r2, [r7, #4]
    677e:	7812      	ldrb	r2, [r2, #0]
    6780:	ea4f 1252 	mov.w	r2, r2, lsr #5
    6784:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6786:	6879      	ldr	r1, [r7, #4]
    6788:	7809      	ldrb	r1, [r1, #0]
    678a:	f001 011f 	and.w	r1, r1, #31
    678e:	f04f 0001 	mov.w	r0, #1
    6792:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6796:	f102 0220 	add.w	r2, r2, #32
    679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    679e:	f107 071c 	add.w	r7, r7, #28
    67a2:	46bd      	mov	sp, r7
    67a4:	bc80      	pop	{r7}
    67a6:	4770      	bx	lr
    67a8:	e000ed00 	.word	0xe000ed00
    67ac:	e000e100 	.word	0xe000e100

000067b0 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    67b0:	b480      	push	{r7}
    67b2:	b083      	sub	sp, #12
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
    67b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    67ba:	4a07      	ldr	r2, [pc, #28]	; (67d8 <NVIC_SetVectorTable+0x28>)
    67bc:	683b      	ldr	r3, [r7, #0]
    67be:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    67c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    67c6:	6879      	ldr	r1, [r7, #4]
    67c8:	430b      	orrs	r3, r1
    67ca:	6093      	str	r3, [r2, #8]
}
    67cc:	f107 070c 	add.w	r7, r7, #12
    67d0:	46bd      	mov	sp, r7
    67d2:	bc80      	pop	{r7}
    67d4:	4770      	bx	lr
    67d6:	bf00      	nop
    67d8:	e000ed00 	.word	0xe000ed00

000067dc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    67dc:	b480      	push	{r7}
    67de:	b083      	sub	sp, #12
    67e0:	af00      	add	r7, sp, #0
    67e2:	4602      	mov	r2, r0
    67e4:	460b      	mov	r3, r1
    67e6:	71fa      	strb	r2, [r7, #7]
    67e8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    67ea:	79bb      	ldrb	r3, [r7, #6]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d007      	beq.n	6800 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
    67f0:	4b0a      	ldr	r3, [pc, #40]	; (681c <NVIC_SystemLPConfig+0x40>)
    67f2:	4a0a      	ldr	r2, [pc, #40]	; (681c <NVIC_SystemLPConfig+0x40>)
    67f4:	6911      	ldr	r1, [r2, #16]
    67f6:	79fa      	ldrb	r2, [r7, #7]
    67f8:	ea41 0202 	orr.w	r2, r1, r2
    67fc:	611a      	str	r2, [r3, #16]
    67fe:	e008      	b.n	6812 <NVIC_SystemLPConfig+0x36>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    6800:	4b06      	ldr	r3, [pc, #24]	; (681c <NVIC_SystemLPConfig+0x40>)
    6802:	4a06      	ldr	r2, [pc, #24]	; (681c <NVIC_SystemLPConfig+0x40>)
    6804:	6911      	ldr	r1, [r2, #16]
    6806:	79fa      	ldrb	r2, [r7, #7]
    6808:	ea6f 0202 	mvn.w	r2, r2
    680c:	ea01 0202 	and.w	r2, r1, r2
    6810:	611a      	str	r2, [r3, #16]
  }
}
    6812:	f107 070c 	add.w	r7, r7, #12
    6816:	46bd      	mov	sp, r7
    6818:	bc80      	pop	{r7}
    681a:	4770      	bx	lr
    681c:	e000ed00 	.word	0xe000ed00

00006820 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    6820:	b480      	push	{r7}
    6822:	b083      	sub	sp, #12
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	2b04      	cmp	r3, #4
    682c:	d106      	bne.n	683c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    682e:	4b09      	ldr	r3, [pc, #36]	; (6854 <SysTick_CLKSourceConfig+0x34>)
    6830:	4a08      	ldr	r2, [pc, #32]	; (6854 <SysTick_CLKSourceConfig+0x34>)
    6832:	6812      	ldr	r2, [r2, #0]
    6834:	f042 0204 	orr.w	r2, r2, #4
    6838:	601a      	str	r2, [r3, #0]
    683a:	e005      	b.n	6848 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    683c:	4b05      	ldr	r3, [pc, #20]	; (6854 <SysTick_CLKSourceConfig+0x34>)
    683e:	4a05      	ldr	r2, [pc, #20]	; (6854 <SysTick_CLKSourceConfig+0x34>)
    6840:	6812      	ldr	r2, [r2, #0]
    6842:	f022 0204 	bic.w	r2, r2, #4
    6846:	601a      	str	r2, [r3, #0]
  }
}
    6848:	f107 070c 	add.w	r7, r7, #12
    684c:	46bd      	mov	sp, r7
    684e:	bc80      	pop	{r7}
    6850:	4770      	bx	lr
    6852:	bf00      	nop
    6854:	e000e010 	.word	0xe000e010

00006858 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    6858:	b580      	push	{r7, lr}
    685a:	b086      	sub	sp, #24
    685c:	af00      	add	r7, sp, #0
    685e:	60f8      	str	r0, [r7, #12]
    6860:	60b9      	str	r1, [r7, #8]
    6862:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    6864:	f04f 0038 	mov.w	r0, #56	; 0x38
    6868:	f7f9 fc50 	bl	10c <pvPortMalloc>
    686c:	4603      	mov	r3, r0
    686e:	613b      	str	r3, [r7, #16]
	if( pxCoRoutine )
    6870:	693b      	ldr	r3, [r7, #16]
    6872:	2b00      	cmp	r3, #0
    6874:	d052      	beq.n	691c <xCoRoutineCreate+0xc4>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    6876:	4b2e      	ldr	r3, [pc, #184]	; (6930 <xCoRoutineCreate+0xd8>)
    6878:	681b      	ldr	r3, [r3, #0]
    687a:	2b00      	cmp	r3, #0
    687c:	d104      	bne.n	6888 <xCoRoutineCreate+0x30>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    687e:	4b2c      	ldr	r3, [pc, #176]	; (6930 <xCoRoutineCreate+0xd8>)
    6880:	693a      	ldr	r2, [r7, #16]
    6882:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    6884:	f000 f9cc 	bl	6c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    6888:	68bb      	ldr	r3, [r7, #8]
    688a:	2b01      	cmp	r3, #1
    688c:	d902      	bls.n	6894 <xCoRoutineCreate+0x3c>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    688e:	f04f 0301 	mov.w	r3, #1
    6892:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    6894:	693b      	ldr	r3, [r7, #16]
    6896:	f04f 0200 	mov.w	r2, #0
    689a:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    689c:	693b      	ldr	r3, [r7, #16]
    689e:	68ba      	ldr	r2, [r7, #8]
    68a0:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    68a2:	693b      	ldr	r3, [r7, #16]
    68a4:	687a      	ldr	r2, [r7, #4]
    68a6:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    68a8:	693b      	ldr	r3, [r7, #16]
    68aa:	68fa      	ldr	r2, [r7, #12]
    68ac:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    68ae:	693b      	ldr	r3, [r7, #16]
    68b0:	f103 0304 	add.w	r3, r3, #4
    68b4:	4618      	mov	r0, r3
    68b6:	f000 fa3f 	bl	6d38 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    68ba:	693b      	ldr	r3, [r7, #16]
    68bc:	f103 0318 	add.w	r3, r3, #24
    68c0:	4618      	mov	r0, r3
    68c2:	f000 fa39 	bl	6d38 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    68c6:	693b      	ldr	r3, [r7, #16]
    68c8:	693a      	ldr	r2, [r7, #16]
    68ca:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    68cc:	693b      	ldr	r3, [r7, #16]
    68ce:	693a      	ldr	r2, [r7, #16]
    68d0:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    68d2:	68bb      	ldr	r3, [r7, #8]
    68d4:	f1c3 0205 	rsb	r2, r3, #5
    68d8:	693b      	ldr	r3, [r7, #16]
    68da:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    68dc:	693b      	ldr	r3, [r7, #16]
    68de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    68e0:	4b14      	ldr	r3, [pc, #80]	; (6934 <xCoRoutineCreate+0xdc>)
    68e2:	681b      	ldr	r3, [r3, #0]
    68e4:	429a      	cmp	r2, r3
    68e6:	d903      	bls.n	68f0 <xCoRoutineCreate+0x98>
    68e8:	693b      	ldr	r3, [r7, #16]
    68ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    68ec:	4b11      	ldr	r3, [pc, #68]	; (6934 <xCoRoutineCreate+0xdc>)
    68ee:	601a      	str	r2, [r3, #0]
    68f0:	693b      	ldr	r3, [r7, #16]
    68f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    68f4:	4613      	mov	r3, r2
    68f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68fa:	189b      	adds	r3, r3, r2
    68fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6900:	461a      	mov	r2, r3
    6902:	4b0d      	ldr	r3, [pc, #52]	; (6938 <xCoRoutineCreate+0xe0>)
    6904:	18d2      	adds	r2, r2, r3
    6906:	693b      	ldr	r3, [r7, #16]
    6908:	f103 0304 	add.w	r3, r3, #4
    690c:	4610      	mov	r0, r2
    690e:	4619      	mov	r1, r3
    6910:	f000 fa20 	bl	6d54 <vListInsertEnd>

		xReturn = pdPASS;
    6914:	f04f 0301 	mov.w	r3, #1
    6918:	617b      	str	r3, [r7, #20]
    691a:	e002      	b.n	6922 <xCoRoutineCreate+0xca>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    691c:	f04f 33ff 	mov.w	r3, #4294967295
    6920:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    6922:	697b      	ldr	r3, [r7, #20]
}
    6924:	4618      	mov	r0, r3
    6926:	f107 0718 	add.w	r7, r7, #24
    692a:	46bd      	mov	sp, r7
    692c:	bd80      	pop	{r7, pc}
    692e:	bf00      	nop
    6930:	200044b4 	.word	0x200044b4
    6934:	200044b8 	.word	0x200044b8
    6938:	20004448 	.word	0x20004448

0000693c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    693c:	b580      	push	{r7, lr}
    693e:	b084      	sub	sp, #16
    6940:	af00      	add	r7, sp, #0
    6942:	6078      	str	r0, [r7, #4]
    6944:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    6946:	4b1c      	ldr	r3, [pc, #112]	; (69b8 <vCoRoutineAddToDelayedList+0x7c>)
    6948:	681a      	ldr	r2, [r3, #0]
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	18d3      	adds	r3, r2, r3
    694e:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6950:	4b1a      	ldr	r3, [pc, #104]	; (69bc <vCoRoutineAddToDelayedList+0x80>)
    6952:	681b      	ldr	r3, [r3, #0]
    6954:	f103 0304 	add.w	r3, r3, #4
    6958:	4618      	mov	r0, r3
    695a:	f000 fa5d 	bl	6e18 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    695e:	4b17      	ldr	r3, [pc, #92]	; (69bc <vCoRoutineAddToDelayedList+0x80>)
    6960:	681b      	ldr	r3, [r3, #0]
    6962:	68fa      	ldr	r2, [r7, #12]
    6964:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    6966:	4b14      	ldr	r3, [pc, #80]	; (69b8 <vCoRoutineAddToDelayedList+0x7c>)
    6968:	681b      	ldr	r3, [r3, #0]
    696a:	68fa      	ldr	r2, [r7, #12]
    696c:	429a      	cmp	r2, r3
    696e:	d20a      	bcs.n	6986 <vCoRoutineAddToDelayedList+0x4a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6970:	4b13      	ldr	r3, [pc, #76]	; (69c0 <vCoRoutineAddToDelayedList+0x84>)
    6972:	681a      	ldr	r2, [r3, #0]
    6974:	4b11      	ldr	r3, [pc, #68]	; (69bc <vCoRoutineAddToDelayedList+0x80>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	f103 0304 	add.w	r3, r3, #4
    697c:	4610      	mov	r0, r2
    697e:	4619      	mov	r1, r3
    6980:	f000 fa10 	bl	6da4 <vListInsert>
    6984:	e009      	b.n	699a <vCoRoutineAddToDelayedList+0x5e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6986:	4b0f      	ldr	r3, [pc, #60]	; (69c4 <vCoRoutineAddToDelayedList+0x88>)
    6988:	681a      	ldr	r2, [r3, #0]
    698a:	4b0c      	ldr	r3, [pc, #48]	; (69bc <vCoRoutineAddToDelayedList+0x80>)
    698c:	681b      	ldr	r3, [r3, #0]
    698e:	f103 0304 	add.w	r3, r3, #4
    6992:	4610      	mov	r0, r2
    6994:	4619      	mov	r1, r3
    6996:	f000 fa05 	bl	6da4 <vListInsert>
	}

	if( pxEventList )
    699a:	683b      	ldr	r3, [r7, #0]
    699c:	2b00      	cmp	r3, #0
    699e:	d007      	beq.n	69b0 <vCoRoutineAddToDelayedList+0x74>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    69a0:	4b06      	ldr	r3, [pc, #24]	; (69bc <vCoRoutineAddToDelayedList+0x80>)
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	f103 0318 	add.w	r3, r3, #24
    69a8:	6838      	ldr	r0, [r7, #0]
    69aa:	4619      	mov	r1, r3
    69ac:	f000 f9fa 	bl	6da4 <vListInsert>
	}
}
    69b0:	f107 0710 	add.w	r7, r7, #16
    69b4:	46bd      	mov	sp, r7
    69b6:	bd80      	pop	{r7, pc}
    69b8:	200044bc 	.word	0x200044bc
    69bc:	200044b4 	.word	0x200044b4
    69c0:	2000449c 	.word	0x2000449c
    69c4:	20004498 	.word	0x20004498

000069c8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    69c8:	b580      	push	{r7, lr}
    69ca:	b082      	sub	sp, #8
    69cc:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    69ce:	e033      	b.n	6a38 <prvCheckPendingReadyList+0x70>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    69d0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    69d4:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    69d8:	4b1b      	ldr	r3, [pc, #108]	; (6a48 <prvCheckPendingReadyList+0x80>)
    69da:	68db      	ldr	r3, [r3, #12]
    69dc:	68db      	ldr	r3, [r3, #12]
    69de:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	f103 0318 	add.w	r3, r3, #24
    69e6:	4618      	mov	r0, r3
    69e8:	f000 fa16 	bl	6e18 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    69ec:	f04f 0000 	mov.w	r0, #0
    69f0:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	f103 0304 	add.w	r3, r3, #4
    69fa:	4618      	mov	r0, r3
    69fc:	f000 fa0c 	bl	6e18 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a04:	4b11      	ldr	r3, [pc, #68]	; (6a4c <prvCheckPendingReadyList+0x84>)
    6a06:	681b      	ldr	r3, [r3, #0]
    6a08:	429a      	cmp	r2, r3
    6a0a:	d903      	bls.n	6a14 <prvCheckPendingReadyList+0x4c>
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a10:	4b0e      	ldr	r3, [pc, #56]	; (6a4c <prvCheckPendingReadyList+0x84>)
    6a12:	601a      	str	r2, [r3, #0]
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6a18:	4613      	mov	r3, r2
    6a1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a1e:	189b      	adds	r3, r3, r2
    6a20:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a24:	461a      	mov	r2, r3
    6a26:	4b0a      	ldr	r3, [pc, #40]	; (6a50 <prvCheckPendingReadyList+0x88>)
    6a28:	18d2      	adds	r2, r2, r3
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	f103 0304 	add.w	r3, r3, #4
    6a30:	4610      	mov	r0, r2
    6a32:	4619      	mov	r1, r3
    6a34:	f000 f98e 	bl	6d54 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <prvCheckPendingReadyList+0x80>)
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d1c7      	bne.n	69d0 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    6a40:	f107 0708 	add.w	r7, r7, #8
    6a44:	46bd      	mov	sp, r7
    6a46:	bd80      	pop	{r7, pc}
    6a48:	200044a0 	.word	0x200044a0
    6a4c:	200044b8 	.word	0x200044b8
    6a50:	20004448 	.word	0x20004448

00006a54 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    6a54:	b580      	push	{r7, lr}
    6a56:	b082      	sub	sp, #8
    6a58:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    6a5a:	f001 fa73 	bl	7f44 <xTaskGetTickCount>
    6a5e:	4602      	mov	r2, r0
    6a60:	4b3a      	ldr	r3, [pc, #232]	; (6b4c <prvCheckDelayedList+0xf8>)
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	1ad2      	subs	r2, r2, r3
    6a66:	4b3a      	ldr	r3, [pc, #232]	; (6b50 <prvCheckDelayedList+0xfc>)
    6a68:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    6a6a:	e062      	b.n	6b32 <prvCheckDelayedList+0xde>
	{
		xCoRoutineTickCount++;
    6a6c:	4b39      	ldr	r3, [pc, #228]	; (6b54 <prvCheckDelayedList+0x100>)
    6a6e:	681b      	ldr	r3, [r3, #0]
    6a70:	f103 0201 	add.w	r2, r3, #1
    6a74:	4b37      	ldr	r3, [pc, #220]	; (6b54 <prvCheckDelayedList+0x100>)
    6a76:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    6a78:	4b35      	ldr	r3, [pc, #212]	; (6b50 <prvCheckDelayedList+0xfc>)
    6a7a:	681b      	ldr	r3, [r3, #0]
    6a7c:	f103 32ff 	add.w	r2, r3, #4294967295
    6a80:	4b33      	ldr	r3, [pc, #204]	; (6b50 <prvCheckDelayedList+0xfc>)
    6a82:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    6a84:	4b33      	ldr	r3, [pc, #204]	; (6b54 <prvCheckDelayedList+0x100>)
    6a86:	681b      	ldr	r3, [r3, #0]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d14a      	bne.n	6b22 <prvCheckDelayedList+0xce>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    6a8c:	4b32      	ldr	r3, [pc, #200]	; (6b58 <prvCheckDelayedList+0x104>)
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    6a92:	4b32      	ldr	r3, [pc, #200]	; (6b5c <prvCheckDelayedList+0x108>)
    6a94:	681a      	ldr	r2, [r3, #0]
    6a96:	4b30      	ldr	r3, [pc, #192]	; (6b58 <prvCheckDelayedList+0x104>)
    6a98:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    6a9a:	4b30      	ldr	r3, [pc, #192]	; (6b5c <prvCheckDelayedList+0x108>)
    6a9c:	687a      	ldr	r2, [r7, #4]
    6a9e:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    6aa0:	e040      	b.n	6b24 <prvCheckDelayedList+0xd0>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    6aa2:	4b2d      	ldr	r3, [pc, #180]	; (6b58 <prvCheckDelayedList+0x104>)
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	68db      	ldr	r3, [r3, #12]
    6aa8:	68db      	ldr	r3, [r3, #12]
    6aaa:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    6aac:	683b      	ldr	r3, [r7, #0]
    6aae:	685a      	ldr	r2, [r3, #4]
    6ab0:	4b28      	ldr	r3, [pc, #160]	; (6b54 <prvCheckDelayedList+0x100>)
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	429a      	cmp	r2, r3
    6ab6:	d83b      	bhi.n	6b30 <prvCheckDelayedList+0xdc>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    6ab8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    6abc:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    6ac0:	683b      	ldr	r3, [r7, #0]
    6ac2:	f103 0304 	add.w	r3, r3, #4
    6ac6:	4618      	mov	r0, r3
    6ac8:	f000 f9a6 	bl	6e18 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    6acc:	683b      	ldr	r3, [r7, #0]
    6ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d005      	beq.n	6ae0 <prvCheckDelayedList+0x8c>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    6ad4:	683b      	ldr	r3, [r7, #0]
    6ad6:	f103 0318 	add.w	r3, r3, #24
    6ada:	4618      	mov	r0, r3
    6adc:	f000 f99c 	bl	6e18 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    6ae0:	f04f 0000 	mov.w	r0, #0
    6ae4:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    6ae8:	683b      	ldr	r3, [r7, #0]
    6aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6aec:	4b1c      	ldr	r3, [pc, #112]	; (6b60 <prvCheckDelayedList+0x10c>)
    6aee:	681b      	ldr	r3, [r3, #0]
    6af0:	429a      	cmp	r2, r3
    6af2:	d903      	bls.n	6afc <prvCheckDelayedList+0xa8>
    6af4:	683b      	ldr	r3, [r7, #0]
    6af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6af8:	4b19      	ldr	r3, [pc, #100]	; (6b60 <prvCheckDelayedList+0x10c>)
    6afa:	601a      	str	r2, [r3, #0]
    6afc:	683b      	ldr	r3, [r7, #0]
    6afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b00:	4613      	mov	r3, r2
    6b02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b06:	189b      	adds	r3, r3, r2
    6b08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b0c:	461a      	mov	r2, r3
    6b0e:	4b15      	ldr	r3, [pc, #84]	; (6b64 <prvCheckDelayedList+0x110>)
    6b10:	18d2      	adds	r2, r2, r3
    6b12:	683b      	ldr	r3, [r7, #0]
    6b14:	f103 0304 	add.w	r3, r3, #4
    6b18:	4610      	mov	r0, r2
    6b1a:	4619      	mov	r1, r3
    6b1c:	f000 f91a 	bl	6d54 <vListInsertEnd>
    6b20:	e000      	b.n	6b24 <prvCheckDelayedList+0xd0>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    6b22:	bf00      	nop
    6b24:	4b0c      	ldr	r3, [pc, #48]	; (6b58 <prvCheckDelayedList+0x104>)
    6b26:	681b      	ldr	r3, [r3, #0]
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d1b9      	bne.n	6aa2 <prvCheckDelayedList+0x4e>
    6b2e:	e000      	b.n	6b32 <prvCheckDelayedList+0xde>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    6b30:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    6b32:	4b07      	ldr	r3, [pc, #28]	; (6b50 <prvCheckDelayedList+0xfc>)
    6b34:	681b      	ldr	r3, [r3, #0]
    6b36:	2b00      	cmp	r3, #0
    6b38:	d198      	bne.n	6a6c <prvCheckDelayedList+0x18>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    6b3a:	4b06      	ldr	r3, [pc, #24]	; (6b54 <prvCheckDelayedList+0x100>)
    6b3c:	681a      	ldr	r2, [r3, #0]
    6b3e:	4b03      	ldr	r3, [pc, #12]	; (6b4c <prvCheckDelayedList+0xf8>)
    6b40:	601a      	str	r2, [r3, #0]
}
    6b42:	f107 0708 	add.w	r7, r7, #8
    6b46:	46bd      	mov	sp, r7
    6b48:	bd80      	pop	{r7, pc}
    6b4a:	bf00      	nop
    6b4c:	200044c0 	.word	0x200044c0
    6b50:	200044c4 	.word	0x200044c4
    6b54:	200044bc 	.word	0x200044bc
    6b58:	20004498 	.word	0x20004498
    6b5c:	2000449c 	.word	0x2000449c
    6b60:	200044b8 	.word	0x200044b8
    6b64:	20004448 	.word	0x20004448

00006b68 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    6b68:	b580      	push	{r7, lr}
    6b6a:	b082      	sub	sp, #8
    6b6c:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    6b6e:	f7ff ff2b 	bl	69c8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    6b72:	f7ff ff6f 	bl	6a54 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    6b76:	e009      	b.n	6b8c <vCoRoutineSchedule+0x24>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    6b78:	4b26      	ldr	r3, [pc, #152]	; (6c14 <vCoRoutineSchedule+0xac>)
    6b7a:	681b      	ldr	r3, [r3, #0]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d043      	beq.n	6c08 <vCoRoutineSchedule+0xa0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    6b80:	4b24      	ldr	r3, [pc, #144]	; (6c14 <vCoRoutineSchedule+0xac>)
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	f103 32ff 	add.w	r2, r3, #4294967295
    6b88:	4b22      	ldr	r3, [pc, #136]	; (6c14 <vCoRoutineSchedule+0xac>)
    6b8a:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    6b8c:	4b21      	ldr	r3, [pc, #132]	; (6c14 <vCoRoutineSchedule+0xac>)
    6b8e:	681a      	ldr	r2, [r3, #0]
    6b90:	4613      	mov	r3, r2
    6b92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b96:	189b      	adds	r3, r3, r2
    6b98:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b9c:	461a      	mov	r2, r3
    6b9e:	4b1e      	ldr	r3, [pc, #120]	; (6c18 <vCoRoutineSchedule+0xb0>)
    6ba0:	18d3      	adds	r3, r2, r3
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d0e7      	beq.n	6b78 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    6ba8:	4b1a      	ldr	r3, [pc, #104]	; (6c14 <vCoRoutineSchedule+0xac>)
    6baa:	681a      	ldr	r2, [r3, #0]
    6bac:	4613      	mov	r3, r2
    6bae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bb2:	189b      	adds	r3, r3, r2
    6bb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bb8:	461a      	mov	r2, r3
    6bba:	4b17      	ldr	r3, [pc, #92]	; (6c18 <vCoRoutineSchedule+0xb0>)
    6bbc:	18d3      	adds	r3, r2, r3
    6bbe:	607b      	str	r3, [r7, #4]
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	685b      	ldr	r3, [r3, #4]
    6bc4:	685a      	ldr	r2, [r3, #4]
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	605a      	str	r2, [r3, #4]
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	685a      	ldr	r2, [r3, #4]
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	f103 0308 	add.w	r3, r3, #8
    6bd4:	429a      	cmp	r2, r3
    6bd6:	d104      	bne.n	6be2 <vCoRoutineSchedule+0x7a>
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	685b      	ldr	r3, [r3, #4]
    6bdc:	685a      	ldr	r2, [r3, #4]
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	605a      	str	r2, [r3, #4]
    6be2:	687b      	ldr	r3, [r7, #4]
    6be4:	685b      	ldr	r3, [r3, #4]
    6be6:	68db      	ldr	r3, [r3, #12]
    6be8:	461a      	mov	r2, r3
    6bea:	4b0c      	ldr	r3, [pc, #48]	; (6c1c <vCoRoutineSchedule+0xb4>)
    6bec:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    6bee:	4b0b      	ldr	r3, [pc, #44]	; (6c1c <vCoRoutineSchedule+0xb4>)
    6bf0:	681b      	ldr	r3, [r3, #0]
    6bf2:	681b      	ldr	r3, [r3, #0]
    6bf4:	4a09      	ldr	r2, [pc, #36]	; (6c1c <vCoRoutineSchedule+0xb4>)
    6bf6:	6811      	ldr	r1, [r2, #0]
    6bf8:	4a08      	ldr	r2, [pc, #32]	; (6c1c <vCoRoutineSchedule+0xb4>)
    6bfa:	6812      	ldr	r2, [r2, #0]
    6bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
    6bfe:	4608      	mov	r0, r1
    6c00:	4611      	mov	r1, r2
    6c02:	4798      	blx	r3

	return;
    6c04:	bf00      	nop
    6c06:	e000      	b.n	6c0a <vCoRoutineSchedule+0xa2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    6c08:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    6c0a:	f107 0708 	add.w	r7, r7, #8
    6c0e:	46bd      	mov	sp, r7
    6c10:	bd80      	pop	{r7, pc}
    6c12:	bf00      	nop
    6c14:	200044b8 	.word	0x200044b8
    6c18:	20004448 	.word	0x20004448
    6c1c:	200044b4 	.word	0x200044b4

00006c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    6c20:	b580      	push	{r7, lr}
    6c22:	b082      	sub	sp, #8
    6c24:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    6c26:	f04f 0300 	mov.w	r3, #0
    6c2a:	607b      	str	r3, [r7, #4]
    6c2c:	e010      	b.n	6c50 <prvInitialiseCoRoutineLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    6c2e:	687a      	ldr	r2, [r7, #4]
    6c30:	4613      	mov	r3, r2
    6c32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c36:	189b      	adds	r3, r3, r2
    6c38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c3c:	461a      	mov	r2, r3
    6c3e:	4b0f      	ldr	r3, [pc, #60]	; (6c7c <prvInitialiseCoRoutineLists+0x5c>)
    6c40:	18d3      	adds	r3, r2, r3
    6c42:	4618      	mov	r0, r3
    6c44:	f000 f854 	bl	6cf0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	f103 0301 	add.w	r3, r3, #1
    6c4e:	607b      	str	r3, [r7, #4]
    6c50:	687b      	ldr	r3, [r7, #4]
    6c52:	2b01      	cmp	r3, #1
    6c54:	d9eb      	bls.n	6c2e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    6c56:	480a      	ldr	r0, [pc, #40]	; (6c80 <prvInitialiseCoRoutineLists+0x60>)
    6c58:	f000 f84a 	bl	6cf0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    6c5c:	4809      	ldr	r0, [pc, #36]	; (6c84 <prvInitialiseCoRoutineLists+0x64>)
    6c5e:	f000 f847 	bl	6cf0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    6c62:	4809      	ldr	r0, [pc, #36]	; (6c88 <prvInitialiseCoRoutineLists+0x68>)
    6c64:	f000 f844 	bl	6cf0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    6c68:	4b08      	ldr	r3, [pc, #32]	; (6c8c <prvInitialiseCoRoutineLists+0x6c>)
    6c6a:	4a05      	ldr	r2, [pc, #20]	; (6c80 <prvInitialiseCoRoutineLists+0x60>)
    6c6c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    6c6e:	4b08      	ldr	r3, [pc, #32]	; (6c90 <prvInitialiseCoRoutineLists+0x70>)
    6c70:	4a04      	ldr	r2, [pc, #16]	; (6c84 <prvInitialiseCoRoutineLists+0x64>)
    6c72:	601a      	str	r2, [r3, #0]
}
    6c74:	f107 0708 	add.w	r7, r7, #8
    6c78:	46bd      	mov	sp, r7
    6c7a:	bd80      	pop	{r7, pc}
    6c7c:	20004448 	.word	0x20004448
    6c80:	20004470 	.word	0x20004470
    6c84:	20004484 	.word	0x20004484
    6c88:	200044a0 	.word	0x200044a0
    6c8c:	20004498 	.word	0x20004498
    6c90:	2000449c 	.word	0x2000449c

00006c94 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    6c94:	b580      	push	{r7, lr}
    6c96:	b084      	sub	sp, #16
    6c98:	af00      	add	r7, sp, #0
    6c9a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	68db      	ldr	r3, [r3, #12]
    6ca0:	68db      	ldr	r3, [r3, #12]
    6ca2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    6ca4:	68bb      	ldr	r3, [r7, #8]
    6ca6:	f103 0318 	add.w	r3, r3, #24
    6caa:	4618      	mov	r0, r3
    6cac:	f000 f8b4 	bl	6e18 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    6cb0:	68bb      	ldr	r3, [r7, #8]
    6cb2:	f103 0318 	add.w	r3, r3, #24
    6cb6:	480c      	ldr	r0, [pc, #48]	; (6ce8 <xCoRoutineRemoveFromEventList+0x54>)
    6cb8:	4619      	mov	r1, r3
    6cba:	f000 f84b 	bl	6d54 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    6cbe:	68bb      	ldr	r3, [r7, #8]
    6cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6cc2:	4b0a      	ldr	r3, [pc, #40]	; (6cec <xCoRoutineRemoveFromEventList+0x58>)
    6cc4:	681b      	ldr	r3, [r3, #0]
    6cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6cc8:	429a      	cmp	r2, r3
    6cca:	d303      	bcc.n	6cd4 <xCoRoutineRemoveFromEventList+0x40>
	{
		xReturn = pdTRUE;
    6ccc:	f04f 0301 	mov.w	r3, #1
    6cd0:	60fb      	str	r3, [r7, #12]
    6cd2:	e002      	b.n	6cda <xCoRoutineRemoveFromEventList+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    6cd4:	f04f 0300 	mov.w	r3, #0
    6cd8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    6cda:	68fb      	ldr	r3, [r7, #12]
}
    6cdc:	4618      	mov	r0, r3
    6cde:	f107 0710 	add.w	r7, r7, #16
    6ce2:	46bd      	mov	sp, r7
    6ce4:	bd80      	pop	{r7, pc}
    6ce6:	bf00      	nop
    6ce8:	200044a0 	.word	0x200044a0
    6cec:	200044b4 	.word	0x200044b4

00006cf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    6cf0:	b480      	push	{r7}
    6cf2:	b083      	sub	sp, #12
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	f103 0308 	add.w	r3, r3, #8
    6cfe:	461a      	mov	r2, r3
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	f04f 32ff 	mov.w	r2, #4294967295
    6d0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	f103 0308 	add.w	r3, r3, #8
    6d12:	461a      	mov	r2, r3
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	f103 0308 	add.w	r3, r3, #8
    6d1e:	461a      	mov	r2, r3
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	f04f 0200 	mov.w	r2, #0
    6d2a:	601a      	str	r2, [r3, #0]
}
    6d2c:	f107 070c 	add.w	r7, r7, #12
    6d30:	46bd      	mov	sp, r7
    6d32:	bc80      	pop	{r7}
    6d34:	4770      	bx	lr
    6d36:	bf00      	nop

00006d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    6d38:	b480      	push	{r7}
    6d3a:	b083      	sub	sp, #12
    6d3c:	af00      	add	r7, sp, #0
    6d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	f04f 0200 	mov.w	r2, #0
    6d46:	611a      	str	r2, [r3, #16]
}
    6d48:	f107 070c 	add.w	r7, r7, #12
    6d4c:	46bd      	mov	sp, r7
    6d4e:	bc80      	pop	{r7}
    6d50:	4770      	bx	lr
    6d52:	bf00      	nop

00006d54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    6d54:	b480      	push	{r7}
    6d56:	b085      	sub	sp, #20
    6d58:	af00      	add	r7, sp, #0
    6d5a:	6078      	str	r0, [r7, #4]
    6d5c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	685b      	ldr	r3, [r3, #4]
    6d62:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	685a      	ldr	r2, [r3, #4]
    6d68:	683b      	ldr	r3, [r7, #0]
    6d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	685a      	ldr	r2, [r3, #4]
    6d70:	683b      	ldr	r3, [r7, #0]
    6d72:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	685b      	ldr	r3, [r3, #4]
    6d78:	683a      	ldr	r2, [r7, #0]
    6d7a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    6d7c:	683a      	ldr	r2, [r7, #0]
    6d7e:	68fb      	ldr	r3, [r7, #12]
    6d80:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    6d82:	683a      	ldr	r2, [r7, #0]
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6d88:	683b      	ldr	r3, [r7, #0]
    6d8a:	687a      	ldr	r2, [r7, #4]
    6d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	f103 0201 	add.w	r2, r3, #1
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	601a      	str	r2, [r3, #0]
}
    6d9a:	f107 0714 	add.w	r7, r7, #20
    6d9e:	46bd      	mov	sp, r7
    6da0:	bc80      	pop	{r7}
    6da2:	4770      	bx	lr

00006da4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    6da4:	b480      	push	{r7}
    6da6:	b085      	sub	sp, #20
    6da8:	af00      	add	r7, sp, #0
    6daa:	6078      	str	r0, [r7, #4]
    6dac:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    6dae:	683b      	ldr	r3, [r7, #0]
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6db4:	68bb      	ldr	r3, [r7, #8]
    6db6:	f1b3 3fff 	cmp.w	r3, #4294967295
    6dba:	d103      	bne.n	6dc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	691b      	ldr	r3, [r3, #16]
    6dc0:	60fb      	str	r3, [r7, #12]
    6dc2:	e00d      	b.n	6de0 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	f103 0308 	add.w	r3, r3, #8
    6dca:	60fb      	str	r3, [r7, #12]
    6dcc:	e002      	b.n	6dd4 <vListInsert+0x30>
    6dce:	68fb      	ldr	r3, [r7, #12]
    6dd0:	685b      	ldr	r3, [r3, #4]
    6dd2:	60fb      	str	r3, [r7, #12]
    6dd4:	68fb      	ldr	r3, [r7, #12]
    6dd6:	685b      	ldr	r3, [r3, #4]
    6dd8:	681a      	ldr	r2, [r3, #0]
    6dda:	68bb      	ldr	r3, [r7, #8]
    6ddc:	429a      	cmp	r2, r3
    6dde:	d9f6      	bls.n	6dce <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6de0:	68fb      	ldr	r3, [r7, #12]
    6de2:	685a      	ldr	r2, [r3, #4]
    6de4:	683b      	ldr	r3, [r7, #0]
    6de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    6de8:	683b      	ldr	r3, [r7, #0]
    6dea:	685b      	ldr	r3, [r3, #4]
    6dec:	683a      	ldr	r2, [r7, #0]
    6dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    6df0:	683b      	ldr	r3, [r7, #0]
    6df2:	68fa      	ldr	r2, [r7, #12]
    6df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    6df6:	683a      	ldr	r2, [r7, #0]
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6dfc:	683b      	ldr	r3, [r7, #0]
    6dfe:	687a      	ldr	r2, [r7, #4]
    6e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	681b      	ldr	r3, [r3, #0]
    6e06:	f103 0201 	add.w	r2, r3, #1
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	601a      	str	r2, [r3, #0]
}
    6e0e:	f107 0714 	add.w	r7, r7, #20
    6e12:	46bd      	mov	sp, r7
    6e14:	bc80      	pop	{r7}
    6e16:	4770      	bx	lr

00006e18 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    6e18:	b480      	push	{r7}
    6e1a:	b085      	sub	sp, #20
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	685b      	ldr	r3, [r3, #4]
    6e24:	687a      	ldr	r2, [r7, #4]
    6e26:	6892      	ldr	r2, [r2, #8]
    6e28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	689b      	ldr	r3, [r3, #8]
    6e2e:	687a      	ldr	r2, [r7, #4]
    6e30:	6852      	ldr	r2, [r2, #4]
    6e32:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	691b      	ldr	r3, [r3, #16]
    6e38:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    6e3a:	68fb      	ldr	r3, [r7, #12]
    6e3c:	685a      	ldr	r2, [r3, #4]
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	429a      	cmp	r2, r3
    6e42:	d103      	bne.n	6e4c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    6e44:	687b      	ldr	r3, [r7, #4]
    6e46:	689a      	ldr	r2, [r3, #8]
    6e48:	68fb      	ldr	r3, [r7, #12]
    6e4a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	f04f 0200 	mov.w	r2, #0
    6e52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    6e54:	68fb      	ldr	r3, [r7, #12]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	f103 32ff 	add.w	r2, r3, #4294967295
    6e5c:	68fb      	ldr	r3, [r7, #12]
    6e5e:	601a      	str	r2, [r3, #0]
}
    6e60:	f107 0714 	add.w	r7, r7, #20
    6e64:	46bd      	mov	sp, r7
    6e66:	bc80      	pop	{r7}
    6e68:	4770      	bx	lr
    6e6a:	bf00      	nop

00006e6c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	b084      	sub	sp, #16
    6e70:	af00      	add	r7, sp, #0
    6e72:	6078      	str	r0, [r7, #4]
    6e74:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    6e76:	f04f 0301 	mov.w	r3, #1
    6e7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    6e7c:	683b      	ldr	r3, [r7, #0]
    6e7e:	2b01      	cmp	r3, #1
    6e80:	d00d      	beq.n	6e9e <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e86:	2b00      	cmp	r3, #0
    6e88:	d002      	beq.n	6e90 <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    6e8a:	f04f 0300 	mov.w	r3, #0
    6e8e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	691b      	ldr	r3, [r3, #16]
    6e94:	2b00      	cmp	r3, #0
    6e96:	d002      	beq.n	6e9e <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    6e98:	f04f 0300 	mov.w	r3, #0
    6e9c:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    6e9e:	68fb      	ldr	r3, [r7, #12]
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d133      	bne.n	6f0c <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    6ea4:	687b      	ldr	r3, [r7, #4]
    6ea6:	681a      	ldr	r2, [r3, #0]
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6eac:	6879      	ldr	r1, [r7, #4]
    6eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
    6eb0:	fb01 f303 	mul.w	r3, r1, r3
    6eb4:	18d2      	adds	r2, r2, r3
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	f04f 0200 	mov.w	r2, #0
    6ec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	681a      	ldr	r2, [r3, #0]
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	681a      	ldr	r2, [r3, #0]
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6ed2:	f103 33ff 	add.w	r3, r3, #4294967295
    6ed6:	6879      	ldr	r1, [r7, #4]
    6ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    6eda:	fb01 f303 	mul.w	r3, r1, r3
    6ede:	18d2      	adds	r2, r2, r3
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	f04f 32ff 	mov.w	r2, #4294967295
    6eea:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	f04f 32ff 	mov.w	r2, #4294967295
    6ef2:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	f103 0310 	add.w	r3, r3, #16
    6efa:	4618      	mov	r0, r3
    6efc:	f7ff fef8 	bl	6cf0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    6f00:	687b      	ldr	r3, [r7, #4]
    6f02:	f103 0324 	add.w	r3, r3, #36	; 0x24
    6f06:	4618      	mov	r0, r3
    6f08:	f7ff fef2 	bl	6cf0 <vListInitialise>
	}

	return xReturn;
    6f0c:	68fb      	ldr	r3, [r7, #12]
}
    6f0e:	4618      	mov	r0, r3
    6f10:	f107 0710 	add.w	r7, r7, #16
    6f14:	46bd      	mov	sp, r7
    6f16:	bd80      	pop	{r7, pc}

00006f18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b088      	sub	sp, #32
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	60f8      	str	r0, [r7, #12]
    6f20:	60b9      	str	r1, [r7, #8]
    6f22:	4613      	mov	r3, r2
    6f24:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    6f26:	f04f 0300 	mov.w	r3, #0
    6f2a:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    6f2c:	68fb      	ldr	r3, [r7, #12]
    6f2e:	2b00      	cmp	r3, #0
    6f30:	d02b      	beq.n	6f8a <xQueueGenericCreate+0x72>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    6f32:	f04f 004c 	mov.w	r0, #76	; 0x4c
    6f36:	f7f9 f8e9 	bl	10c <pvPortMalloc>
    6f3a:	4603      	mov	r3, r0
    6f3c:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
    6f3e:	69bb      	ldr	r3, [r7, #24]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d022      	beq.n	6f8a <xQueueGenericCreate+0x72>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    6f44:	68fb      	ldr	r3, [r7, #12]
    6f46:	68ba      	ldr	r2, [r7, #8]
    6f48:	fb02 f303 	mul.w	r3, r2, r3
    6f4c:	f103 0301 	add.w	r3, r3, #1
    6f50:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    6f52:	6978      	ldr	r0, [r7, #20]
    6f54:	f7f9 f8da 	bl	10c <pvPortMalloc>
    6f58:	4603      	mov	r3, r0
    6f5a:	461a      	mov	r2, r3
    6f5c:	69bb      	ldr	r3, [r7, #24]
    6f5e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    6f60:	69bb      	ldr	r3, [r7, #24]
    6f62:	681b      	ldr	r3, [r3, #0]
    6f64:	2b00      	cmp	r3, #0
    6f66:	d00d      	beq.n	6f84 <xQueueGenericCreate+0x6c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    6f68:	69bb      	ldr	r3, [r7, #24]
    6f6a:	68fa      	ldr	r2, [r7, #12]
    6f6c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    6f6e:	69bb      	ldr	r3, [r7, #24]
    6f70:	68ba      	ldr	r2, [r7, #8]
    6f72:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    6f74:	69b8      	ldr	r0, [r7, #24]
    6f76:	f04f 0101 	mov.w	r1, #1
    6f7a:	f7ff ff77 	bl	6e6c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    6f7e:	69bb      	ldr	r3, [r7, #24]
    6f80:	61fb      	str	r3, [r7, #28]
    6f82:	e002      	b.n	6f8a <xQueueGenericCreate+0x72>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    6f84:	69b8      	ldr	r0, [r7, #24]
    6f86:	f7f9 f8fd 	bl	184 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    6f8a:	69fb      	ldr	r3, [r7, #28]
}
    6f8c:	4618      	mov	r0, r3
    6f8e:	f107 0720 	add.w	r7, r7, #32
    6f92:	46bd      	mov	sp, r7
    6f94:	bd80      	pop	{r7, pc}
    6f96:	bf00      	nop

00006f98 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b084      	sub	sp, #16
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	4603      	mov	r3, r0
    6fa0:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    6fa2:	f04f 004c 	mov.w	r0, #76	; 0x4c
    6fa6:	f7f9 f8b1 	bl	10c <pvPortMalloc>
    6faa:	4603      	mov	r3, r0
    6fac:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
    6fae:	68fb      	ldr	r3, [r7, #12]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d038      	beq.n	7026 <xQueueCreateMutex+0x8e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    6fb4:	68fb      	ldr	r3, [r7, #12]
    6fb6:	f04f 0200 	mov.w	r2, #0
    6fba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    6fbc:	68fb      	ldr	r3, [r7, #12]
    6fbe:	f04f 0200 	mov.w	r2, #0
    6fc2:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    6fc4:	68fb      	ldr	r3, [r7, #12]
    6fc6:	f04f 0200 	mov.w	r2, #0
    6fca:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    6fcc:	68fb      	ldr	r3, [r7, #12]
    6fce:	f04f 0200 	mov.w	r2, #0
    6fd2:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    6fd4:	68fb      	ldr	r3, [r7, #12]
    6fd6:	f04f 0200 	mov.w	r2, #0
    6fda:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    6fdc:	68fb      	ldr	r3, [r7, #12]
    6fde:	f04f 0201 	mov.w	r2, #1
    6fe2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	f04f 0200 	mov.w	r2, #0
    6fea:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    6fec:	68fb      	ldr	r3, [r7, #12]
    6fee:	f04f 32ff 	mov.w	r2, #4294967295
    6ff2:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    6ff4:	68fb      	ldr	r3, [r7, #12]
    6ff6:	f04f 32ff 	mov.w	r2, #4294967295
    6ffa:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    6ffc:	68fb      	ldr	r3, [r7, #12]
    6ffe:	f103 0310 	add.w	r3, r3, #16
    7002:	4618      	mov	r0, r3
    7004:	f7ff fe74 	bl	6cf0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    7008:	68fb      	ldr	r3, [r7, #12]
    700a:	f103 0324 	add.w	r3, r3, #36	; 0x24
    700e:	4618      	mov	r0, r3
    7010:	f7ff fe6e 	bl	6cf0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    7014:	68f8      	ldr	r0, [r7, #12]
    7016:	f04f 0100 	mov.w	r1, #0
    701a:	f04f 0200 	mov.w	r2, #0
    701e:	f04f 0300 	mov.w	r3, #0
    7022:	f000 f821 	bl	7068 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    7026:	68fb      	ldr	r3, [r7, #12]
	}
    7028:	4618      	mov	r0, r3
    702a:	f107 0710 	add.w	r7, r7, #16
    702e:	46bd      	mov	sp, r7
    7030:	bd80      	pop	{r7, pc}
    7032:	bf00      	nop

00007034 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    7034:	b580      	push	{r7, lr}
    7036:	b084      	sub	sp, #16
    7038:	af00      	add	r7, sp, #0
    703a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the 
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    703c:	f001 fc24 	bl	8888 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	2b00      	cmp	r3, #0
    7046:	d103      	bne.n	7050 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	685b      	ldr	r3, [r3, #4]
    704c:	60fb      	str	r3, [r7, #12]
    704e:	e002      	b.n	7056 <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    7050:	f04f 0300 	mov.w	r3, #0
    7054:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    7056:	f001 fc29 	bl	88ac <vPortExitCritical>
		
		return pxReturn;
    705a:	68fb      	ldr	r3, [r7, #12]
	}
    705c:	4618      	mov	r0, r3
    705e:	f107 0710 	add.w	r7, r7, #16
    7062:	46bd      	mov	sp, r7
    7064:	bd80      	pop	{r7, pc}
    7066:	bf00      	nop

00007068 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    7068:	b580      	push	{r7, lr}
    706a:	b088      	sub	sp, #32
    706c:	af00      	add	r7, sp, #0
    706e:	60f8      	str	r0, [r7, #12]
    7070:	60b9      	str	r1, [r7, #8]
    7072:	607a      	str	r2, [r7, #4]
    7074:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    7076:	f04f 0300 	mov.w	r3, #0
    707a:	61fb      	str	r3, [r7, #28]
    707c:	e000      	b.n	7080 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    707e:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    7080:	f001 fc02 	bl	8888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7088:	68fb      	ldr	r3, [r7, #12]
    708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    708c:	429a      	cmp	r2, r3
    708e:	d218      	bcs.n	70c2 <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    7090:	68f8      	ldr	r0, [r7, #12]
    7092:	68b9      	ldr	r1, [r7, #8]
    7094:	683a      	ldr	r2, [r7, #0]
    7096:	f000 f9fd 	bl	7494 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    709a:	68fb      	ldr	r3, [r7, #12]
    709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    709e:	2b00      	cmp	r3, #0
    70a0:	d00a      	beq.n	70b8 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    70a2:	68fb      	ldr	r3, [r7, #12]
    70a4:	f103 0324 	add.w	r3, r3, #36	; 0x24
    70a8:	4618      	mov	r0, r3
    70aa:	f001 f8af 	bl	820c <xTaskRemoveFromEventList>
    70ae:	4603      	mov	r3, r0
    70b0:	2b01      	cmp	r3, #1
    70b2:	d101      	bne.n	70b8 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    70b4:	f001 fbdc 	bl	8870 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    70b8:	f001 fbf8 	bl	88ac <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    70bc:	f04f 0301 	mov.w	r3, #1
    70c0:	e05d      	b.n	717e <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d104      	bne.n	70d2 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    70c8:	f001 fbf0 	bl	88ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    70cc:	f04f 0300 	mov.w	r3, #0
    70d0:	e055      	b.n	717e <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    70d2:	69fb      	ldr	r3, [r7, #28]
    70d4:	2b00      	cmp	r3, #0
    70d6:	d107      	bne.n	70e8 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    70d8:	f107 0314 	add.w	r3, r7, #20
    70dc:	4618      	mov	r0, r3
    70de:	f001 f8ef 	bl	82c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    70e2:	f04f 0301 	mov.w	r3, #1
    70e6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    70e8:	f001 fbe0 	bl	88ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    70ec:	f000 fe92 	bl	7e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    70f0:	f001 fbca 	bl	8888 <vPortEnterCritical>
    70f4:	68fb      	ldr	r3, [r7, #12]
    70f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    70f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    70fc:	d103      	bne.n	7106 <xQueueGenericSend+0x9e>
    70fe:	68fb      	ldr	r3, [r7, #12]
    7100:	f04f 0200 	mov.w	r2, #0
    7104:	645a      	str	r2, [r3, #68]	; 0x44
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    710a:	f1b3 3fff 	cmp.w	r3, #4294967295
    710e:	d103      	bne.n	7118 <xQueueGenericSend+0xb0>
    7110:	68fb      	ldr	r3, [r7, #12]
    7112:	f04f 0200 	mov.w	r2, #0
    7116:	649a      	str	r2, [r3, #72]	; 0x48
    7118:	f001 fbc8 	bl	88ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    711c:	f107 0214 	add.w	r2, r7, #20
    7120:	f107 0304 	add.w	r3, r7, #4
    7124:	4610      	mov	r0, r2
    7126:	4619      	mov	r1, r3
    7128:	f001 f8e0 	bl	82ec <xTaskCheckForTimeOut>
    712c:	4603      	mov	r3, r0
    712e:	2b00      	cmp	r3, #0
    7130:	d11e      	bne.n	7170 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    7132:	68f8      	ldr	r0, [r7, #12]
    7134:	f000 fab0 	bl	7698 <prvIsQueueFull>
    7138:	4603      	mov	r3, r0
    713a:	2b00      	cmp	r3, #0
    713c:	d012      	beq.n	7164 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    713e:	68fb      	ldr	r3, [r7, #12]
    7140:	f103 0210 	add.w	r2, r3, #16
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	4610      	mov	r0, r2
    7148:	4619      	mov	r1, r3
    714a:	f001 f82b 	bl	81a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    714e:	68f8      	ldr	r0, [r7, #12]
    7150:	f000 fa2a 	bl	75a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    7154:	f000 fe6c 	bl	7e30 <xTaskResumeAll>
    7158:	4603      	mov	r3, r0
    715a:	2b00      	cmp	r3, #0
    715c:	d18f      	bne.n	707e <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    715e:	f001 fb87 	bl	8870 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    7162:	e78d      	b.n	7080 <xQueueGenericSend+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    7164:	68f8      	ldr	r0, [r7, #12]
    7166:	f000 fa1f 	bl	75a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    716a:	f000 fe61 	bl	7e30 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    716e:	e787      	b.n	7080 <xQueueGenericSend+0x18>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    7170:	68f8      	ldr	r0, [r7, #12]
    7172:	f000 fa19 	bl	75a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    7176:	f000 fe5b 	bl	7e30 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    717a:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    717e:	4618      	mov	r0, r3
    7180:	f107 0720 	add.w	r7, r7, #32
    7184:	46bd      	mov	sp, r7
    7186:	bd80      	pop	{r7, pc}

00007188 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    7188:	b580      	push	{r7, lr}
    718a:	b086      	sub	sp, #24
    718c:	af00      	add	r7, sp, #0
    718e:	60f8      	str	r0, [r7, #12]
    7190:	60b9      	str	r1, [r7, #8]
    7192:	607a      	str	r2, [r7, #4]
    7194:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7196:	f04f 0300 	mov.w	r3, #0
    719a:	613b      	str	r3, [r7, #16]
    719c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    71a0:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    71a4:	68fb      	ldr	r3, [r7, #12]
    71a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    71a8:	68fb      	ldr	r3, [r7, #12]
    71aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    71ac:	429a      	cmp	r2, r3
    71ae:	d225      	bcs.n	71fc <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    71b0:	68f8      	ldr	r0, [r7, #12]
    71b2:	68b9      	ldr	r1, [r7, #8]
    71b4:	683a      	ldr	r2, [r7, #0]
    71b6:	f000 f96d 	bl	7494 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    71ba:	68fb      	ldr	r3, [r7, #12]
    71bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    71be:	f1b3 3fff 	cmp.w	r3, #4294967295
    71c2:	d111      	bne.n	71e8 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    71c4:	68fb      	ldr	r3, [r7, #12]
    71c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71c8:	2b00      	cmp	r3, #0
    71ca:	d013      	beq.n	71f4 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    71cc:	68fb      	ldr	r3, [r7, #12]
    71ce:	f103 0324 	add.w	r3, r3, #36	; 0x24
    71d2:	4618      	mov	r0, r3
    71d4:	f001 f81a 	bl	820c <xTaskRemoveFromEventList>
    71d8:	4603      	mov	r3, r0
    71da:	2b00      	cmp	r3, #0
    71dc:	d00a      	beq.n	71f4 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    71de:	687b      	ldr	r3, [r7, #4]
    71e0:	f04f 0201 	mov.w	r2, #1
    71e4:	601a      	str	r2, [r3, #0]
    71e6:	e005      	b.n	71f4 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    71ec:	f103 0201 	add.w	r2, r3, #1
    71f0:	68fb      	ldr	r3, [r7, #12]
    71f2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    71f4:	f04f 0301 	mov.w	r3, #1
    71f8:	617b      	str	r3, [r7, #20]
    71fa:	e002      	b.n	7202 <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    71fc:	f04f 0300 	mov.w	r3, #0
    7200:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7202:	f04f 0000 	mov.w	r0, #0
    7206:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    720a:	697b      	ldr	r3, [r7, #20]
}
    720c:	4618      	mov	r0, r3
    720e:	f107 0718 	add.w	r7, r7, #24
    7212:	46bd      	mov	sp, r7
    7214:	bd80      	pop	{r7, pc}
    7216:	bf00      	nop

00007218 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    7218:	b580      	push	{r7, lr}
    721a:	b088      	sub	sp, #32
    721c:	af00      	add	r7, sp, #0
    721e:	60f8      	str	r0, [r7, #12]
    7220:	60b9      	str	r1, [r7, #8]
    7222:	607a      	str	r2, [r7, #4]
    7224:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    7226:	f04f 0300 	mov.w	r3, #0
    722a:	61fb      	str	r3, [r7, #28]
    722c:	e000      	b.n	7230 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    722e:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7230:	f001 fb2a 	bl	8888 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    7234:	68fb      	ldr	r3, [r7, #12]
    7236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7238:	2b00      	cmp	r3, #0
    723a:	d040      	beq.n	72be <xQueueGenericReceive+0xa6>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    723c:	68fb      	ldr	r3, [r7, #12]
    723e:	68db      	ldr	r3, [r3, #12]
    7240:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    7242:	68f8      	ldr	r0, [r7, #12]
    7244:	68b9      	ldr	r1, [r7, #8]
    7246:	f000 f987 	bl	7558 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    724a:	683b      	ldr	r3, [r7, #0]
    724c:	2b00      	cmp	r3, #0
    724e:	d11f      	bne.n	7290 <xQueueGenericReceive+0x78>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    7250:	68fb      	ldr	r3, [r7, #12]
    7252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7254:	f103 32ff 	add.w	r2, r3, #4294967295
    7258:	68fb      	ldr	r3, [r7, #12]
    725a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	2b00      	cmp	r3, #0
    7262:	d105      	bne.n	7270 <xQueueGenericReceive+0x58>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    7264:	f001 f9ea 	bl	863c <xTaskGetCurrentTaskHandle>
    7268:	4603      	mov	r3, r0
    726a:	461a      	mov	r2, r3
    726c:	68fb      	ldr	r3, [r7, #12]
    726e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7270:	68fb      	ldr	r3, [r7, #12]
    7272:	691b      	ldr	r3, [r3, #16]
    7274:	2b00      	cmp	r3, #0
    7276:	d01d      	beq.n	72b4 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    7278:	68fb      	ldr	r3, [r7, #12]
    727a:	f103 0310 	add.w	r3, r3, #16
    727e:	4618      	mov	r0, r3
    7280:	f000 ffc4 	bl	820c <xTaskRemoveFromEventList>
    7284:	4603      	mov	r3, r0
    7286:	2b01      	cmp	r3, #1
    7288:	d114      	bne.n	72b4 <xQueueGenericReceive+0x9c>
						{
							portYIELD_WITHIN_API();
    728a:	f001 faf1 	bl	8870 <vPortYieldFromISR>
    728e:	e011      	b.n	72b4 <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    7290:	68fb      	ldr	r3, [r7, #12]
    7292:	69ba      	ldr	r2, [r7, #24]
    7294:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    729a:	2b00      	cmp	r3, #0
    729c:	d00a      	beq.n	72b4 <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    729e:	68fb      	ldr	r3, [r7, #12]
    72a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    72a4:	4618      	mov	r0, r3
    72a6:	f000 ffb1 	bl	820c <xTaskRemoveFromEventList>
    72aa:	4603      	mov	r3, r0
    72ac:	2b00      	cmp	r3, #0
    72ae:	d001      	beq.n	72b4 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    72b0:	f001 fade 	bl	8870 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    72b4:	f001 fafa 	bl	88ac <vPortExitCritical>
				return pdPASS;
    72b8:	f04f 0301 	mov.w	r3, #1
    72bc:	e06b      	b.n	7396 <xQueueGenericReceive+0x17e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    72be:	687b      	ldr	r3, [r7, #4]
    72c0:	2b00      	cmp	r3, #0
    72c2:	d104      	bne.n	72ce <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    72c4:	f001 faf2 	bl	88ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    72c8:	f04f 0300 	mov.w	r3, #0
    72cc:	e063      	b.n	7396 <xQueueGenericReceive+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
    72ce:	69fb      	ldr	r3, [r7, #28]
    72d0:	2b00      	cmp	r3, #0
    72d2:	d107      	bne.n	72e4 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    72d4:	f107 0310 	add.w	r3, r7, #16
    72d8:	4618      	mov	r0, r3
    72da:	f000 fff1 	bl	82c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    72de:	f04f 0301 	mov.w	r3, #1
    72e2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    72e4:	f001 fae2 	bl	88ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    72e8:	f000 fd94 	bl	7e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    72ec:	f001 facc 	bl	8888 <vPortEnterCritical>
    72f0:	68fb      	ldr	r3, [r7, #12]
    72f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    72f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    72f8:	d103      	bne.n	7302 <xQueueGenericReceive+0xea>
    72fa:	68fb      	ldr	r3, [r7, #12]
    72fc:	f04f 0200 	mov.w	r2, #0
    7300:	645a      	str	r2, [r3, #68]	; 0x44
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7306:	f1b3 3fff 	cmp.w	r3, #4294967295
    730a:	d103      	bne.n	7314 <xQueueGenericReceive+0xfc>
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	f04f 0200 	mov.w	r2, #0
    7312:	649a      	str	r2, [r3, #72]	; 0x48
    7314:	f001 faca 	bl	88ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    7318:	f107 0210 	add.w	r2, r7, #16
    731c:	f107 0304 	add.w	r3, r7, #4
    7320:	4610      	mov	r0, r2
    7322:	4619      	mov	r1, r3
    7324:	f000 ffe2 	bl	82ec <xTaskCheckForTimeOut>
    7328:	4603      	mov	r3, r0
    732a:	2b00      	cmp	r3, #0
    732c:	d12c      	bne.n	7388 <xQueueGenericReceive+0x170>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    732e:	68f8      	ldr	r0, [r7, #12]
    7330:	f000 f98a 	bl	7648 <prvIsQueueEmpty>
    7334:	4603      	mov	r3, r0
    7336:	2b00      	cmp	r3, #0
    7338:	d020      	beq.n	737c <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    733a:	68fb      	ldr	r3, [r7, #12]
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	2b00      	cmp	r3, #0
    7340:	d108      	bne.n	7354 <xQueueGenericReceive+0x13c>
					{
						portENTER_CRITICAL();
    7342:	f001 faa1 	bl	8888 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7346:	68fb      	ldr	r3, [r7, #12]
    7348:	685b      	ldr	r3, [r3, #4]
    734a:	4618      	mov	r0, r3
    734c:	f001 f986 	bl	865c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    7350:	f001 faac 	bl	88ac <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7354:	68fb      	ldr	r3, [r7, #12]
    7356:	f103 0224 	add.w	r2, r3, #36	; 0x24
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	4610      	mov	r0, r2
    735e:	4619      	mov	r1, r3
    7360:	f000 ff20 	bl	81a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    7364:	68f8      	ldr	r0, [r7, #12]
    7366:	f000 f91f 	bl	75a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    736a:	f000 fd61 	bl	7e30 <xTaskResumeAll>
    736e:	4603      	mov	r3, r0
    7370:	2b00      	cmp	r3, #0
    7372:	f47f af5c 	bne.w	722e <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    7376:	f001 fa7b 	bl	8870 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    737a:	e759      	b.n	7230 <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    737c:	68f8      	ldr	r0, [r7, #12]
    737e:	f000 f913 	bl	75a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    7382:	f000 fd55 	bl	7e30 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    7386:	e753      	b.n	7230 <xQueueGenericReceive+0x18>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    7388:	68f8      	ldr	r0, [r7, #12]
    738a:	f000 f90d 	bl	75a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    738e:	f000 fd4f 	bl	7e30 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    7392:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    7396:	4618      	mov	r0, r3
    7398:	f107 0720 	add.w	r7, r7, #32
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}

000073a0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    73a0:	b580      	push	{r7, lr}
    73a2:	b086      	sub	sp, #24
    73a4:	af00      	add	r7, sp, #0
    73a6:	60f8      	str	r0, [r7, #12]
    73a8:	60b9      	str	r1, [r7, #8]
    73aa:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    73ac:	f04f 0300 	mov.w	r3, #0
    73b0:	613b      	str	r3, [r7, #16]
    73b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    73b6:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    73ba:	68fb      	ldr	r3, [r7, #12]
    73bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    73be:	2b00      	cmp	r3, #0
    73c0:	d02a      	beq.n	7418 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    73c2:	68f8      	ldr	r0, [r7, #12]
    73c4:	68b9      	ldr	r1, [r7, #8]
    73c6:	f000 f8c7 	bl	7558 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    73ca:	68fb      	ldr	r3, [r7, #12]
    73cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    73ce:	f103 32ff 	add.w	r2, r3, #4294967295
    73d2:	68fb      	ldr	r3, [r7, #12]
    73d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    73d6:	68fb      	ldr	r3, [r7, #12]
    73d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    73da:	f1b3 3fff 	cmp.w	r3, #4294967295
    73de:	d111      	bne.n	7404 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    73e0:	68fb      	ldr	r3, [r7, #12]
    73e2:	691b      	ldr	r3, [r3, #16]
    73e4:	2b00      	cmp	r3, #0
    73e6:	d013      	beq.n	7410 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    73e8:	68fb      	ldr	r3, [r7, #12]
    73ea:	f103 0310 	add.w	r3, r3, #16
    73ee:	4618      	mov	r0, r3
    73f0:	f000 ff0c 	bl	820c <xTaskRemoveFromEventList>
    73f4:	4603      	mov	r3, r0
    73f6:	2b00      	cmp	r3, #0
    73f8:	d00a      	beq.n	7410 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	f04f 0201 	mov.w	r2, #1
    7400:	601a      	str	r2, [r3, #0]
    7402:	e005      	b.n	7410 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    7404:	68fb      	ldr	r3, [r7, #12]
    7406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7408:	f103 0201 	add.w	r2, r3, #1
    740c:	68fb      	ldr	r3, [r7, #12]
    740e:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    7410:	f04f 0301 	mov.w	r3, #1
    7414:	617b      	str	r3, [r7, #20]
    7416:	e002      	b.n	741e <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    7418:	f04f 0300 	mov.w	r3, #0
    741c:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    741e:	f04f 0000 	mov.w	r0, #0
    7422:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    7426:	697b      	ldr	r3, [r7, #20]
}
    7428:	4618      	mov	r0, r3
    742a:	f107 0718 	add.w	r7, r7, #24
    742e:	46bd      	mov	sp, r7
    7430:	bd80      	pop	{r7, pc}
    7432:	bf00      	nop

00007434 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    743c:	f001 fa24 	bl	8888 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7444:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    7446:	f001 fa31 	bl	88ac <vPortExitCritical>

	return uxReturn;
    744a:	68fb      	ldr	r3, [r7, #12]
}
    744c:	4618      	mov	r0, r3
    744e:	f107 0710 	add.w	r7, r7, #16
    7452:	46bd      	mov	sp, r7
    7454:	bd80      	pop	{r7, pc}
    7456:	bf00      	nop

00007458 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    7458:	b480      	push	{r7}
    745a:	b085      	sub	sp, #20
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7464:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    7466:	68fb      	ldr	r3, [r7, #12]
}
    7468:	4618      	mov	r0, r3
    746a:	f107 0714 	add.w	r7, r7, #20
    746e:	46bd      	mov	sp, r7
    7470:	bc80      	pop	{r7}
    7472:	4770      	bx	lr

00007474 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    7474:	b580      	push	{r7, lr}
    7476:	b082      	sub	sp, #8
    7478:	af00      	add	r7, sp, #0
    747a:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    747c:	687b      	ldr	r3, [r7, #4]
    747e:	681b      	ldr	r3, [r3, #0]
    7480:	4618      	mov	r0, r3
    7482:	f7f8 fe7f 	bl	184 <vPortFree>
	vPortFree( pxQueue );
    7486:	6878      	ldr	r0, [r7, #4]
    7488:	f7f8 fe7c 	bl	184 <vPortFree>
}
    748c:	f107 0708 	add.w	r7, r7, #8
    7490:	46bd      	mov	sp, r7
    7492:	bd80      	pop	{r7, pc}

00007494 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    7494:	b580      	push	{r7, lr}
    7496:	b084      	sub	sp, #16
    7498:	af00      	add	r7, sp, #0
    749a:	60f8      	str	r0, [r7, #12]
    749c:	60b9      	str	r1, [r7, #8]
    749e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    74a0:	68fb      	ldr	r3, [r7, #12]
    74a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74a4:	2b00      	cmp	r3, #0
    74a6:	d10d      	bne.n	74c4 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    74a8:	68fb      	ldr	r3, [r7, #12]
    74aa:	681b      	ldr	r3, [r3, #0]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d148      	bne.n	7542 <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    74b0:	68fb      	ldr	r3, [r7, #12]
    74b2:	685b      	ldr	r3, [r3, #4]
    74b4:	4618      	mov	r0, r3
    74b6:	f001 f92b 	bl	8710 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    74ba:	68fb      	ldr	r3, [r7, #12]
    74bc:	f04f 0200 	mov.w	r2, #0
    74c0:	605a      	str	r2, [r3, #4]
    74c2:	e03e      	b.n	7542 <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	2b00      	cmp	r3, #0
    74c8:	d11a      	bne.n	7500 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    74ca:	68fb      	ldr	r3, [r7, #12]
    74cc:	689a      	ldr	r2, [r3, #8]
    74ce:	68fb      	ldr	r3, [r7, #12]
    74d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74d2:	4610      	mov	r0, r2
    74d4:	68b9      	ldr	r1, [r7, #8]
    74d6:	461a      	mov	r2, r3
    74d8:	f001 fa4a 	bl	8970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    74dc:	68fb      	ldr	r3, [r7, #12]
    74de:	689a      	ldr	r2, [r3, #8]
    74e0:	68fb      	ldr	r3, [r7, #12]
    74e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74e4:	18d2      	adds	r2, r2, r3
    74e6:	68fb      	ldr	r3, [r7, #12]
    74e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	689a      	ldr	r2, [r3, #8]
    74ee:	68fb      	ldr	r3, [r7, #12]
    74f0:	685b      	ldr	r3, [r3, #4]
    74f2:	429a      	cmp	r2, r3
    74f4:	d325      	bcc.n	7542 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    74f6:	68fb      	ldr	r3, [r7, #12]
    74f8:	681a      	ldr	r2, [r3, #0]
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	609a      	str	r2, [r3, #8]
    74fe:	e020      	b.n	7542 <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    7500:	68fb      	ldr	r3, [r7, #12]
    7502:	68da      	ldr	r2, [r3, #12]
    7504:	68fb      	ldr	r3, [r7, #12]
    7506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7508:	4610      	mov	r0, r2
    750a:	68b9      	ldr	r1, [r7, #8]
    750c:	461a      	mov	r2, r3
    750e:	f001 fa2f 	bl	8970 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    7512:	68fb      	ldr	r3, [r7, #12]
    7514:	68da      	ldr	r2, [r3, #12]
    7516:	68fb      	ldr	r3, [r7, #12]
    7518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    751a:	f1c3 0300 	rsb	r3, r3, #0
    751e:	18d2      	adds	r2, r2, r3
    7520:	68fb      	ldr	r3, [r7, #12]
    7522:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    7524:	68fb      	ldr	r3, [r7, #12]
    7526:	68da      	ldr	r2, [r3, #12]
    7528:	68fb      	ldr	r3, [r7, #12]
    752a:	681b      	ldr	r3, [r3, #0]
    752c:	429a      	cmp	r2, r3
    752e:	d208      	bcs.n	7542 <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    7530:	68fb      	ldr	r3, [r7, #12]
    7532:	685a      	ldr	r2, [r3, #4]
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7538:	f1c3 0300 	rsb	r3, r3, #0
    753c:	18d2      	adds	r2, r2, r3
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    7542:	68fb      	ldr	r3, [r7, #12]
    7544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7546:	f103 0201 	add.w	r2, r3, #1
    754a:	68fb      	ldr	r3, [r7, #12]
    754c:	639a      	str	r2, [r3, #56]	; 0x38
}
    754e:	f107 0710 	add.w	r7, r7, #16
    7552:	46bd      	mov	sp, r7
    7554:	bd80      	pop	{r7, pc}
    7556:	bf00      	nop

00007558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    7558:	b580      	push	{r7, lr}
    755a:	b082      	sub	sp, #8
    755c:	af00      	add	r7, sp, #0
    755e:	6078      	str	r0, [r7, #4]
    7560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	2b00      	cmp	r3, #0
    7568:	d019      	beq.n	759e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	68da      	ldr	r2, [r3, #12]
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7572:	18d2      	adds	r2, r2, r3
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	68da      	ldr	r2, [r3, #12]
    757c:	687b      	ldr	r3, [r7, #4]
    757e:	685b      	ldr	r3, [r3, #4]
    7580:	429a      	cmp	r2, r3
    7582:	d303      	bcc.n	758c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    7584:	687b      	ldr	r3, [r7, #4]
    7586:	681a      	ldr	r2, [r3, #0]
    7588:	687b      	ldr	r3, [r7, #4]
    758a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	68da      	ldr	r2, [r3, #12]
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7594:	6838      	ldr	r0, [r7, #0]
    7596:	4611      	mov	r1, r2
    7598:	461a      	mov	r2, r3
    759a:	f001 f9e9 	bl	8970 <memcpy>
	}
}
    759e:	f107 0708 	add.w	r7, r7, #8
    75a2:	46bd      	mov	sp, r7
    75a4:	bd80      	pop	{r7, pc}
    75a6:	bf00      	nop

000075a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    75a8:	b580      	push	{r7, lr}
    75aa:	b082      	sub	sp, #8
    75ac:	af00      	add	r7, sp, #0
    75ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    75b0:	f001 f96a 	bl	8888 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    75b4:	e014      	b.n	75e0 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    75ba:	2b00      	cmp	r3, #0
    75bc:	d015      	beq.n	75ea <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    75c4:	4618      	mov	r0, r3
    75c6:	f000 fe21 	bl	820c <xTaskRemoveFromEventList>
    75ca:	4603      	mov	r3, r0
    75cc:	2b00      	cmp	r3, #0
    75ce:	d001      	beq.n	75d4 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    75d0:	f000 fed6 	bl	8380 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    75d8:	f103 32ff 	add.w	r2, r3, #4294967295
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    75e0:	687b      	ldr	r3, [r7, #4]
    75e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    75e4:	2b00      	cmp	r3, #0
    75e6:	dce6      	bgt.n	75b6 <prvUnlockQueue+0xe>
    75e8:	e000      	b.n	75ec <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    75ea:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	f04f 32ff 	mov.w	r2, #4294967295
    75f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    75f4:	f001 f95a 	bl	88ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    75f8:	f001 f946 	bl	8888 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    75fc:	e014      	b.n	7628 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	691b      	ldr	r3, [r3, #16]
    7602:	2b00      	cmp	r3, #0
    7604:	d015      	beq.n	7632 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7606:	687b      	ldr	r3, [r7, #4]
    7608:	f103 0310 	add.w	r3, r3, #16
    760c:	4618      	mov	r0, r3
    760e:	f000 fdfd 	bl	820c <xTaskRemoveFromEventList>
    7612:	4603      	mov	r3, r0
    7614:	2b00      	cmp	r3, #0
    7616:	d001      	beq.n	761c <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    7618:	f000 feb2 	bl	8380 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7620:	f103 32ff 	add.w	r2, r3, #4294967295
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    7628:	687b      	ldr	r3, [r7, #4]
    762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    762c:	2b00      	cmp	r3, #0
    762e:	dce6      	bgt.n	75fe <prvUnlockQueue+0x56>
    7630:	e000      	b.n	7634 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    7632:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	f04f 32ff 	mov.w	r2, #4294967295
    763a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    763c:	f001 f936 	bl	88ac <vPortExitCritical>
}
    7640:	f107 0708 	add.w	r7, r7, #8
    7644:	46bd      	mov	sp, r7
    7646:	bd80      	pop	{r7, pc}

00007648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    7648:	b580      	push	{r7, lr}
    764a:	b084      	sub	sp, #16
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    7650:	f001 f91a 	bl	8888 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7658:	2b00      	cmp	r3, #0
    765a:	bf14      	ite	ne
    765c:	2300      	movne	r3, #0
    765e:	2301      	moveq	r3, #1
    7660:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    7662:	f001 f923 	bl	88ac <vPortExitCritical>

	return xReturn;
    7666:	68fb      	ldr	r3, [r7, #12]
}
    7668:	4618      	mov	r0, r3
    766a:	f107 0710 	add.w	r7, r7, #16
    766e:	46bd      	mov	sp, r7
    7670:	bd80      	pop	{r7, pc}
    7672:	bf00      	nop

00007674 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    7674:	b480      	push	{r7}
    7676:	b085      	sub	sp, #20
    7678:	af00      	add	r7, sp, #0
    767a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    767c:	687b      	ldr	r3, [r7, #4]
    767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7680:	2b00      	cmp	r3, #0
    7682:	bf14      	ite	ne
    7684:	2300      	movne	r3, #0
    7686:	2301      	moveq	r3, #1
    7688:	60fb      	str	r3, [r7, #12]

	return xReturn;
    768a:	68fb      	ldr	r3, [r7, #12]
}
    768c:	4618      	mov	r0, r3
    768e:	f107 0714 	add.w	r7, r7, #20
    7692:	46bd      	mov	sp, r7
    7694:	bc80      	pop	{r7}
    7696:	4770      	bx	lr

00007698 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    7698:	b580      	push	{r7, lr}
    769a:	b084      	sub	sp, #16
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    76a0:	f001 f8f2 	bl	8888 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    76ac:	429a      	cmp	r2, r3
    76ae:	bf14      	ite	ne
    76b0:	2300      	movne	r3, #0
    76b2:	2301      	moveq	r3, #1
    76b4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    76b6:	f001 f8f9 	bl	88ac <vPortExitCritical>

	return xReturn;
    76ba:	68fb      	ldr	r3, [r7, #12]
}
    76bc:	4618      	mov	r0, r3
    76be:	f107 0710 	add.w	r7, r7, #16
    76c2:	46bd      	mov	sp, r7
    76c4:	bd80      	pop	{r7, pc}
    76c6:	bf00      	nop

000076c8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    76c8:	b480      	push	{r7}
    76ca:	b085      	sub	sp, #20
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    76d8:	429a      	cmp	r2, r3
    76da:	bf14      	ite	ne
    76dc:	2300      	movne	r3, #0
    76de:	2301      	moveq	r3, #1
    76e0:	60fb      	str	r3, [r7, #12]

	return xReturn;
    76e2:	68fb      	ldr	r3, [r7, #12]
}
    76e4:	4618      	mov	r0, r3
    76e6:	f107 0714 	add.w	r7, r7, #20
    76ea:	46bd      	mov	sp, r7
    76ec:	bc80      	pop	{r7}
    76ee:	4770      	bx	lr

000076f0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    76f0:	b580      	push	{r7, lr}
    76f2:	b08a      	sub	sp, #40	; 0x28
    76f4:	af02      	add	r7, sp, #8
    76f6:	60f8      	str	r0, [r7, #12]
    76f8:	60b9      	str	r1, [r7, #8]
    76fa:	603b      	str	r3, [r7, #0]
    76fc:	4613      	mov	r3, r2
    76fe:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    7700:	88fb      	ldrh	r3, [r7, #6]
    7702:	4618      	mov	r0, r3
    7704:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7706:	f000 ff4f 	bl	85a8 <prvAllocateTCBAndStack>
    770a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    770c:	69bb      	ldr	r3, [r7, #24]
    770e:	2b00      	cmp	r3, #0
    7710:	d078      	beq.n	7804 <xTaskGenericCreate+0x114>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    7712:	69bb      	ldr	r3, [r7, #24]
    7714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7716:	88fb      	ldrh	r3, [r7, #6]
    7718:	f103 33ff 	add.w	r3, r3, #4294967295
    771c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7720:	18d3      	adds	r3, r2, r3
    7722:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    7724:	697b      	ldr	r3, [r7, #20]
    7726:	f023 0307 	bic.w	r3, r3, #7
    772a:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    772c:	88fb      	ldrh	r3, [r7, #6]
    772e:	9300      	str	r3, [sp, #0]
    7730:	69b8      	ldr	r0, [r7, #24]
    7732:	68b9      	ldr	r1, [r7, #8]
    7734:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7738:	f000 fe40 	bl	83bc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    773c:	6978      	ldr	r0, [r7, #20]
    773e:	68f9      	ldr	r1, [r7, #12]
    7740:	683a      	ldr	r2, [r7, #0]
    7742:	f001 f829 	bl	8798 <pxPortInitialiseStack>
    7746:	4603      	mov	r3, r0
    7748:	461a      	mov	r2, r3
    774a:	69bb      	ldr	r3, [r7, #24]
    774c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7750:	2b00      	cmp	r3, #0
    7752:	d002      	beq.n	775a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    7754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7756:	69ba      	ldr	r2, [r7, #24]
    7758:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    775a:	f001 f895 	bl	8888 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    775e:	4b35      	ldr	r3, [pc, #212]	; (7834 <xTaskGenericCreate+0x144>)
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	f103 0201 	add.w	r2, r3, #1
    7766:	4b33      	ldr	r3, [pc, #204]	; (7834 <xTaskGenericCreate+0x144>)
    7768:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    776a:	4b33      	ldr	r3, [pc, #204]	; (7838 <xTaskGenericCreate+0x148>)
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	2b00      	cmp	r3, #0
    7770:	d109      	bne.n	7786 <xTaskGenericCreate+0x96>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    7772:	4b31      	ldr	r3, [pc, #196]	; (7838 <xTaskGenericCreate+0x148>)
    7774:	69ba      	ldr	r2, [r7, #24]
    7776:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    7778:	4b2e      	ldr	r3, [pc, #184]	; (7834 <xTaskGenericCreate+0x144>)
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	2b01      	cmp	r3, #1
    777e:	d10f      	bne.n	77a0 <xTaskGenericCreate+0xb0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    7780:	f000 fe5a 	bl	8438 <prvInitialiseTaskLists>
    7784:	e00c      	b.n	77a0 <xTaskGenericCreate+0xb0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    7786:	4b2d      	ldr	r3, [pc, #180]	; (783c <xTaskGenericCreate+0x14c>)
    7788:	681b      	ldr	r3, [r3, #0]
    778a:	2b00      	cmp	r3, #0
    778c:	d108      	bne.n	77a0 <xTaskGenericCreate+0xb0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    778e:	4b2a      	ldr	r3, [pc, #168]	; (7838 <xTaskGenericCreate+0x148>)
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7796:	429a      	cmp	r2, r3
    7798:	d802      	bhi.n	77a0 <xTaskGenericCreate+0xb0>
					{
						pxCurrentTCB = pxNewTCB;
    779a:	4b27      	ldr	r3, [pc, #156]	; (7838 <xTaskGenericCreate+0x148>)
    779c:	69ba      	ldr	r2, [r7, #24]
    779e:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    77a0:	69bb      	ldr	r3, [r7, #24]
    77a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77a4:	4b26      	ldr	r3, [pc, #152]	; (7840 <xTaskGenericCreate+0x150>)
    77a6:	681b      	ldr	r3, [r3, #0]
    77a8:	429a      	cmp	r2, r3
    77aa:	d903      	bls.n	77b4 <xTaskGenericCreate+0xc4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    77ac:	69bb      	ldr	r3, [r7, #24]
    77ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77b0:	4b23      	ldr	r3, [pc, #140]	; (7840 <xTaskGenericCreate+0x150>)
    77b2:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    77b4:	4b23      	ldr	r3, [pc, #140]	; (7844 <xTaskGenericCreate+0x154>)
    77b6:	681b      	ldr	r3, [r3, #0]
    77b8:	f103 0201 	add.w	r2, r3, #1
    77bc:	4b21      	ldr	r3, [pc, #132]	; (7844 <xTaskGenericCreate+0x154>)
    77be:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    77c0:	69bb      	ldr	r3, [r7, #24]
    77c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77c4:	4b20      	ldr	r3, [pc, #128]	; (7848 <xTaskGenericCreate+0x158>)
    77c6:	681b      	ldr	r3, [r3, #0]
    77c8:	429a      	cmp	r2, r3
    77ca:	d903      	bls.n	77d4 <xTaskGenericCreate+0xe4>
    77cc:	69bb      	ldr	r3, [r7, #24]
    77ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77d0:	4b1d      	ldr	r3, [pc, #116]	; (7848 <xTaskGenericCreate+0x158>)
    77d2:	601a      	str	r2, [r3, #0]
    77d4:	69bb      	ldr	r3, [r7, #24]
    77d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77d8:	4613      	mov	r3, r2
    77da:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77de:	189b      	adds	r3, r3, r2
    77e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77e4:	461a      	mov	r2, r3
    77e6:	4b19      	ldr	r3, [pc, #100]	; (784c <xTaskGenericCreate+0x15c>)
    77e8:	18d2      	adds	r2, r2, r3
    77ea:	69bb      	ldr	r3, [r7, #24]
    77ec:	f103 0304 	add.w	r3, r3, #4
    77f0:	4610      	mov	r0, r2
    77f2:	4619      	mov	r1, r3
    77f4:	f7ff faae 	bl	6d54 <vListInsertEnd>

			xReturn = pdPASS;
    77f8:	f04f 0301 	mov.w	r3, #1
    77fc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    77fe:	f001 f855 	bl	88ac <vPortExitCritical>
    7802:	e002      	b.n	780a <xTaskGenericCreate+0x11a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7804:	f04f 33ff 	mov.w	r3, #4294967295
    7808:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    780a:	69fb      	ldr	r3, [r7, #28]
    780c:	2b01      	cmp	r3, #1
    780e:	d10b      	bne.n	7828 <xTaskGenericCreate+0x138>
	{
		if( xSchedulerRunning != pdFALSE )
    7810:	4b0a      	ldr	r3, [pc, #40]	; (783c <xTaskGenericCreate+0x14c>)
    7812:	681b      	ldr	r3, [r3, #0]
    7814:	2b00      	cmp	r3, #0
    7816:	d007      	beq.n	7828 <xTaskGenericCreate+0x138>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    7818:	4b07      	ldr	r3, [pc, #28]	; (7838 <xTaskGenericCreate+0x148>)
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7820:	429a      	cmp	r2, r3
    7822:	d201      	bcs.n	7828 <xTaskGenericCreate+0x138>
			{
				portYIELD_WITHIN_API();
    7824:	f001 f824 	bl	8870 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    7828:	69fb      	ldr	r3, [r7, #28]
}
    782a:	4618      	mov	r0, r3
    782c:	f107 0720 	add.w	r7, r7, #32
    7830:	46bd      	mov	sp, r7
    7832:	bd80      	pop	{r7, pc}
    7834:	200045a0 	.word	0x200045a0
    7838:	200044c8 	.word	0x200044c8
    783c:	200045b0 	.word	0x200045b0
    7840:	200045a8 	.word	0x200045a8
    7844:	200045c4 	.word	0x200045c4
    7848:	200045ac 	.word	0x200045ac
    784c:	200044cc 	.word	0x200044cc

00007850 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    7850:	b580      	push	{r7, lr}
    7852:	b084      	sub	sp, #16
    7854:	af00      	add	r7, sp, #0
    7856:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    7858:	f001 f816 	bl	8888 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    785c:	4b20      	ldr	r3, [pc, #128]	; (78e0 <vTaskDelete+0x90>)
    785e:	681b      	ldr	r3, [r3, #0]
    7860:	687a      	ldr	r2, [r7, #4]
    7862:	429a      	cmp	r2, r3
    7864:	d102      	bne.n	786c <vTaskDelete+0x1c>
			{
				pxTaskToDelete = NULL;
    7866:	f04f 0300 	mov.w	r3, #0
    786a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    786c:	687b      	ldr	r3, [r7, #4]
    786e:	2b00      	cmp	r3, #0
    7870:	d102      	bne.n	7878 <vTaskDelete+0x28>
    7872:	4b1b      	ldr	r3, [pc, #108]	; (78e0 <vTaskDelete+0x90>)
    7874:	681b      	ldr	r3, [r3, #0]
    7876:	e000      	b.n	787a <vTaskDelete+0x2a>
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    787c:	68fb      	ldr	r3, [r7, #12]
    787e:	f103 0304 	add.w	r3, r3, #4
    7882:	4618      	mov	r0, r3
    7884:	f7ff fac8 	bl	6e18 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    7888:	68fb      	ldr	r3, [r7, #12]
    788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    788c:	2b00      	cmp	r3, #0
    788e:	d005      	beq.n	789c <vTaskDelete+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    7890:	68fb      	ldr	r3, [r7, #12]
    7892:	f103 0318 	add.w	r3, r3, #24
    7896:	4618      	mov	r0, r3
    7898:	f7ff fabe 	bl	6e18 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    789c:	68fb      	ldr	r3, [r7, #12]
    789e:	f103 0304 	add.w	r3, r3, #4
    78a2:	4810      	ldr	r0, [pc, #64]	; (78e4 <vTaskDelete+0x94>)
    78a4:	4619      	mov	r1, r3
    78a6:	f7ff fa55 	bl	6d54 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    78aa:	4b0f      	ldr	r3, [pc, #60]	; (78e8 <vTaskDelete+0x98>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	f103 0201 	add.w	r2, r3, #1
    78b2:	4b0d      	ldr	r3, [pc, #52]	; (78e8 <vTaskDelete+0x98>)
    78b4:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    78b6:	4b0d      	ldr	r3, [pc, #52]	; (78ec <vTaskDelete+0x9c>)
    78b8:	681b      	ldr	r3, [r3, #0]
    78ba:	f103 0201 	add.w	r2, r3, #1
    78be:	4b0b      	ldr	r3, [pc, #44]	; (78ec <vTaskDelete+0x9c>)
    78c0:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    78c2:	f000 fff3 	bl	88ac <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    78c6:	4b0a      	ldr	r3, [pc, #40]	; (78f0 <vTaskDelete+0xa0>)
    78c8:	681b      	ldr	r3, [r3, #0]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d004      	beq.n	78d8 <vTaskDelete+0x88>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	2b00      	cmp	r3, #0
    78d2:	d101      	bne.n	78d8 <vTaskDelete+0x88>
			{
				portYIELD_WITHIN_API();
    78d4:	f000 ffcc 	bl	8870 <vPortYieldFromISR>
			}
		}
	}
    78d8:	f107 0710 	add.w	r7, r7, #16
    78dc:	46bd      	mov	sp, r7
    78de:	bd80      	pop	{r7, pc}
    78e0:	200044c8 	.word	0x200044c8
    78e4:	20004574 	.word	0x20004574
    78e8:	20004588 	.word	0x20004588
    78ec:	200045c4 	.word	0x200045c4
    78f0:	200045b0 	.word	0x200045b0

000078f4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    78f4:	b580      	push	{r7, lr}
    78f6:	b086      	sub	sp, #24
    78f8:	af00      	add	r7, sp, #0
    78fa:	6078      	str	r0, [r7, #4]
    78fc:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    78fe:	f04f 0300 	mov.w	r3, #0
    7902:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    7904:	f000 fa86 	bl	7e14 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	681a      	ldr	r2, [r3, #0]
    790c:	683b      	ldr	r3, [r7, #0]
    790e:	18d3      	adds	r3, r2, r3
    7910:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    7912:	687b      	ldr	r3, [r7, #4]
    7914:	681a      	ldr	r2, [r3, #0]
    7916:	4b1d      	ldr	r3, [pc, #116]	; (798c <vTaskDelayUntil+0x98>)
    7918:	681b      	ldr	r3, [r3, #0]
    791a:	429a      	cmp	r2, r3
    791c:	d90d      	bls.n	793a <vTaskDelayUntil+0x46>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	681a      	ldr	r2, [r3, #0]
    7922:	693b      	ldr	r3, [r7, #16]
    7924:	429a      	cmp	r2, r3
    7926:	d915      	bls.n	7954 <vTaskDelayUntil+0x60>
    7928:	4b18      	ldr	r3, [pc, #96]	; (798c <vTaskDelayUntil+0x98>)
    792a:	681b      	ldr	r3, [r3, #0]
    792c:	693a      	ldr	r2, [r7, #16]
    792e:	429a      	cmp	r2, r3
    7930:	d910      	bls.n	7954 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    7932:	f04f 0301 	mov.w	r3, #1
    7936:	617b      	str	r3, [r7, #20]
    7938:	e00c      	b.n	7954 <vTaskDelayUntil+0x60>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	681a      	ldr	r2, [r3, #0]
    793e:	693b      	ldr	r3, [r7, #16]
    7940:	429a      	cmp	r2, r3
    7942:	d804      	bhi.n	794e <vTaskDelayUntil+0x5a>
    7944:	4b11      	ldr	r3, [pc, #68]	; (798c <vTaskDelayUntil+0x98>)
    7946:	681b      	ldr	r3, [r3, #0]
    7948:	693a      	ldr	r2, [r7, #16]
    794a:	429a      	cmp	r2, r3
    794c:	d902      	bls.n	7954 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    794e:	f04f 0301 	mov.w	r3, #1
    7952:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    7954:	687b      	ldr	r3, [r7, #4]
    7956:	693a      	ldr	r2, [r7, #16]
    7958:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    795a:	697b      	ldr	r3, [r7, #20]
    795c:	2b00      	cmp	r3, #0
    795e:	d009      	beq.n	7974 <vTaskDelayUntil+0x80>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7960:	4b0b      	ldr	r3, [pc, #44]	; (7990 <vTaskDelayUntil+0x9c>)
    7962:	681b      	ldr	r3, [r3, #0]
    7964:	f103 0304 	add.w	r3, r3, #4
    7968:	4618      	mov	r0, r3
    796a:	f7ff fa55 	bl	6e18 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    796e:	6938      	ldr	r0, [r7, #16]
    7970:	f000 fde2 	bl	8538 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    7974:	f000 fa5c 	bl	7e30 <xTaskResumeAll>
    7978:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    797a:	68fb      	ldr	r3, [r7, #12]
    797c:	2b00      	cmp	r3, #0
    797e:	d101      	bne.n	7984 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
    7980:	f000 ff76 	bl	8870 <vPortYieldFromISR>
		}
	}
    7984:	f107 0718 	add.w	r7, r7, #24
    7988:	46bd      	mov	sp, r7
    798a:	bd80      	pop	{r7, pc}
    798c:	200045a4 	.word	0x200045a4
    7990:	200044c8 	.word	0x200044c8

00007994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    7994:	b580      	push	{r7, lr}
    7996:	b084      	sub	sp, #16
    7998:	af00      	add	r7, sp, #0
    799a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    799c:	f04f 0300 	mov.w	r3, #0
    79a0:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	2b00      	cmp	r3, #0
    79a6:	d013      	beq.n	79d0 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
    79a8:	f000 fa34 	bl	7e14 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    79ac:	4b0d      	ldr	r3, [pc, #52]	; (79e4 <vTaskDelay+0x50>)
    79ae:	681a      	ldr	r2, [r3, #0]
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	18d3      	adds	r3, r2, r3
    79b4:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    79b6:	4b0c      	ldr	r3, [pc, #48]	; (79e8 <vTaskDelay+0x54>)
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	f103 0304 	add.w	r3, r3, #4
    79be:	4618      	mov	r0, r3
    79c0:	f7ff fa2a 	bl	6e18 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    79c4:	68b8      	ldr	r0, [r7, #8]
    79c6:	f000 fdb7 	bl	8538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    79ca:	f000 fa31 	bl	7e30 <xTaskResumeAll>
    79ce:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    79d0:	68fb      	ldr	r3, [r7, #12]
    79d2:	2b00      	cmp	r3, #0
    79d4:	d101      	bne.n	79da <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
    79d6:	f000 ff4b 	bl	8870 <vPortYieldFromISR>
		}
	}
    79da:	f107 0710 	add.w	r7, r7, #16
    79de:	46bd      	mov	sp, r7
    79e0:	bd80      	pop	{r7, pc}
    79e2:	bf00      	nop
    79e4:	200045a4 	.word	0x200045a4
    79e8:	200044c8 	.word	0x200044c8

000079ec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    79ec:	b580      	push	{r7, lr}
    79ee:	b084      	sub	sp, #16
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    79f4:	f000 ff48 	bl	8888 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d102      	bne.n	7a04 <uxTaskPriorityGet+0x18>
    79fe:	4b08      	ldr	r3, [pc, #32]	; (7a20 <uxTaskPriorityGet+0x34>)
    7a00:	681b      	ldr	r3, [r3, #0]
    7a02:	e000      	b.n	7a06 <uxTaskPriorityGet+0x1a>
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    7a08:	68fb      	ldr	r3, [r7, #12]
    7a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a0c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    7a0e:	f000 ff4d 	bl	88ac <vPortExitCritical>

		return uxReturn;
    7a12:	68bb      	ldr	r3, [r7, #8]
	}
    7a14:	4618      	mov	r0, r3
    7a16:	f107 0710 	add.w	r7, r7, #16
    7a1a:	46bd      	mov	sp, r7
    7a1c:	bd80      	pop	{r7, pc}
    7a1e:	bf00      	nop
    7a20:	200044c8 	.word	0x200044c8

00007a24 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    7a24:	b580      	push	{r7, lr}
    7a26:	b086      	sub	sp, #24
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
    7a2c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    7a2e:	f04f 0300 	mov.w	r3, #0
    7a32:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	2b04      	cmp	r3, #4
    7a38:	d902      	bls.n	7a40 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    7a3a:	f04f 0304 	mov.w	r3, #4
    7a3e:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    7a40:	f000 ff22 	bl	8888 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    7a44:	4b39      	ldr	r3, [pc, #228]	; (7b2c <vTaskPrioritySet+0x108>)
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	687a      	ldr	r2, [r7, #4]
    7a4a:	429a      	cmp	r2, r3
    7a4c:	d102      	bne.n	7a54 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    7a4e:	f04f 0300 	mov.w	r3, #0
    7a52:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	2b00      	cmp	r3, #0
    7a58:	d102      	bne.n	7a60 <vTaskPrioritySet+0x3c>
    7a5a:	4b34      	ldr	r3, [pc, #208]	; (7b2c <vTaskPrioritySet+0x108>)
    7a5c:	681b      	ldr	r3, [r3, #0]
    7a5e:	e000      	b.n	7a62 <vTaskPrioritySet+0x3e>
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    7a64:	693b      	ldr	r3, [r7, #16]
    7a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7a68:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    7a6a:	68fa      	ldr	r2, [r7, #12]
    7a6c:	683b      	ldr	r3, [r7, #0]
    7a6e:	429a      	cmp	r2, r3
    7a70:	d056      	beq.n	7b20 <vTaskPrioritySet+0xfc>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    7a72:	683a      	ldr	r2, [r7, #0]
    7a74:	68fb      	ldr	r3, [r7, #12]
    7a76:	429a      	cmp	r2, r3
    7a78:	d906      	bls.n	7a88 <vTaskPrioritySet+0x64>
				{
					if( pxTask != NULL )
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d009      	beq.n	7a94 <vTaskPrioritySet+0x70>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    7a80:	f04f 0301 	mov.w	r3, #1
    7a84:	617b      	str	r3, [r7, #20]
    7a86:	e005      	b.n	7a94 <vTaskPrioritySet+0x70>
					}
				}
				else if( pxTask == NULL )
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d102      	bne.n	7a94 <vTaskPrioritySet+0x70>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    7a8e:	f04f 0301 	mov.w	r3, #1
    7a92:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    7a94:	693b      	ldr	r3, [r7, #16]
    7a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7a98:	693b      	ldr	r3, [r7, #16]
    7a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a9c:	429a      	cmp	r2, r3
    7a9e:	d102      	bne.n	7aa6 <vTaskPrioritySet+0x82>
					{
						pxTCB->uxPriority = uxNewPriority;
    7aa0:	693b      	ldr	r3, [r7, #16]
    7aa2:	683a      	ldr	r2, [r7, #0]
    7aa4:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    7aa6:	693b      	ldr	r3, [r7, #16]
    7aa8:	683a      	ldr	r2, [r7, #0]
    7aaa:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    7aac:	683b      	ldr	r3, [r7, #0]
    7aae:	f1c3 0205 	rsb	r2, r3, #5
    7ab2:	693b      	ldr	r3, [r7, #16]
    7ab4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    7ab6:	693b      	ldr	r3, [r7, #16]
    7ab8:	6959      	ldr	r1, [r3, #20]
    7aba:	68fa      	ldr	r2, [r7, #12]
    7abc:	4613      	mov	r3, r2
    7abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7ac2:	189b      	adds	r3, r3, r2
    7ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7ac8:	461a      	mov	r2, r3
    7aca:	4b19      	ldr	r3, [pc, #100]	; (7b30 <vTaskPrioritySet+0x10c>)
    7acc:	18d3      	adds	r3, r2, r3
    7ace:	4299      	cmp	r1, r3
    7ad0:	d121      	bne.n	7b16 <vTaskPrioritySet+0xf2>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    7ad2:	693b      	ldr	r3, [r7, #16]
    7ad4:	f103 0304 	add.w	r3, r3, #4
    7ad8:	4618      	mov	r0, r3
    7ada:	f7ff f99d 	bl	6e18 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7ade:	693b      	ldr	r3, [r7, #16]
    7ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ae2:	4b14      	ldr	r3, [pc, #80]	; (7b34 <vTaskPrioritySet+0x110>)
    7ae4:	681b      	ldr	r3, [r3, #0]
    7ae6:	429a      	cmp	r2, r3
    7ae8:	d903      	bls.n	7af2 <vTaskPrioritySet+0xce>
    7aea:	693b      	ldr	r3, [r7, #16]
    7aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7aee:	4b11      	ldr	r3, [pc, #68]	; (7b34 <vTaskPrioritySet+0x110>)
    7af0:	601a      	str	r2, [r3, #0]
    7af2:	693b      	ldr	r3, [r7, #16]
    7af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7af6:	4613      	mov	r3, r2
    7af8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7afc:	189b      	adds	r3, r3, r2
    7afe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7b02:	461a      	mov	r2, r3
    7b04:	4b0a      	ldr	r3, [pc, #40]	; (7b30 <vTaskPrioritySet+0x10c>)
    7b06:	18d2      	adds	r2, r2, r3
    7b08:	693b      	ldr	r3, [r7, #16]
    7b0a:	f103 0304 	add.w	r3, r3, #4
    7b0e:	4610      	mov	r0, r2
    7b10:	4619      	mov	r1, r3
    7b12:	f7ff f91f 	bl	6d54 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    7b16:	697b      	ldr	r3, [r7, #20]
    7b18:	2b01      	cmp	r3, #1
    7b1a:	d101      	bne.n	7b20 <vTaskPrioritySet+0xfc>
				{
					portYIELD_WITHIN_API();
    7b1c:	f000 fea8 	bl	8870 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    7b20:	f000 fec4 	bl	88ac <vPortExitCritical>
	}
    7b24:	f107 0718 	add.w	r7, r7, #24
    7b28:	46bd      	mov	sp, r7
    7b2a:	bd80      	pop	{r7, pc}
    7b2c:	200044c8 	.word	0x200044c8
    7b30:	200044cc 	.word	0x200044cc
    7b34:	200045ac 	.word	0x200045ac

00007b38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    7b38:	b580      	push	{r7, lr}
    7b3a:	b084      	sub	sp, #16
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    7b40:	f000 fea2 	bl	8888 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    7b44:	4b21      	ldr	r3, [pc, #132]	; (7bcc <vTaskSuspend+0x94>)
    7b46:	681b      	ldr	r3, [r3, #0]
    7b48:	687a      	ldr	r2, [r7, #4]
    7b4a:	429a      	cmp	r2, r3
    7b4c:	d102      	bne.n	7b54 <vTaskSuspend+0x1c>
			{
				pxTaskToSuspend = NULL;
    7b4e:	f04f 0300 	mov.w	r3, #0
    7b52:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	2b00      	cmp	r3, #0
    7b58:	d102      	bne.n	7b60 <vTaskSuspend+0x28>
    7b5a:	4b1c      	ldr	r3, [pc, #112]	; (7bcc <vTaskSuspend+0x94>)
    7b5c:	681b      	ldr	r3, [r3, #0]
    7b5e:	e000      	b.n	7b62 <vTaskSuspend+0x2a>
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    7b64:	68fb      	ldr	r3, [r7, #12]
    7b66:	f103 0304 	add.w	r3, r3, #4
    7b6a:	4618      	mov	r0, r3
    7b6c:	f7ff f954 	bl	6e18 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    7b70:	68fb      	ldr	r3, [r7, #12]
    7b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b74:	2b00      	cmp	r3, #0
    7b76:	d005      	beq.n	7b84 <vTaskSuspend+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    7b78:	68fb      	ldr	r3, [r7, #12]
    7b7a:	f103 0318 	add.w	r3, r3, #24
    7b7e:	4618      	mov	r0, r3
    7b80:	f7ff f94a 	bl	6e18 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    7b84:	68fb      	ldr	r3, [r7, #12]
    7b86:	f103 0304 	add.w	r3, r3, #4
    7b8a:	4811      	ldr	r0, [pc, #68]	; (7bd0 <vTaskSuspend+0x98>)
    7b8c:	4619      	mov	r1, r3
    7b8e:	f7ff f8e1 	bl	6d54 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    7b92:	f000 fe8b 	bl	88ac <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d113      	bne.n	7bc4 <vTaskSuspend+0x8c>
		{
			if( xSchedulerRunning != pdFALSE )
    7b9c:	4b0d      	ldr	r3, [pc, #52]	; (7bd4 <vTaskSuspend+0x9c>)
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d002      	beq.n	7baa <vTaskSuspend+0x72>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    7ba4:	f000 fe64 	bl	8870 <vPortYieldFromISR>
    7ba8:	e00c      	b.n	7bc4 <vTaskSuspend+0x8c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    7baa:	4b09      	ldr	r3, [pc, #36]	; (7bd0 <vTaskSuspend+0x98>)
    7bac:	681a      	ldr	r2, [r3, #0]
    7bae:	4b0a      	ldr	r3, [pc, #40]	; (7bd8 <vTaskSuspend+0xa0>)
    7bb0:	681b      	ldr	r3, [r3, #0]
    7bb2:	429a      	cmp	r2, r3
    7bb4:	d104      	bne.n	7bc0 <vTaskSuspend+0x88>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    7bb6:	4b05      	ldr	r3, [pc, #20]	; (7bcc <vTaskSuspend+0x94>)
    7bb8:	f04f 0200 	mov.w	r2, #0
    7bbc:	601a      	str	r2, [r3, #0]
    7bbe:	e001      	b.n	7bc4 <vTaskSuspend+0x8c>
				}
				else
				{
					vTaskSwitchContext();
    7bc0:	f000 fa9c 	bl	80fc <vTaskSwitchContext>
				}
			}
		}
	}
    7bc4:	f107 0710 	add.w	r7, r7, #16
    7bc8:	46bd      	mov	sp, r7
    7bca:	bd80      	pop	{r7, pc}
    7bcc:	200044c8 	.word	0x200044c8
    7bd0:	2000458c 	.word	0x2000458c
    7bd4:	200045b0 	.word	0x200045b0
    7bd8:	200045a0 	.word	0x200045a0

00007bdc <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    7bdc:	b480      	push	{r7}
    7bde:	b085      	sub	sp, #20
    7be0:	af00      	add	r7, sp, #0
    7be2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    7be4:	f04f 0300 	mov.w	r3, #0
    7be8:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    7bee:	68bb      	ldr	r3, [r7, #8]
    7bf0:	695a      	ldr	r2, [r3, #20]
    7bf2:	4b0b      	ldr	r3, [pc, #44]	; (7c20 <xTaskIsTaskSuspended+0x44>)
    7bf4:	429a      	cmp	r2, r3
    7bf6:	d10b      	bne.n	7c10 <xTaskIsTaskSuspended+0x34>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    7bf8:	68bb      	ldr	r3, [r7, #8]
    7bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7bfc:	4b09      	ldr	r3, [pc, #36]	; (7c24 <xTaskIsTaskSuspended+0x48>)
    7bfe:	429a      	cmp	r2, r3
    7c00:	d006      	beq.n	7c10 <xTaskIsTaskSuspended+0x34>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    7c02:	68bb      	ldr	r3, [r7, #8]
    7c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c06:	2b00      	cmp	r3, #0
    7c08:	d102      	bne.n	7c10 <xTaskIsTaskSuspended+0x34>
				{
					xReturn = pdTRUE;
    7c0a:	f04f 0301 	mov.w	r3, #1
    7c0e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    7c10:	68fb      	ldr	r3, [r7, #12]
	}
    7c12:	4618      	mov	r0, r3
    7c14:	f107 0714 	add.w	r7, r7, #20
    7c18:	46bd      	mov	sp, r7
    7c1a:	bc80      	pop	{r7}
    7c1c:	4770      	bx	lr
    7c1e:	bf00      	nop
    7c20:	2000458c 	.word	0x2000458c
    7c24:	20004560 	.word	0x20004560

00007c28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    7c28:	b580      	push	{r7, lr}
    7c2a:	b084      	sub	sp, #16
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    7c34:	68fb      	ldr	r3, [r7, #12]
    7c36:	2b00      	cmp	r3, #0
    7c38:	d039      	beq.n	7cae <vTaskResume+0x86>
    7c3a:	4b1f      	ldr	r3, [pc, #124]	; (7cb8 <vTaskResume+0x90>)
    7c3c:	681b      	ldr	r3, [r3, #0]
    7c3e:	68fa      	ldr	r2, [r7, #12]
    7c40:	429a      	cmp	r2, r3
    7c42:	d034      	beq.n	7cae <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    7c44:	f000 fe20 	bl	8888 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    7c48:	68f8      	ldr	r0, [r7, #12]
    7c4a:	f7ff ffc7 	bl	7bdc <xTaskIsTaskSuspended>
    7c4e:	4603      	mov	r3, r0
    7c50:	2b01      	cmp	r3, #1
    7c52:	d12a      	bne.n	7caa <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	f103 0304 	add.w	r3, r3, #4
    7c5a:	4618      	mov	r0, r3
    7c5c:	f7ff f8dc 	bl	6e18 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7c60:	68fb      	ldr	r3, [r7, #12]
    7c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c64:	4b15      	ldr	r3, [pc, #84]	; (7cbc <vTaskResume+0x94>)
    7c66:	681b      	ldr	r3, [r3, #0]
    7c68:	429a      	cmp	r2, r3
    7c6a:	d903      	bls.n	7c74 <vTaskResume+0x4c>
    7c6c:	68fb      	ldr	r3, [r7, #12]
    7c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c70:	4b12      	ldr	r3, [pc, #72]	; (7cbc <vTaskResume+0x94>)
    7c72:	601a      	str	r2, [r3, #0]
    7c74:	68fb      	ldr	r3, [r7, #12]
    7c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c78:	4613      	mov	r3, r2
    7c7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7c7e:	189b      	adds	r3, r3, r2
    7c80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7c84:	461a      	mov	r2, r3
    7c86:	4b0e      	ldr	r3, [pc, #56]	; (7cc0 <vTaskResume+0x98>)
    7c88:	18d2      	adds	r2, r2, r3
    7c8a:	68fb      	ldr	r3, [r7, #12]
    7c8c:	f103 0304 	add.w	r3, r3, #4
    7c90:	4610      	mov	r0, r2
    7c92:	4619      	mov	r1, r3
    7c94:	f7ff f85e 	bl	6d54 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7c98:	68fb      	ldr	r3, [r7, #12]
    7c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c9c:	4b06      	ldr	r3, [pc, #24]	; (7cb8 <vTaskResume+0x90>)
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ca2:	429a      	cmp	r2, r3
    7ca4:	d301      	bcc.n	7caa <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    7ca6:	f000 fde3 	bl	8870 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    7caa:	f000 fdff 	bl	88ac <vPortExitCritical>
		}
	}
    7cae:	f107 0710 	add.w	r7, r7, #16
    7cb2:	46bd      	mov	sp, r7
    7cb4:	bd80      	pop	{r7, pc}
    7cb6:	bf00      	nop
    7cb8:	200044c8 	.word	0x200044c8
    7cbc:	200045ac 	.word	0x200045ac
    7cc0:	200044cc 	.word	0x200044cc

00007cc4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    7cc4:	b580      	push	{r7, lr}
    7cc6:	b086      	sub	sp, #24
    7cc8:	af00      	add	r7, sp, #0
    7cca:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    7ccc:	f04f 0300 	mov.w	r3, #0
    7cd0:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    7cd2:	687b      	ldr	r3, [r7, #4]
    7cd4:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7cd6:	f04f 0300 	mov.w	r3, #0
    7cda:	60fb      	str	r3, [r7, #12]
    7cdc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7ce0:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    7ce4:	6938      	ldr	r0, [r7, #16]
    7ce6:	f7ff ff79 	bl	7bdc <xTaskIsTaskSuspended>
    7cea:	4603      	mov	r3, r0
    7cec:	2b01      	cmp	r3, #1
    7cee:	d137      	bne.n	7d60 <xTaskResumeFromISR+0x9c>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7cf0:	4b20      	ldr	r3, [pc, #128]	; (7d74 <xTaskResumeFromISR+0xb0>)
    7cf2:	681b      	ldr	r3, [r3, #0]
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d12c      	bne.n	7d52 <xTaskResumeFromISR+0x8e>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    7cf8:	693b      	ldr	r3, [r7, #16]
    7cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7cfc:	4b1e      	ldr	r3, [pc, #120]	; (7d78 <xTaskResumeFromISR+0xb4>)
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d02:	429a      	cmp	r2, r3
    7d04:	bf34      	ite	cc
    7d06:	2300      	movcc	r3, #0
    7d08:	2301      	movcs	r3, #1
    7d0a:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    7d0c:	693b      	ldr	r3, [r7, #16]
    7d0e:	f103 0304 	add.w	r3, r3, #4
    7d12:	4618      	mov	r0, r3
    7d14:	f7ff f880 	bl	6e18 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7d18:	693b      	ldr	r3, [r7, #16]
    7d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d1c:	4b17      	ldr	r3, [pc, #92]	; (7d7c <xTaskResumeFromISR+0xb8>)
    7d1e:	681b      	ldr	r3, [r3, #0]
    7d20:	429a      	cmp	r2, r3
    7d22:	d903      	bls.n	7d2c <xTaskResumeFromISR+0x68>
    7d24:	693b      	ldr	r3, [r7, #16]
    7d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d28:	4b14      	ldr	r3, [pc, #80]	; (7d7c <xTaskResumeFromISR+0xb8>)
    7d2a:	601a      	str	r2, [r3, #0]
    7d2c:	693b      	ldr	r3, [r7, #16]
    7d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d30:	4613      	mov	r3, r2
    7d32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7d36:	189b      	adds	r3, r3, r2
    7d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7d3c:	461a      	mov	r2, r3
    7d3e:	4b10      	ldr	r3, [pc, #64]	; (7d80 <xTaskResumeFromISR+0xbc>)
    7d40:	18d2      	adds	r2, r2, r3
    7d42:	693b      	ldr	r3, [r7, #16]
    7d44:	f103 0304 	add.w	r3, r3, #4
    7d48:	4610      	mov	r0, r2
    7d4a:	4619      	mov	r1, r3
    7d4c:	f7ff f802 	bl	6d54 <vListInsertEnd>
    7d50:	e006      	b.n	7d60 <xTaskResumeFromISR+0x9c>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7d52:	693b      	ldr	r3, [r7, #16]
    7d54:	f103 0318 	add.w	r3, r3, #24
    7d58:	480a      	ldr	r0, [pc, #40]	; (7d84 <xTaskResumeFromISR+0xc0>)
    7d5a:	4619      	mov	r1, r3
    7d5c:	f7fe fffa 	bl	6d54 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7d60:	f04f 0000 	mov.w	r0, #0
    7d64:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    7d68:	697b      	ldr	r3, [r7, #20]
	}
    7d6a:	4618      	mov	r0, r3
    7d6c:	f107 0718 	add.w	r7, r7, #24
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}
    7d74:	200045b4 	.word	0x200045b4
    7d78:	200044c8 	.word	0x200044c8
    7d7c:	200045ac 	.word	0x200045ac
    7d80:	200044cc 	.word	0x200044cc
    7d84:	20004560 	.word	0x20004560

00007d88 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b086      	sub	sp, #24
    7d8c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    7d8e:	4b15      	ldr	r3, [pc, #84]	; (7de4 <vTaskStartScheduler+0x5c>)
    7d90:	f04f 0200 	mov.w	r2, #0
    7d94:	9200      	str	r2, [sp, #0]
    7d96:	f04f 0200 	mov.w	r2, #0
    7d9a:	9201      	str	r2, [sp, #4]
    7d9c:	f04f 0200 	mov.w	r2, #0
    7da0:	9202      	str	r2, [sp, #8]
    7da2:	f04f 0200 	mov.w	r2, #0
    7da6:	9203      	str	r2, [sp, #12]
    7da8:	480f      	ldr	r0, [pc, #60]	; (7de8 <vTaskStartScheduler+0x60>)
    7daa:	4619      	mov	r1, r3
    7dac:	f04f 0280 	mov.w	r2, #128	; 0x80
    7db0:	f04f 0300 	mov.w	r3, #0
    7db4:	f7ff fc9c 	bl	76f0 <xTaskGenericCreate>
    7db8:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	2b01      	cmp	r3, #1
    7dbe:	d10d      	bne.n	7ddc <vTaskStartScheduler+0x54>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    7dc0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7dc4:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    7dc8:	4b08      	ldr	r3, [pc, #32]	; (7dec <vTaskStartScheduler+0x64>)
    7dca:	f04f 0201 	mov.w	r2, #1
    7dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    7dd0:	4b07      	ldr	r3, [pc, #28]	; (7df0 <vTaskStartScheduler+0x68>)
    7dd2:	f04f 0200 	mov.w	r2, #0
    7dd6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7dd8:	f000 fd26 	bl	8828 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    7ddc:	f107 0708 	add.w	r7, r7, #8
    7de0:	46bd      	mov	sp, r7
    7de2:	bd80      	pop	{r7, pc}
    7de4:	00008fcc 	.word	0x00008fcc
    7de8:	00008399 	.word	0x00008399
    7dec:	200045b0 	.word	0x200045b0
    7df0:	200045a4 	.word	0x200045a4

00007df4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    7df4:	b580      	push	{r7, lr}
    7df6:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    7df8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7dfc:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <vTaskEndScheduler+0x1c>)
    7e02:	f04f 0200 	mov.w	r2, #0
    7e06:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    7e08:	f000 fd2c 	bl	8864 <vPortEndScheduler>
}
    7e0c:	bd80      	pop	{r7, pc}
    7e0e:	bf00      	nop
    7e10:	200045b0 	.word	0x200045b0

00007e14 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    7e14:	b480      	push	{r7}
    7e16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    7e18:	4b04      	ldr	r3, [pc, #16]	; (7e2c <vTaskSuspendAll+0x18>)
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	f103 0201 	add.w	r2, r3, #1
    7e20:	4b02      	ldr	r3, [pc, #8]	; (7e2c <vTaskSuspendAll+0x18>)
    7e22:	601a      	str	r2, [r3, #0]
}
    7e24:	46bd      	mov	sp, r7
    7e26:	bc80      	pop	{r7}
    7e28:	4770      	bx	lr
    7e2a:	bf00      	nop
    7e2c:	200045b4 	.word	0x200045b4

00007e30 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    7e30:	b590      	push	{r4, r7, lr}
    7e32:	b083      	sub	sp, #12
    7e34:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    7e36:	f04f 0300 	mov.w	r3, #0
    7e3a:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7e3c:	f000 fd24 	bl	8888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    7e40:	4b38      	ldr	r3, [pc, #224]	; (7f24 <xTaskResumeAll+0xf4>)
    7e42:	681b      	ldr	r3, [r3, #0]
    7e44:	f103 32ff 	add.w	r2, r3, #4294967295
    7e48:	4b36      	ldr	r3, [pc, #216]	; (7f24 <xTaskResumeAll+0xf4>)
    7e4a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7e4c:	4b35      	ldr	r3, [pc, #212]	; (7f24 <xTaskResumeAll+0xf4>)
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	2b00      	cmp	r3, #0
    7e52:	d15e      	bne.n	7f12 <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    7e54:	4b34      	ldr	r3, [pc, #208]	; (7f28 <xTaskResumeAll+0xf8>)
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	2b00      	cmp	r3, #0
    7e5a:	d05a      	beq.n	7f12 <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    7e5c:	f04f 0300 	mov.w	r3, #0
    7e60:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    7e62:	e02e      	b.n	7ec2 <xTaskResumeAll+0x92>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    7e64:	4b31      	ldr	r3, [pc, #196]	; (7f2c <xTaskResumeAll+0xfc>)
    7e66:	68db      	ldr	r3, [r3, #12]
    7e68:	68db      	ldr	r3, [r3, #12]
    7e6a:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
    7e6c:	f104 0318 	add.w	r3, r4, #24
    7e70:	4618      	mov	r0, r3
    7e72:	f7fe ffd1 	bl	6e18 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    7e76:	f104 0304 	add.w	r3, r4, #4
    7e7a:	4618      	mov	r0, r3
    7e7c:	f7fe ffcc 	bl	6e18 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7e80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7e82:	4b2b      	ldr	r3, [pc, #172]	; (7f30 <xTaskResumeAll+0x100>)
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	429a      	cmp	r2, r3
    7e88:	d902      	bls.n	7e90 <xTaskResumeAll+0x60>
    7e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7e8c:	4b28      	ldr	r3, [pc, #160]	; (7f30 <xTaskResumeAll+0x100>)
    7e8e:	601a      	str	r2, [r3, #0]
    7e90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7e92:	4613      	mov	r3, r2
    7e94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7e98:	189b      	adds	r3, r3, r2
    7e9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7e9e:	461a      	mov	r2, r3
    7ea0:	4b24      	ldr	r3, [pc, #144]	; (7f34 <xTaskResumeAll+0x104>)
    7ea2:	18d2      	adds	r2, r2, r3
    7ea4:	f104 0304 	add.w	r3, r4, #4
    7ea8:	4610      	mov	r0, r2
    7eaa:	4619      	mov	r1, r3
    7eac:	f7fe ff52 	bl	6d54 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7eb2:	4b21      	ldr	r3, [pc, #132]	; (7f38 <xTaskResumeAll+0x108>)
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7eb8:	429a      	cmp	r2, r3
    7eba:	d302      	bcc.n	7ec2 <xTaskResumeAll+0x92>
					{
						xYieldRequired = pdTRUE;
    7ebc:	f04f 0301 	mov.w	r3, #1
    7ec0:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    7ec2:	4b1a      	ldr	r3, [pc, #104]	; (7f2c <xTaskResumeAll+0xfc>)
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d1cc      	bne.n	7e64 <xTaskResumeAll+0x34>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7eca:	4b1c      	ldr	r3, [pc, #112]	; (7f3c <xTaskResumeAll+0x10c>)
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d00f      	beq.n	7ef2 <xTaskResumeAll+0xc2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7ed2:	e007      	b.n	7ee4 <xTaskResumeAll+0xb4>
					{
						vTaskIncrementTick();
    7ed4:	f000 f86c 	bl	7fb0 <vTaskIncrementTick>
						--uxMissedTicks;
    7ed8:	4b18      	ldr	r3, [pc, #96]	; (7f3c <xTaskResumeAll+0x10c>)
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	f103 32ff 	add.w	r2, r3, #4294967295
    7ee0:	4b16      	ldr	r3, [pc, #88]	; (7f3c <xTaskResumeAll+0x10c>)
    7ee2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7ee4:	4b15      	ldr	r3, [pc, #84]	; (7f3c <xTaskResumeAll+0x10c>)
    7ee6:	681b      	ldr	r3, [r3, #0]
    7ee8:	2b00      	cmp	r3, #0
    7eea:	d1f3      	bne.n	7ed4 <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    7eec:	f04f 0301 	mov.w	r3, #1
    7ef0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    7ef2:	683b      	ldr	r3, [r7, #0]
    7ef4:	2b01      	cmp	r3, #1
    7ef6:	d003      	beq.n	7f00 <xTaskResumeAll+0xd0>
    7ef8:	4b11      	ldr	r3, [pc, #68]	; (7f40 <xTaskResumeAll+0x110>)
    7efa:	681b      	ldr	r3, [r3, #0]
    7efc:	2b01      	cmp	r3, #1
    7efe:	d108      	bne.n	7f12 <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
    7f00:	f04f 0301 	mov.w	r3, #1
    7f04:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    7f06:	4b0e      	ldr	r3, [pc, #56]	; (7f40 <xTaskResumeAll+0x110>)
    7f08:	f04f 0200 	mov.w	r2, #0
    7f0c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    7f0e:	f000 fcaf 	bl	8870 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    7f12:	f000 fccb 	bl	88ac <vPortExitCritical>

	return xAlreadyYielded;
    7f16:	687b      	ldr	r3, [r7, #4]
}
    7f18:	4618      	mov	r0, r3
    7f1a:	f107 070c 	add.w	r7, r7, #12
    7f1e:	46bd      	mov	sp, r7
    7f20:	bd90      	pop	{r4, r7, pc}
    7f22:	bf00      	nop
    7f24:	200045b4 	.word	0x200045b4
    7f28:	200045a0 	.word	0x200045a0
    7f2c:	20004560 	.word	0x20004560
    7f30:	200045ac 	.word	0x200045ac
    7f34:	200044cc 	.word	0x200044cc
    7f38:	200044c8 	.word	0x200044c8
    7f3c:	200045b8 	.word	0x200045b8
    7f40:	200045bc 	.word	0x200045bc

00007f44 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    7f44:	b580      	push	{r7, lr}
    7f46:	b082      	sub	sp, #8
    7f48:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    7f4a:	f000 fc9d 	bl	8888 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    7f4e:	4b05      	ldr	r3, [pc, #20]	; (7f64 <xTaskGetTickCount+0x20>)
    7f50:	681b      	ldr	r3, [r3, #0]
    7f52:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    7f54:	f000 fcaa 	bl	88ac <vPortExitCritical>

	return xTicks;
    7f58:	687b      	ldr	r3, [r7, #4]
}
    7f5a:	4618      	mov	r0, r3
    7f5c:	f107 0708 	add.w	r7, r7, #8
    7f60:	46bd      	mov	sp, r7
    7f62:	bd80      	pop	{r7, pc}
    7f64:	200045a4 	.word	0x200045a4

00007f68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    7f68:	b480      	push	{r7}
    7f6a:	b083      	sub	sp, #12
    7f6c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7f6e:	f04f 0300 	mov.w	r3, #0
    7f72:	607b      	str	r3, [r7, #4]
    7f74:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7f78:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    7f7c:	4b06      	ldr	r3, [pc, #24]	; (7f98 <xTaskGetTickCountFromISR+0x30>)
    7f7e:	681b      	ldr	r3, [r3, #0]
    7f80:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7f82:	f04f 0000 	mov.w	r0, #0
    7f86:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    7f8a:	683b      	ldr	r3, [r7, #0]
}
    7f8c:	4618      	mov	r0, r3
    7f8e:	f107 070c 	add.w	r7, r7, #12
    7f92:	46bd      	mov	sp, r7
    7f94:	bc80      	pop	{r7}
    7f96:	4770      	bx	lr
    7f98:	200045a4 	.word	0x200045a4

00007f9c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    7f9c:	b480      	push	{r7}
    7f9e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    7fa0:	4b02      	ldr	r3, [pc, #8]	; (7fac <uxTaskGetNumberOfTasks+0x10>)
    7fa2:	681b      	ldr	r3, [r3, #0]
}
    7fa4:	4618      	mov	r0, r3
    7fa6:	46bd      	mov	sp, r7
    7fa8:	bc80      	pop	{r7}
    7faa:	4770      	bx	lr
    7fac:	200045a0 	.word	0x200045a0

00007fb0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    7fb0:	b580      	push	{r7, lr}
    7fb2:	b084      	sub	sp, #16
    7fb4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7fb6:	4b48      	ldr	r3, [pc, #288]	; (80d8 <vTaskIncrementTick+0x128>)
    7fb8:	681b      	ldr	r3, [r3, #0]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d17a      	bne.n	80b4 <vTaskIncrementTick+0x104>
	{
		++xTickCount;
    7fbe:	4b47      	ldr	r3, [pc, #284]	; (80dc <vTaskIncrementTick+0x12c>)
    7fc0:	681b      	ldr	r3, [r3, #0]
    7fc2:	f103 0201 	add.w	r2, r3, #1
    7fc6:	4b45      	ldr	r3, [pc, #276]	; (80dc <vTaskIncrementTick+0x12c>)
    7fc8:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    7fca:	4b44      	ldr	r3, [pc, #272]	; (80dc <vTaskIncrementTick+0x12c>)
    7fcc:	681b      	ldr	r3, [r3, #0]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d122      	bne.n	8018 <vTaskIncrementTick+0x68>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    7fd2:	4b43      	ldr	r3, [pc, #268]	; (80e0 <vTaskIncrementTick+0x130>)
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    7fd8:	4b42      	ldr	r3, [pc, #264]	; (80e4 <vTaskIncrementTick+0x134>)
    7fda:	681a      	ldr	r2, [r3, #0]
    7fdc:	4b40      	ldr	r3, [pc, #256]	; (80e0 <vTaskIncrementTick+0x130>)
    7fde:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    7fe0:	4b40      	ldr	r3, [pc, #256]	; (80e4 <vTaskIncrementTick+0x134>)
    7fe2:	68fa      	ldr	r2, [r7, #12]
    7fe4:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    7fe6:	4b40      	ldr	r3, [pc, #256]	; (80e8 <vTaskIncrementTick+0x138>)
    7fe8:	681b      	ldr	r3, [r3, #0]
    7fea:	f103 0201 	add.w	r2, r3, #1
    7fee:	4b3e      	ldr	r3, [pc, #248]	; (80e8 <vTaskIncrementTick+0x138>)
    7ff0:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7ff2:	4b3b      	ldr	r3, [pc, #236]	; (80e0 <vTaskIncrementTick+0x130>)
    7ff4:	681b      	ldr	r3, [r3, #0]
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d104      	bne.n	8006 <vTaskIncrementTick+0x56>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    7ffc:	4b3b      	ldr	r3, [pc, #236]	; (80ec <vTaskIncrementTick+0x13c>)
    7ffe:	f04f 32ff 	mov.w	r2, #4294967295
    8002:	601a      	str	r2, [r3, #0]
    8004:	e008      	b.n	8018 <vTaskIncrementTick+0x68>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8006:	4b36      	ldr	r3, [pc, #216]	; (80e0 <vTaskIncrementTick+0x130>)
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	68db      	ldr	r3, [r3, #12]
    800c:	68db      	ldr	r3, [r3, #12]
    800e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    8010:	68bb      	ldr	r3, [r7, #8]
    8012:	685a      	ldr	r2, [r3, #4]
    8014:	4b35      	ldr	r3, [pc, #212]	; (80ec <vTaskIncrementTick+0x13c>)
    8016:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    8018:	4b30      	ldr	r3, [pc, #192]	; (80dc <vTaskIncrementTick+0x12c>)
    801a:	681a      	ldr	r2, [r3, #0]
    801c:	4b33      	ldr	r3, [pc, #204]	; (80ec <vTaskIncrementTick+0x13c>)
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	429a      	cmp	r2, r3
    8022:	d34f      	bcc.n	80c4 <vTaskIncrementTick+0x114>
    8024:	4b2e      	ldr	r3, [pc, #184]	; (80e0 <vTaskIncrementTick+0x130>)
    8026:	681b      	ldr	r3, [r3, #0]
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	2b00      	cmp	r3, #0
    802c:	d104      	bne.n	8038 <vTaskIncrementTick+0x88>
    802e:	4b2f      	ldr	r3, [pc, #188]	; (80ec <vTaskIncrementTick+0x13c>)
    8030:	f04f 32ff 	mov.w	r2, #4294967295
    8034:	601a      	str	r2, [r3, #0]
    8036:	e045      	b.n	80c4 <vTaskIncrementTick+0x114>
    8038:	4b29      	ldr	r3, [pc, #164]	; (80e0 <vTaskIncrementTick+0x130>)
    803a:	681b      	ldr	r3, [r3, #0]
    803c:	68db      	ldr	r3, [r3, #12]
    803e:	68db      	ldr	r3, [r3, #12]
    8040:	60bb      	str	r3, [r7, #8]
    8042:	68bb      	ldr	r3, [r7, #8]
    8044:	685b      	ldr	r3, [r3, #4]
    8046:	607b      	str	r3, [r7, #4]
    8048:	4b24      	ldr	r3, [pc, #144]	; (80dc <vTaskIncrementTick+0x12c>)
    804a:	681a      	ldr	r2, [r3, #0]
    804c:	687b      	ldr	r3, [r7, #4]
    804e:	429a      	cmp	r2, r3
    8050:	d203      	bcs.n	805a <vTaskIncrementTick+0xaa>
    8052:	4b26      	ldr	r3, [pc, #152]	; (80ec <vTaskIncrementTick+0x13c>)
    8054:	687a      	ldr	r2, [r7, #4]
    8056:	601a      	str	r2, [r3, #0]
    8058:	e034      	b.n	80c4 <vTaskIncrementTick+0x114>
    805a:	68bb      	ldr	r3, [r7, #8]
    805c:	f103 0304 	add.w	r3, r3, #4
    8060:	4618      	mov	r0, r3
    8062:	f7fe fed9 	bl	6e18 <vListRemove>
    8066:	68bb      	ldr	r3, [r7, #8]
    8068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    806a:	2b00      	cmp	r3, #0
    806c:	d005      	beq.n	807a <vTaskIncrementTick+0xca>
    806e:	68bb      	ldr	r3, [r7, #8]
    8070:	f103 0318 	add.w	r3, r3, #24
    8074:	4618      	mov	r0, r3
    8076:	f7fe fecf 	bl	6e18 <vListRemove>
    807a:	68bb      	ldr	r3, [r7, #8]
    807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    807e:	4b1c      	ldr	r3, [pc, #112]	; (80f0 <vTaskIncrementTick+0x140>)
    8080:	681b      	ldr	r3, [r3, #0]
    8082:	429a      	cmp	r2, r3
    8084:	d903      	bls.n	808e <vTaskIncrementTick+0xde>
    8086:	68bb      	ldr	r3, [r7, #8]
    8088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    808a:	4b19      	ldr	r3, [pc, #100]	; (80f0 <vTaskIncrementTick+0x140>)
    808c:	601a      	str	r2, [r3, #0]
    808e:	68bb      	ldr	r3, [r7, #8]
    8090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8092:	4613      	mov	r3, r2
    8094:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8098:	189b      	adds	r3, r3, r2
    809a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    809e:	461a      	mov	r2, r3
    80a0:	4b14      	ldr	r3, [pc, #80]	; (80f4 <vTaskIncrementTick+0x144>)
    80a2:	18d2      	adds	r2, r2, r3
    80a4:	68bb      	ldr	r3, [r7, #8]
    80a6:	f103 0304 	add.w	r3, r3, #4
    80aa:	4610      	mov	r0, r2
    80ac:	4619      	mov	r1, r3
    80ae:	f7fe fe51 	bl	6d54 <vListInsertEnd>
    80b2:	e7b7      	b.n	8024 <vTaskIncrementTick+0x74>
	}
	else
	{
		++uxMissedTicks;
    80b4:	4b10      	ldr	r3, [pc, #64]	; (80f8 <vTaskIncrementTick+0x148>)
    80b6:	681b      	ldr	r3, [r3, #0]
    80b8:	f103 0201 	add.w	r2, r3, #1
    80bc:	4b0e      	ldr	r3, [pc, #56]	; (80f8 <vTaskIncrementTick+0x148>)
    80be:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    80c0:	f7f8 faae 	bl	620 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    80c4:	4b0c      	ldr	r3, [pc, #48]	; (80f8 <vTaskIncrementTick+0x148>)
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	2b00      	cmp	r3, #0
    80ca:	d101      	bne.n	80d0 <vTaskIncrementTick+0x120>
		{
			vApplicationTickHook();
    80cc:	f7f8 faa8 	bl	620 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    80d0:	f107 0710 	add.w	r7, r7, #16
    80d4:	46bd      	mov	sp, r7
    80d6:	bd80      	pop	{r7, pc}
    80d8:	200045b4 	.word	0x200045b4
    80dc:	200045a4 	.word	0x200045a4
    80e0:	20004558 	.word	0x20004558
    80e4:	2000455c 	.word	0x2000455c
    80e8:	200045c0 	.word	0x200045c0
    80ec:	20000028 	.word	0x20000028
    80f0:	200045ac 	.word	0x200045ac
    80f4:	200044cc 	.word	0x200044cc
    80f8:	200045b8 	.word	0x200045b8

000080fc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    80fc:	b480      	push	{r7}
    80fe:	b083      	sub	sp, #12
    8100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    8102:	4b23      	ldr	r3, [pc, #140]	; (8190 <vTaskSwitchContext+0x94>)
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	2b00      	cmp	r3, #0
    8108:	d00b      	beq.n	8122 <vTaskSwitchContext+0x26>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    810a:	4b22      	ldr	r3, [pc, #136]	; (8194 <vTaskSwitchContext+0x98>)
    810c:	f04f 0201 	mov.w	r2, #1
    8110:	601a      	str	r2, [r3, #0]
    8112:	e038      	b.n	8186 <vTaskSwitchContext+0x8a>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    8114:	4b20      	ldr	r3, [pc, #128]	; (8198 <vTaskSwitchContext+0x9c>)
    8116:	681b      	ldr	r3, [r3, #0]
    8118:	f103 32ff 	add.w	r2, r3, #4294967295
    811c:	4b1e      	ldr	r3, [pc, #120]	; (8198 <vTaskSwitchContext+0x9c>)
    811e:	601a      	str	r2, [r3, #0]
    8120:	e000      	b.n	8124 <vTaskSwitchContext+0x28>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    8122:	bf00      	nop
    8124:	4b1c      	ldr	r3, [pc, #112]	; (8198 <vTaskSwitchContext+0x9c>)
    8126:	681a      	ldr	r2, [r3, #0]
    8128:	4613      	mov	r3, r2
    812a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    812e:	189b      	adds	r3, r3, r2
    8130:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8134:	461a      	mov	r2, r3
    8136:	4b19      	ldr	r3, [pc, #100]	; (819c <vTaskSwitchContext+0xa0>)
    8138:	18d3      	adds	r3, r2, r3
    813a:	681b      	ldr	r3, [r3, #0]
    813c:	2b00      	cmp	r3, #0
    813e:	d0e9      	beq.n	8114 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    8140:	4b15      	ldr	r3, [pc, #84]	; (8198 <vTaskSwitchContext+0x9c>)
    8142:	681a      	ldr	r2, [r3, #0]
    8144:	4613      	mov	r3, r2
    8146:	ea4f 0383 	mov.w	r3, r3, lsl #2
    814a:	189b      	adds	r3, r3, r2
    814c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8150:	461a      	mov	r2, r3
    8152:	4b12      	ldr	r3, [pc, #72]	; (819c <vTaskSwitchContext+0xa0>)
    8154:	18d3      	adds	r3, r2, r3
    8156:	607b      	str	r3, [r7, #4]
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	685b      	ldr	r3, [r3, #4]
    815c:	685a      	ldr	r2, [r3, #4]
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	605a      	str	r2, [r3, #4]
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	685a      	ldr	r2, [r3, #4]
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	f103 0308 	add.w	r3, r3, #8
    816c:	429a      	cmp	r2, r3
    816e:	d104      	bne.n	817a <vTaskSwitchContext+0x7e>
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	685b      	ldr	r3, [r3, #4]
    8174:	685a      	ldr	r2, [r3, #4]
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	605a      	str	r2, [r3, #4]
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	685b      	ldr	r3, [r3, #4]
    817e:	68db      	ldr	r3, [r3, #12]
    8180:	461a      	mov	r2, r3
    8182:	4b07      	ldr	r3, [pc, #28]	; (81a0 <vTaskSwitchContext+0xa4>)
    8184:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    8186:	f107 070c 	add.w	r7, r7, #12
    818a:	46bd      	mov	sp, r7
    818c:	bc80      	pop	{r7}
    818e:	4770      	bx	lr
    8190:	200045b4 	.word	0x200045b4
    8194:	200045bc 	.word	0x200045bc
    8198:	200045ac 	.word	0x200045ac
    819c:	200044cc 	.word	0x200044cc
    81a0:	200044c8 	.word	0x200044c8

000081a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    81a4:	b580      	push	{r7, lr}
    81a6:	b084      	sub	sp, #16
    81a8:	af00      	add	r7, sp, #0
    81aa:	6078      	str	r0, [r7, #4]
    81ac:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    81ae:	4b14      	ldr	r3, [pc, #80]	; (8200 <vTaskPlaceOnEventList+0x5c>)
    81b0:	681b      	ldr	r3, [r3, #0]
    81b2:	f103 0318 	add.w	r3, r3, #24
    81b6:	6878      	ldr	r0, [r7, #4]
    81b8:	4619      	mov	r1, r3
    81ba:	f7fe fdf3 	bl	6da4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    81be:	4b10      	ldr	r3, [pc, #64]	; (8200 <vTaskPlaceOnEventList+0x5c>)
    81c0:	681b      	ldr	r3, [r3, #0]
    81c2:	f103 0304 	add.w	r3, r3, #4
    81c6:	4618      	mov	r0, r3
    81c8:	f7fe fe26 	bl	6e18 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    81cc:	683b      	ldr	r3, [r7, #0]
    81ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    81d2:	d108      	bne.n	81e6 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    81d4:	4b0a      	ldr	r3, [pc, #40]	; (8200 <vTaskPlaceOnEventList+0x5c>)
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	f103 0304 	add.w	r3, r3, #4
    81dc:	4809      	ldr	r0, [pc, #36]	; (8204 <vTaskPlaceOnEventList+0x60>)
    81de:	4619      	mov	r1, r3
    81e0:	f7fe fdb8 	bl	6d54 <vListInsertEnd>
    81e4:	e007      	b.n	81f6 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    81e6:	4b08      	ldr	r3, [pc, #32]	; (8208 <vTaskPlaceOnEventList+0x64>)
    81e8:	681a      	ldr	r2, [r3, #0]
    81ea:	683b      	ldr	r3, [r7, #0]
    81ec:	18d3      	adds	r3, r2, r3
    81ee:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    81f0:	68f8      	ldr	r0, [r7, #12]
    81f2:	f000 f9a1 	bl	8538 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    81f6:	f107 0710 	add.w	r7, r7, #16
    81fa:	46bd      	mov	sp, r7
    81fc:	bd80      	pop	{r7, pc}
    81fe:	bf00      	nop
    8200:	200044c8 	.word	0x200044c8
    8204:	2000458c 	.word	0x2000458c
    8208:	200045a4 	.word	0x200045a4

0000820c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    820c:	b580      	push	{r7, lr}
    820e:	b084      	sub	sp, #16
    8210:	af00      	add	r7, sp, #0
    8212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	68db      	ldr	r3, [r3, #12]
    8218:	68db      	ldr	r3, [r3, #12]
    821a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    821c:	68bb      	ldr	r3, [r7, #8]
    821e:	f103 0318 	add.w	r3, r3, #24
    8222:	4618      	mov	r0, r3
    8224:	f7fe fdf8 	bl	6e18 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    8228:	4b20      	ldr	r3, [pc, #128]	; (82ac <xTaskRemoveFromEventList+0xa0>)
    822a:	681b      	ldr	r3, [r3, #0]
    822c:	2b00      	cmp	r3, #0
    822e:	d122      	bne.n	8276 <xTaskRemoveFromEventList+0x6a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    8230:	68bb      	ldr	r3, [r7, #8]
    8232:	f103 0304 	add.w	r3, r3, #4
    8236:	4618      	mov	r0, r3
    8238:	f7fe fdee 	bl	6e18 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    823c:	68bb      	ldr	r3, [r7, #8]
    823e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8240:	4b1b      	ldr	r3, [pc, #108]	; (82b0 <xTaskRemoveFromEventList+0xa4>)
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	429a      	cmp	r2, r3
    8246:	d903      	bls.n	8250 <xTaskRemoveFromEventList+0x44>
    8248:	68bb      	ldr	r3, [r7, #8]
    824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    824c:	4b18      	ldr	r3, [pc, #96]	; (82b0 <xTaskRemoveFromEventList+0xa4>)
    824e:	601a      	str	r2, [r3, #0]
    8250:	68bb      	ldr	r3, [r7, #8]
    8252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8254:	4613      	mov	r3, r2
    8256:	ea4f 0383 	mov.w	r3, r3, lsl #2
    825a:	189b      	adds	r3, r3, r2
    825c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8260:	461a      	mov	r2, r3
    8262:	4b14      	ldr	r3, [pc, #80]	; (82b4 <xTaskRemoveFromEventList+0xa8>)
    8264:	18d2      	adds	r2, r2, r3
    8266:	68bb      	ldr	r3, [r7, #8]
    8268:	f103 0304 	add.w	r3, r3, #4
    826c:	4610      	mov	r0, r2
    826e:	4619      	mov	r1, r3
    8270:	f7fe fd70 	bl	6d54 <vListInsertEnd>
    8274:	e006      	b.n	8284 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    8276:	68bb      	ldr	r3, [r7, #8]
    8278:	f103 0318 	add.w	r3, r3, #24
    827c:	480e      	ldr	r0, [pc, #56]	; (82b8 <xTaskRemoveFromEventList+0xac>)
    827e:	4619      	mov	r1, r3
    8280:	f7fe fd68 	bl	6d54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8284:	68bb      	ldr	r3, [r7, #8]
    8286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8288:	4b0c      	ldr	r3, [pc, #48]	; (82bc <xTaskRemoveFromEventList+0xb0>)
    828a:	681b      	ldr	r3, [r3, #0]
    828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    828e:	429a      	cmp	r2, r3
    8290:	d303      	bcc.n	829a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    8292:	f04f 0301 	mov.w	r3, #1
    8296:	60fb      	str	r3, [r7, #12]
    8298:	e002      	b.n	82a0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    829a:	f04f 0300 	mov.w	r3, #0
    829e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    82a0:	68fb      	ldr	r3, [r7, #12]
}
    82a2:	4618      	mov	r0, r3
    82a4:	f107 0710 	add.w	r7, r7, #16
    82a8:	46bd      	mov	sp, r7
    82aa:	bd80      	pop	{r7, pc}
    82ac:	200045b4 	.word	0x200045b4
    82b0:	200045ac 	.word	0x200045ac
    82b4:	200044cc 	.word	0x200044cc
    82b8:	20004560 	.word	0x20004560
    82bc:	200044c8 	.word	0x200044c8

000082c0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    82c0:	b480      	push	{r7}
    82c2:	b083      	sub	sp, #12
    82c4:	af00      	add	r7, sp, #0
    82c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    82c8:	4b06      	ldr	r3, [pc, #24]	; (82e4 <vTaskSetTimeOutState+0x24>)
    82ca:	681a      	ldr	r2, [r3, #0]
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    82d0:	4b05      	ldr	r3, [pc, #20]	; (82e8 <vTaskSetTimeOutState+0x28>)
    82d2:	681a      	ldr	r2, [r3, #0]
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	605a      	str	r2, [r3, #4]
}
    82d8:	f107 070c 	add.w	r7, r7, #12
    82dc:	46bd      	mov	sp, r7
    82de:	bc80      	pop	{r7}
    82e0:	4770      	bx	lr
    82e2:	bf00      	nop
    82e4:	200045c0 	.word	0x200045c0
    82e8:	200045a4 	.word	0x200045a4

000082ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    82ec:	b580      	push	{r7, lr}
    82ee:	b084      	sub	sp, #16
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
    82f4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    82f6:	f000 fac7 	bl	8888 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    82fa:	683b      	ldr	r3, [r7, #0]
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    8302:	d103      	bne.n	830c <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    8304:	f04f 0300 	mov.w	r3, #0
    8308:	60fb      	str	r3, [r7, #12]
    830a:	e02c      	b.n	8366 <xTaskCheckForTimeOut+0x7a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	681a      	ldr	r2, [r3, #0]
    8310:	4b19      	ldr	r3, [pc, #100]	; (8378 <xTaskCheckForTimeOut+0x8c>)
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	429a      	cmp	r2, r3
    8316:	d009      	beq.n	832c <xTaskCheckForTimeOut+0x40>
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	685a      	ldr	r2, [r3, #4]
    831c:	4b17      	ldr	r3, [pc, #92]	; (837c <xTaskCheckForTimeOut+0x90>)
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	429a      	cmp	r2, r3
    8322:	d803      	bhi.n	832c <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    8324:	f04f 0301 	mov.w	r3, #1
    8328:	60fb      	str	r3, [r7, #12]
    832a:	e01c      	b.n	8366 <xTaskCheckForTimeOut+0x7a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    832c:	4b13      	ldr	r3, [pc, #76]	; (837c <xTaskCheckForTimeOut+0x90>)
    832e:	681a      	ldr	r2, [r3, #0]
    8330:	687b      	ldr	r3, [r7, #4]
    8332:	685b      	ldr	r3, [r3, #4]
    8334:	1ad2      	subs	r2, r2, r3
    8336:	683b      	ldr	r3, [r7, #0]
    8338:	681b      	ldr	r3, [r3, #0]
    833a:	429a      	cmp	r2, r3
    833c:	d210      	bcs.n	8360 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    833e:	683b      	ldr	r3, [r7, #0]
    8340:	681a      	ldr	r2, [r3, #0]
    8342:	687b      	ldr	r3, [r7, #4]
    8344:	6859      	ldr	r1, [r3, #4]
    8346:	4b0d      	ldr	r3, [pc, #52]	; (837c <xTaskCheckForTimeOut+0x90>)
    8348:	681b      	ldr	r3, [r3, #0]
    834a:	1acb      	subs	r3, r1, r3
    834c:	18d2      	adds	r2, r2, r3
    834e:	683b      	ldr	r3, [r7, #0]
    8350:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    8352:	6878      	ldr	r0, [r7, #4]
    8354:	f7ff ffb4 	bl	82c0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    8358:	f04f 0300 	mov.w	r3, #0
    835c:	60fb      	str	r3, [r7, #12]
    835e:	e002      	b.n	8366 <xTaskCheckForTimeOut+0x7a>
		}
		else
		{
			xReturn = pdTRUE;
    8360:	f04f 0301 	mov.w	r3, #1
    8364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8366:	f000 faa1 	bl	88ac <vPortExitCritical>

	return xReturn;
    836a:	68fb      	ldr	r3, [r7, #12]
}
    836c:	4618      	mov	r0, r3
    836e:	f107 0710 	add.w	r7, r7, #16
    8372:	46bd      	mov	sp, r7
    8374:	bd80      	pop	{r7, pc}
    8376:	bf00      	nop
    8378:	200045c0 	.word	0x200045c0
    837c:	200045a4 	.word	0x200045a4

00008380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    8380:	b480      	push	{r7}
    8382:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    8384:	4b03      	ldr	r3, [pc, #12]	; (8394 <vTaskMissedYield+0x14>)
    8386:	f04f 0201 	mov.w	r2, #1
    838a:	601a      	str	r2, [r3, #0]
}
    838c:	46bd      	mov	sp, r7
    838e:	bc80      	pop	{r7}
    8390:	4770      	bx	lr
    8392:	bf00      	nop
    8394:	200045bc 	.word	0x200045bc

00008398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    8398:	b580      	push	{r7, lr}
    839a:	b082      	sub	sp, #8
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
    83a0:	e000      	b.n	83a4 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    83a2:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    83a4:	f000 f88c 	bl	84c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    83a8:	4b03      	ldr	r3, [pc, #12]	; (83b8 <prvIdleTask+0x20>)
    83aa:	681b      	ldr	r3, [r3, #0]
    83ac:	2b01      	cmp	r3, #1
    83ae:	d9f8      	bls.n	83a2 <prvIdleTask+0xa>
			{
				taskYIELD();
    83b0:	f000 fa5e 	bl	8870 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    83b4:	e7f6      	b.n	83a4 <prvIdleTask+0xc>
    83b6:	bf00      	nop
    83b8:	200044cc 	.word	0x200044cc

000083bc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	60f8      	str	r0, [r7, #12]
    83c4:	60b9      	str	r1, [r7, #8]
    83c6:	607a      	str	r2, [r7, #4]
    83c8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    83ca:	68fb      	ldr	r3, [r7, #12]
    83cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
    83d0:	461a      	mov	r2, r3
    83d2:	68bb      	ldr	r3, [r7, #8]
    83d4:	4610      	mov	r0, r2
    83d6:	4619      	mov	r1, r3
    83d8:	f04f 0210 	mov.w	r2, #16
    83dc:	f000 fd16 	bl	8e0c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    83e0:	68fb      	ldr	r3, [r7, #12]
    83e2:	f04f 0200 	mov.w	r2, #0
    83e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    83ea:	687b      	ldr	r3, [r7, #4]
    83ec:	2b04      	cmp	r3, #4
    83ee:	d902      	bls.n	83f6 <prvInitialiseTCBVariables+0x3a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    83f0:	f04f 0304 	mov.w	r3, #4
    83f4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    83f6:	68fb      	ldr	r3, [r7, #12]
    83f8:	687a      	ldr	r2, [r7, #4]
    83fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    83fc:	68fb      	ldr	r3, [r7, #12]
    83fe:	687a      	ldr	r2, [r7, #4]
    8400:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    8402:	68fb      	ldr	r3, [r7, #12]
    8404:	f103 0304 	add.w	r3, r3, #4
    8408:	4618      	mov	r0, r3
    840a:	f7fe fc95 	bl	6d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    840e:	68fb      	ldr	r3, [r7, #12]
    8410:	f103 0318 	add.w	r3, r3, #24
    8414:	4618      	mov	r0, r3
    8416:	f7fe fc8f 	bl	6d38 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    841a:	68fb      	ldr	r3, [r7, #12]
    841c:	68fa      	ldr	r2, [r7, #12]
    841e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	f1c3 0205 	rsb	r2, r3, #5
    8426:	68fb      	ldr	r3, [r7, #12]
    8428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    842a:	68fb      	ldr	r3, [r7, #12]
    842c:	68fa      	ldr	r2, [r7, #12]
    842e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    8430:	f107 0710 	add.w	r7, r7, #16
    8434:	46bd      	mov	sp, r7
    8436:	bd80      	pop	{r7, pc}

00008438 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    8438:	b580      	push	{r7, lr}
    843a:	b082      	sub	sp, #8
    843c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    843e:	f04f 0300 	mov.w	r3, #0
    8442:	607b      	str	r3, [r7, #4]
    8444:	e010      	b.n	8468 <prvInitialiseTaskLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    8446:	687a      	ldr	r2, [r7, #4]
    8448:	4613      	mov	r3, r2
    844a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    844e:	189b      	adds	r3, r3, r2
    8450:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8454:	461a      	mov	r2, r3
    8456:	4b12      	ldr	r3, [pc, #72]	; (84a0 <prvInitialiseTaskLists+0x68>)
    8458:	18d3      	adds	r3, r2, r3
    845a:	4618      	mov	r0, r3
    845c:	f7fe fc48 	bl	6cf0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	f103 0301 	add.w	r3, r3, #1
    8466:	607b      	str	r3, [r7, #4]
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	2b04      	cmp	r3, #4
    846c:	d9eb      	bls.n	8446 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    846e:	480d      	ldr	r0, [pc, #52]	; (84a4 <prvInitialiseTaskLists+0x6c>)
    8470:	f7fe fc3e 	bl	6cf0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    8474:	480c      	ldr	r0, [pc, #48]	; (84a8 <prvInitialiseTaskLists+0x70>)
    8476:	f7fe fc3b 	bl	6cf0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    847a:	480c      	ldr	r0, [pc, #48]	; (84ac <prvInitialiseTaskLists+0x74>)
    847c:	f7fe fc38 	bl	6cf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    8480:	480b      	ldr	r0, [pc, #44]	; (84b0 <prvInitialiseTaskLists+0x78>)
    8482:	f7fe fc35 	bl	6cf0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    8486:	480b      	ldr	r0, [pc, #44]	; (84b4 <prvInitialiseTaskLists+0x7c>)
    8488:	f7fe fc32 	bl	6cf0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    848c:	4b0a      	ldr	r3, [pc, #40]	; (84b8 <prvInitialiseTaskLists+0x80>)
    848e:	4a05      	ldr	r2, [pc, #20]	; (84a4 <prvInitialiseTaskLists+0x6c>)
    8490:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    8492:	4b0a      	ldr	r3, [pc, #40]	; (84bc <prvInitialiseTaskLists+0x84>)
    8494:	4a04      	ldr	r2, [pc, #16]	; (84a8 <prvInitialiseTaskLists+0x70>)
    8496:	601a      	str	r2, [r3, #0]
}
    8498:	f107 0708 	add.w	r7, r7, #8
    849c:	46bd      	mov	sp, r7
    849e:	bd80      	pop	{r7, pc}
    84a0:	200044cc 	.word	0x200044cc
    84a4:	20004530 	.word	0x20004530
    84a8:	20004544 	.word	0x20004544
    84ac:	20004560 	.word	0x20004560
    84b0:	20004574 	.word	0x20004574
    84b4:	2000458c 	.word	0x2000458c
    84b8:	20004558 	.word	0x20004558
    84bc:	2000455c 	.word	0x2000455c

000084c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b082      	sub	sp, #8
    84c4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    84c6:	4b19      	ldr	r3, [pc, #100]	; (852c <prvCheckTasksWaitingTermination+0x6c>)
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	2b00      	cmp	r3, #0
    84cc:	d02a      	beq.n	8524 <prvCheckTasksWaitingTermination+0x64>
		{
			vTaskSuspendAll();
    84ce:	f7ff fca1 	bl	7e14 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    84d2:	4b17      	ldr	r3, [pc, #92]	; (8530 <prvCheckTasksWaitingTermination+0x70>)
    84d4:	681b      	ldr	r3, [r3, #0]
    84d6:	2b00      	cmp	r3, #0
    84d8:	bf14      	ite	ne
    84da:	2300      	movne	r3, #0
    84dc:	2301      	moveq	r3, #1
    84de:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    84e0:	f7ff fca6 	bl	7e30 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	2b00      	cmp	r3, #0
    84e8:	d11c      	bne.n	8524 <prvCheckTasksWaitingTermination+0x64>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    84ea:	f000 f9cd 	bl	8888 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    84ee:	4b10      	ldr	r3, [pc, #64]	; (8530 <prvCheckTasksWaitingTermination+0x70>)
    84f0:	68db      	ldr	r3, [r3, #12]
    84f2:	68db      	ldr	r3, [r3, #12]
    84f4:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    84f6:	683b      	ldr	r3, [r7, #0]
    84f8:	f103 0304 	add.w	r3, r3, #4
    84fc:	4618      	mov	r0, r3
    84fe:	f7fe fc8b 	bl	6e18 <vListRemove>
					--uxCurrentNumberOfTasks;
    8502:	4b0c      	ldr	r3, [pc, #48]	; (8534 <prvCheckTasksWaitingTermination+0x74>)
    8504:	681b      	ldr	r3, [r3, #0]
    8506:	f103 32ff 	add.w	r2, r3, #4294967295
    850a:	4b0a      	ldr	r3, [pc, #40]	; (8534 <prvCheckTasksWaitingTermination+0x74>)
    850c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    850e:	4b07      	ldr	r3, [pc, #28]	; (852c <prvCheckTasksWaitingTermination+0x6c>)
    8510:	681b      	ldr	r3, [r3, #0]
    8512:	f103 32ff 	add.w	r2, r3, #4294967295
    8516:	4b05      	ldr	r3, [pc, #20]	; (852c <prvCheckTasksWaitingTermination+0x6c>)
    8518:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    851a:	f000 f9c7 	bl	88ac <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    851e:	6838      	ldr	r0, [r7, #0]
    8520:	f000 f87c 	bl	861c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    8524:	f107 0708 	add.w	r7, r7, #8
    8528:	46bd      	mov	sp, r7
    852a:	bd80      	pop	{r7, pc}
    852c:	20004588 	.word	0x20004588
    8530:	20004574 	.word	0x20004574
    8534:	200045a0 	.word	0x200045a0

00008538 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    8538:	b580      	push	{r7, lr}
    853a:	b082      	sub	sp, #8
    853c:	af00      	add	r7, sp, #0
    853e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    8540:	4b14      	ldr	r3, [pc, #80]	; (8594 <prvAddCurrentTaskToDelayedList+0x5c>)
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	687a      	ldr	r2, [r7, #4]
    8546:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    8548:	4b13      	ldr	r3, [pc, #76]	; (8598 <prvAddCurrentTaskToDelayedList+0x60>)
    854a:	681b      	ldr	r3, [r3, #0]
    854c:	687a      	ldr	r2, [r7, #4]
    854e:	429a      	cmp	r2, r3
    8550:	d20a      	bcs.n	8568 <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    8552:	4b12      	ldr	r3, [pc, #72]	; (859c <prvAddCurrentTaskToDelayedList+0x64>)
    8554:	681a      	ldr	r2, [r3, #0]
    8556:	4b0f      	ldr	r3, [pc, #60]	; (8594 <prvAddCurrentTaskToDelayedList+0x5c>)
    8558:	681b      	ldr	r3, [r3, #0]
    855a:	f103 0304 	add.w	r3, r3, #4
    855e:	4610      	mov	r0, r2
    8560:	4619      	mov	r1, r3
    8562:	f7fe fc1f 	bl	6da4 <vListInsert>
    8566:	e011      	b.n	858c <prvAddCurrentTaskToDelayedList+0x54>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    8568:	4b0d      	ldr	r3, [pc, #52]	; (85a0 <prvAddCurrentTaskToDelayedList+0x68>)
    856a:	681a      	ldr	r2, [r3, #0]
    856c:	4b09      	ldr	r3, [pc, #36]	; (8594 <prvAddCurrentTaskToDelayedList+0x5c>)
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	f103 0304 	add.w	r3, r3, #4
    8574:	4610      	mov	r0, r2
    8576:	4619      	mov	r1, r3
    8578:	f7fe fc14 	bl	6da4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    857c:	4b09      	ldr	r3, [pc, #36]	; (85a4 <prvAddCurrentTaskToDelayedList+0x6c>)
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	687a      	ldr	r2, [r7, #4]
    8582:	429a      	cmp	r2, r3
    8584:	d202      	bcs.n	858c <prvAddCurrentTaskToDelayedList+0x54>
		{
			xNextTaskUnblockTime = xTimeToWake;
    8586:	4b07      	ldr	r3, [pc, #28]	; (85a4 <prvAddCurrentTaskToDelayedList+0x6c>)
    8588:	687a      	ldr	r2, [r7, #4]
    858a:	601a      	str	r2, [r3, #0]
		}
	}
}
    858c:	f107 0708 	add.w	r7, r7, #8
    8590:	46bd      	mov	sp, r7
    8592:	bd80      	pop	{r7, pc}
    8594:	200044c8 	.word	0x200044c8
    8598:	200045a4 	.word	0x200045a4
    859c:	2000455c 	.word	0x2000455c
    85a0:	20004558 	.word	0x20004558
    85a4:	20000028 	.word	0x20000028

000085a8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    85a8:	b580      	push	{r7, lr}
    85aa:	b084      	sub	sp, #16
    85ac:	af00      	add	r7, sp, #0
    85ae:	4603      	mov	r3, r0
    85b0:	6039      	str	r1, [r7, #0]
    85b2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    85b4:	f04f 0048 	mov.w	r0, #72	; 0x48
    85b8:	f7f7 fda8 	bl	10c <pvPortMalloc>
    85bc:	4603      	mov	r3, r0
    85be:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    85c0:	68fb      	ldr	r3, [r7, #12]
    85c2:	2b00      	cmp	r3, #0
    85c4:	d023      	beq.n	860e <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    85c6:	683b      	ldr	r3, [r7, #0]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d107      	bne.n	85dc <prvAllocateTCBAndStack+0x34>
    85cc:	88fb      	ldrh	r3, [r7, #6]
    85ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    85d2:	4618      	mov	r0, r3
    85d4:	f7f7 fd9a 	bl	10c <pvPortMalloc>
    85d8:	4603      	mov	r3, r0
    85da:	e000      	b.n	85de <prvAllocateTCBAndStack+0x36>
    85dc:	683b      	ldr	r3, [r7, #0]
    85de:	68fa      	ldr	r2, [r7, #12]
    85e0:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    85e2:	68fb      	ldr	r3, [r7, #12]
    85e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    85e6:	2b00      	cmp	r3, #0
    85e8:	d106      	bne.n	85f8 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    85ea:	68f8      	ldr	r0, [r7, #12]
    85ec:	f7f7 fdca 	bl	184 <vPortFree>
			pxNewTCB = NULL;
    85f0:	f04f 0300 	mov.w	r3, #0
    85f4:	60fb      	str	r3, [r7, #12]
    85f6:	e00a      	b.n	860e <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    85f8:	68fb      	ldr	r3, [r7, #12]
    85fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    85fc:	88fb      	ldrh	r3, [r7, #6]
    85fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8602:	4610      	mov	r0, r2
    8604:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    8608:	461a      	mov	r2, r3
    860a:	f000 fa59 	bl	8ac0 <memset>
		}
	}

	return pxNewTCB;
    860e:	68fb      	ldr	r3, [r7, #12]
}
    8610:	4618      	mov	r0, r3
    8612:	f107 0710 	add.w	r7, r7, #16
    8616:	46bd      	mov	sp, r7
    8618:	bd80      	pop	{r7, pc}
    861a:	bf00      	nop

0000861c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    861c:	b580      	push	{r7, lr}
    861e:	b082      	sub	sp, #8
    8620:	af00      	add	r7, sp, #0
    8622:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8628:	4618      	mov	r0, r3
    862a:	f7f7 fdab 	bl	184 <vPortFree>
		vPortFree( pxTCB );
    862e:	6878      	ldr	r0, [r7, #4]
    8630:	f7f7 fda8 	bl	184 <vPortFree>
	}
    8634:	f107 0708 	add.w	r7, r7, #8
    8638:	46bd      	mov	sp, r7
    863a:	bd80      	pop	{r7, pc}

0000863c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    863c:	b480      	push	{r7}
    863e:	b083      	sub	sp, #12
    8640:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    8642:	4b05      	ldr	r3, [pc, #20]	; (8658 <xTaskGetCurrentTaskHandle+0x1c>)
    8644:	681b      	ldr	r3, [r3, #0]
    8646:	607b      	str	r3, [r7, #4]

		return xReturn;
    8648:	687b      	ldr	r3, [r7, #4]
	}
    864a:	4618      	mov	r0, r3
    864c:	f107 070c 	add.w	r7, r7, #12
    8650:	46bd      	mov	sp, r7
    8652:	bc80      	pop	{r7}
    8654:	4770      	bx	lr
    8656:	bf00      	nop
    8658:	200044c8 	.word	0x200044c8

0000865c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    865c:	b580      	push	{r7, lr}
    865e:	b084      	sub	sp, #16
    8660:	af00      	add	r7, sp, #0
    8662:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    8668:	68fb      	ldr	r3, [r7, #12]
    866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    866c:	4b25      	ldr	r3, [pc, #148]	; (8704 <vTaskPriorityInherit+0xa8>)
    866e:	681b      	ldr	r3, [r3, #0]
    8670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8672:	429a      	cmp	r2, r3
    8674:	d242      	bcs.n	86fc <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    8676:	4b23      	ldr	r3, [pc, #140]	; (8704 <vTaskPriorityInherit+0xa8>)
    8678:	681b      	ldr	r3, [r3, #0]
    867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    867c:	f1c3 0205 	rsb	r2, r3, #5
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    8684:	68fb      	ldr	r3, [r7, #12]
    8686:	6959      	ldr	r1, [r3, #20]
    8688:	68fb      	ldr	r3, [r7, #12]
    868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    868c:	4613      	mov	r3, r2
    868e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8692:	189b      	adds	r3, r3, r2
    8694:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8698:	461a      	mov	r2, r3
    869a:	4b1b      	ldr	r3, [pc, #108]	; (8708 <vTaskPriorityInherit+0xac>)
    869c:	18d3      	adds	r3, r2, r3
    869e:	4299      	cmp	r1, r3
    86a0:	d127      	bne.n	86f2 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    86a2:	68fb      	ldr	r3, [r7, #12]
    86a4:	f103 0304 	add.w	r3, r3, #4
    86a8:	4618      	mov	r0, r3
    86aa:	f7fe fbb5 	bl	6e18 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    86ae:	4b15      	ldr	r3, [pc, #84]	; (8704 <vTaskPriorityInherit+0xa8>)
    86b0:	681b      	ldr	r3, [r3, #0]
    86b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86b4:	68fb      	ldr	r3, [r7, #12]
    86b6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    86b8:	68fb      	ldr	r3, [r7, #12]
    86ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86bc:	4b13      	ldr	r3, [pc, #76]	; (870c <vTaskPriorityInherit+0xb0>)
    86be:	681b      	ldr	r3, [r3, #0]
    86c0:	429a      	cmp	r2, r3
    86c2:	d903      	bls.n	86cc <vTaskPriorityInherit+0x70>
    86c4:	68fb      	ldr	r3, [r7, #12]
    86c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86c8:	4b10      	ldr	r3, [pc, #64]	; (870c <vTaskPriorityInherit+0xb0>)
    86ca:	601a      	str	r2, [r3, #0]
    86cc:	68fb      	ldr	r3, [r7, #12]
    86ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86d0:	4613      	mov	r3, r2
    86d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    86d6:	189b      	adds	r3, r3, r2
    86d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    86dc:	461a      	mov	r2, r3
    86de:	4b0a      	ldr	r3, [pc, #40]	; (8708 <vTaskPriorityInherit+0xac>)
    86e0:	18d2      	adds	r2, r2, r3
    86e2:	68fb      	ldr	r3, [r7, #12]
    86e4:	f103 0304 	add.w	r3, r3, #4
    86e8:	4610      	mov	r0, r2
    86ea:	4619      	mov	r1, r3
    86ec:	f7fe fb32 	bl	6d54 <vListInsertEnd>
    86f0:	e004      	b.n	86fc <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    86f2:	4b04      	ldr	r3, [pc, #16]	; (8704 <vTaskPriorityInherit+0xa8>)
    86f4:	681b      	ldr	r3, [r3, #0]
    86f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    86f8:	68fb      	ldr	r3, [r7, #12]
    86fa:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    86fc:	f107 0710 	add.w	r7, r7, #16
    8700:	46bd      	mov	sp, r7
    8702:	bd80      	pop	{r7, pc}
    8704:	200044c8 	.word	0x200044c8
    8708:	200044cc 	.word	0x200044cc
    870c:	200045ac 	.word	0x200045ac

00008710 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    8710:	b580      	push	{r7, lr}
    8712:	b084      	sub	sp, #16
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	2b00      	cmp	r3, #0
    8720:	d031      	beq.n	8786 <vTaskPriorityDisinherit+0x76>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8722:	68fb      	ldr	r3, [r7, #12]
    8724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8726:	68fb      	ldr	r3, [r7, #12]
    8728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    872a:	429a      	cmp	r2, r3
    872c:	d02b      	beq.n	8786 <vTaskPriorityDisinherit+0x76>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    872e:	68fb      	ldr	r3, [r7, #12]
    8730:	f103 0304 	add.w	r3, r3, #4
    8734:	4618      	mov	r0, r3
    8736:	f7fe fb6f 	bl	6e18 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    873a:	68fb      	ldr	r3, [r7, #12]
    873c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    873e:	68fb      	ldr	r3, [r7, #12]
    8740:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    8742:	68fb      	ldr	r3, [r7, #12]
    8744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8746:	f1c3 0205 	rsb	r2, r3, #5
    874a:	68fb      	ldr	r3, [r7, #12]
    874c:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    874e:	68fb      	ldr	r3, [r7, #12]
    8750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8752:	4b0f      	ldr	r3, [pc, #60]	; (8790 <vTaskPriorityDisinherit+0x80>)
    8754:	681b      	ldr	r3, [r3, #0]
    8756:	429a      	cmp	r2, r3
    8758:	d903      	bls.n	8762 <vTaskPriorityDisinherit+0x52>
    875a:	68fb      	ldr	r3, [r7, #12]
    875c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    875e:	4b0c      	ldr	r3, [pc, #48]	; (8790 <vTaskPriorityDisinherit+0x80>)
    8760:	601a      	str	r2, [r3, #0]
    8762:	68fb      	ldr	r3, [r7, #12]
    8764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8766:	4613      	mov	r3, r2
    8768:	ea4f 0383 	mov.w	r3, r3, lsl #2
    876c:	189b      	adds	r3, r3, r2
    876e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    8772:	461a      	mov	r2, r3
    8774:	4b07      	ldr	r3, [pc, #28]	; (8794 <vTaskPriorityDisinherit+0x84>)
    8776:	18d2      	adds	r2, r2, r3
    8778:	68fb      	ldr	r3, [r7, #12]
    877a:	f103 0304 	add.w	r3, r3, #4
    877e:	4610      	mov	r0, r2
    8780:	4619      	mov	r1, r3
    8782:	f7fe fae7 	bl	6d54 <vListInsertEnd>
			}
		}
	}
    8786:	f107 0710 	add.w	r7, r7, #16
    878a:	46bd      	mov	sp, r7
    878c:	bd80      	pop	{r7, pc}
    878e:	bf00      	nop
    8790:	200045ac 	.word	0x200045ac
    8794:	200044cc 	.word	0x200044cc

00008798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    8798:	b480      	push	{r7}
    879a:	b085      	sub	sp, #20
    879c:	af00      	add	r7, sp, #0
    879e:	60f8      	str	r0, [r7, #12]
    87a0:	60b9      	str	r1, [r7, #8]
    87a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    87a4:	68fb      	ldr	r3, [r7, #12]
    87a6:	f1a3 0304 	sub.w	r3, r3, #4
    87aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    87ac:	68fb      	ldr	r3, [r7, #12]
    87ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    87b2:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    87b4:	68fb      	ldr	r3, [r7, #12]
    87b6:	f1a3 0304 	sub.w	r3, r3, #4
    87ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    87bc:	68ba      	ldr	r2, [r7, #8]
    87be:	68fb      	ldr	r3, [r7, #12]
    87c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    87c2:	68fb      	ldr	r3, [r7, #12]
    87c4:	f1a3 0304 	sub.w	r3, r3, #4
    87c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    87ca:	68fb      	ldr	r3, [r7, #12]
    87cc:	f04f 0200 	mov.w	r2, #0
    87d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    87d2:	68fb      	ldr	r3, [r7, #12]
    87d4:	f1a3 0314 	sub.w	r3, r3, #20
    87d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    87da:	687a      	ldr	r2, [r7, #4]
    87dc:	68fb      	ldr	r3, [r7, #12]
    87de:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    87e0:	68fb      	ldr	r3, [r7, #12]
    87e2:	f1a3 0320 	sub.w	r3, r3, #32
    87e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    87e8:	68fb      	ldr	r3, [r7, #12]
}
    87ea:	4618      	mov	r0, r3
    87ec:	f107 0714 	add.w	r7, r7, #20
    87f0:	46bd      	mov	sp, r7
    87f2:	bc80      	pop	{r7}
    87f4:	4770      	bx	lr
    87f6:	bf00      	nop

000087f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    87f8:	4b06      	ldr	r3, [pc, #24]	; (8814 <pxCurrentTCBConst2>)
    87fa:	6819      	ldr	r1, [r3, #0]
    87fc:	6808      	ldr	r0, [r1, #0]
    87fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8802:	f380 8809 	msr	PSP, r0
    8806:	f04f 0000 	mov.w	r0, #0
    880a:	f380 8811 	msr	BASEPRI, r0
    880e:	f04e 0e0d 	orr.w	lr, lr, #13
    8812:	4770      	bx	lr

00008814 <pxCurrentTCBConst2>:
    8814:	200044c8 	.word	0x200044c8

00008818 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    8818:	4854      	ldr	r0, [pc, #336]	; (896c <prvSetupTimerInterrupt+0x24>)
    881a:	6800      	ldr	r0, [r0, #0]
    881c:	6800      	ldr	r0, [r0, #0]
    881e:	f380 8808 	msr	MSP, r0
    8822:	b662      	cpsie	i
    8824:	df00      	svc	0
    8826:	bf00      	nop

00008828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    8828:	b580      	push	{r7, lr}
    882a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    882c:	4b0b      	ldr	r3, [pc, #44]	; (885c <xPortStartScheduler+0x34>)
    882e:	4a0b      	ldr	r2, [pc, #44]	; (885c <xPortStartScheduler+0x34>)
    8830:	6812      	ldr	r2, [r2, #0]
    8832:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    8836:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    8838:	4b08      	ldr	r3, [pc, #32]	; (885c <xPortStartScheduler+0x34>)
    883a:	4a08      	ldr	r2, [pc, #32]	; (885c <xPortStartScheduler+0x34>)
    883c:	6812      	ldr	r2, [r2, #0]
    883e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    8842:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    8844:	f000 f880 	bl	8948 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    8848:	4b05      	ldr	r3, [pc, #20]	; (8860 <xPortStartScheduler+0x38>)
    884a:	f04f 0200 	mov.w	r2, #0
    884e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    8850:	f7ff ffe2 	bl	8818 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    8854:	f04f 0300 	mov.w	r3, #0
}
    8858:	4618      	mov	r0, r3
    885a:	bd80      	pop	{r7, pc}
    885c:	e000ed20 	.word	0xe000ed20
    8860:	2000002c 	.word	0x2000002c

00008864 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    8864:	b480      	push	{r7}
    8866:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    8868:	46bd      	mov	sp, r7
    886a:	bc80      	pop	{r7}
    886c:	4770      	bx	lr
    886e:	bf00      	nop

00008870 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    8870:	b480      	push	{r7}
    8872:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    8874:	4b03      	ldr	r3, [pc, #12]	; (8884 <vPortYieldFromISR+0x14>)
    8876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    887a:	601a      	str	r2, [r3, #0]
}
    887c:	46bd      	mov	sp, r7
    887e:	bc80      	pop	{r7}
    8880:	4770      	bx	lr
    8882:	bf00      	nop
    8884:	e000ed04 	.word	0xe000ed04

00008888 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    8888:	b480      	push	{r7}
    888a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    888c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    8890:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    8894:	4b04      	ldr	r3, [pc, #16]	; (88a8 <vPortEnterCritical+0x20>)
    8896:	681b      	ldr	r3, [r3, #0]
    8898:	f103 0201 	add.w	r2, r3, #1
    889c:	4b02      	ldr	r3, [pc, #8]	; (88a8 <vPortEnterCritical+0x20>)
    889e:	601a      	str	r2, [r3, #0]
}
    88a0:	46bd      	mov	sp, r7
    88a2:	bc80      	pop	{r7}
    88a4:	4770      	bx	lr
    88a6:	bf00      	nop
    88a8:	2000002c 	.word	0x2000002c

000088ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    88ac:	b480      	push	{r7}
    88ae:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    88b0:	4b08      	ldr	r3, [pc, #32]	; (88d4 <vPortExitCritical+0x28>)
    88b2:	681b      	ldr	r3, [r3, #0]
    88b4:	f103 32ff 	add.w	r2, r3, #4294967295
    88b8:	4b06      	ldr	r3, [pc, #24]	; (88d4 <vPortExitCritical+0x28>)
    88ba:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    88bc:	4b05      	ldr	r3, [pc, #20]	; (88d4 <vPortExitCritical+0x28>)
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	2b00      	cmp	r3, #0
    88c2:	d103      	bne.n	88cc <vPortExitCritical+0x20>
	{
		portENABLE_INTERRUPTS();
    88c4:	f04f 0000 	mov.w	r0, #0
    88c8:	f380 8811 	msr	BASEPRI, r0
	}
}
    88cc:	46bd      	mov	sp, r7
    88ce:	bc80      	pop	{r7}
    88d0:	4770      	bx	lr
    88d2:	bf00      	nop
    88d4:	2000002c 	.word	0x2000002c

000088d8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    88d8:	f3ef 8009 	mrs	r0, PSP
    88dc:	4b0c      	ldr	r3, [pc, #48]	; (8910 <pxCurrentTCBConst>)
    88de:	681a      	ldr	r2, [r3, #0]
    88e0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    88e4:	6010      	str	r0, [r2, #0]
    88e6:	e92d 4008 	stmdb	sp!, {r3, lr}
    88ea:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    88ee:	f380 8811 	msr	BASEPRI, r0
    88f2:	f7ff fc03 	bl	80fc <vTaskSwitchContext>
    88f6:	f04f 0000 	mov.w	r0, #0
    88fa:	f380 8811 	msr	BASEPRI, r0
    88fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8902:	6819      	ldr	r1, [r3, #0]
    8904:	6808      	ldr	r0, [r1, #0]
    8906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    890a:	f380 8809 	msr	PSP, r0
    890e:	4770      	bx	lr

00008910 <pxCurrentTCBConst>:
    8910:	200044c8 	.word	0x200044c8

00008914 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    8914:	b580      	push	{r7, lr}
    8916:	b082      	sub	sp, #8
    8918:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    891a:	4b0a      	ldr	r3, [pc, #40]	; (8944 <SysTick_Handler+0x30>)
    891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8920:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    8922:	f04f 0300 	mov.w	r3, #0
    8926:	607b      	str	r3, [r7, #4]
    8928:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    892c:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    8930:	f7ff fb3e 	bl	7fb0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    8934:	f04f 0000 	mov.w	r0, #0
    8938:	f380 8811 	msr	BASEPRI, r0
}
    893c:	f107 0708 	add.w	r7, r7, #8
    8940:	46bd      	mov	sp, r7
    8942:	bd80      	pop	{r7, pc}
    8944:	e000ed04 	.word	0xe000ed04

00008948 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    8948:	b480      	push	{r7}
    894a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    894c:	4b04      	ldr	r3, [pc, #16]	; (8960 <prvSetupTimerInterrupt+0x18>)
    894e:	4a05      	ldr	r2, [pc, #20]	; (8964 <prvSetupTimerInterrupt+0x1c>)
    8950:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    8952:	4b05      	ldr	r3, [pc, #20]	; (8968 <prvSetupTimerInterrupt+0x20>)
    8954:	f04f 0207 	mov.w	r2, #7
    8958:	601a      	str	r2, [r3, #0]
}
    895a:	46bd      	mov	sp, r7
    895c:	bc80      	pop	{r7}
    895e:	4770      	bx	lr
    8960:	e000e014 	.word	0xe000e014
    8964:	000afc7f 	.word	0x000afc7f
    8968:	e000e010 	.word	0xe000e010
    896c:	e000ed08 	.word	0xe000ed08

00008970 <memcpy>:
    8970:	2a03      	cmp	r2, #3
    8972:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    8976:	d809      	bhi.n	898c <memcpy+0x1c>
    8978:	b12a      	cbz	r2, 8986 <memcpy+0x16>
    897a:	2300      	movs	r3, #0
    897c:	5ccc      	ldrb	r4, [r1, r3]
    897e:	54c4      	strb	r4, [r0, r3]
    8980:	3301      	adds	r3, #1
    8982:	4293      	cmp	r3, r2
    8984:	d1fa      	bne.n	897c <memcpy+0xc>
    8986:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    898a:	4770      	bx	lr
    898c:	460b      	mov	r3, r1
    898e:	1882      	adds	r2, r0, r2
    8990:	4601      	mov	r1, r0
    8992:	e003      	b.n	899c <memcpy+0x2c>
    8994:	7824      	ldrb	r4, [r4, #0]
    8996:	3301      	adds	r3, #1
    8998:	f801 4b01 	strb.w	r4, [r1], #1
    899c:	f011 0f03 	tst.w	r1, #3
    89a0:	461c      	mov	r4, r3
    89a2:	d1f7      	bne.n	8994 <memcpy+0x24>
    89a4:	f013 0503 	ands.w	r5, r3, #3
    89a8:	d05d      	beq.n	8a66 <memcpy+0xf6>
    89aa:	426e      	negs	r6, r5
    89ac:	f1c5 0c04 	rsb	ip, r5, #4
    89b0:	00ed      	lsls	r5, r5, #3
    89b2:	599b      	ldr	r3, [r3, r6]
    89b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    89b8:	e008      	b.n	89cc <memcpy+0x5c>
    89ba:	3404      	adds	r4, #4
    89bc:	59a7      	ldr	r7, [r4, r6]
    89be:	463b      	mov	r3, r7
    89c0:	fa07 f70c 	lsl.w	r7, r7, ip
    89c4:	ea48 0707 	orr.w	r7, r8, r7
    89c8:	f841 7b04 	str.w	r7, [r1], #4
    89cc:	1a57      	subs	r7, r2, r1
    89ce:	fa23 f805 	lsr.w	r8, r3, r5
    89d2:	2f03      	cmp	r7, #3
    89d4:	dcf1      	bgt.n	89ba <memcpy+0x4a>
    89d6:	e003      	b.n	89e0 <memcpy+0x70>
    89d8:	f814 3b01 	ldrb.w	r3, [r4], #1
    89dc:	f801 3b01 	strb.w	r3, [r1], #1
    89e0:	428a      	cmp	r2, r1
    89e2:	d8f9      	bhi.n	89d8 <memcpy+0x68>
    89e4:	e7cf      	b.n	8986 <memcpy+0x16>
    89e6:	f853 4c40 	ldr.w	r4, [r3, #-64]
    89ea:	f841 4c40 	str.w	r4, [r1, #-64]
    89ee:	f853 4c3c 	ldr.w	r4, [r3, #-60]
    89f2:	f841 4c3c 	str.w	r4, [r1, #-60]
    89f6:	f853 4c38 	ldr.w	r4, [r3, #-56]
    89fa:	f841 4c38 	str.w	r4, [r1, #-56]
    89fe:	f853 4c34 	ldr.w	r4, [r3, #-52]
    8a02:	f841 4c34 	str.w	r4, [r1, #-52]
    8a06:	f853 4c30 	ldr.w	r4, [r3, #-48]
    8a0a:	f841 4c30 	str.w	r4, [r1, #-48]
    8a0e:	f853 4c2c 	ldr.w	r4, [r3, #-44]
    8a12:	f841 4c2c 	str.w	r4, [r1, #-44]
    8a16:	f853 4c28 	ldr.w	r4, [r3, #-40]
    8a1a:	f841 4c28 	str.w	r4, [r1, #-40]
    8a1e:	f853 4c24 	ldr.w	r4, [r3, #-36]
    8a22:	f841 4c24 	str.w	r4, [r1, #-36]
    8a26:	f853 4c20 	ldr.w	r4, [r3, #-32]
    8a2a:	f841 4c20 	str.w	r4, [r1, #-32]
    8a2e:	f853 4c1c 	ldr.w	r4, [r3, #-28]
    8a32:	f841 4c1c 	str.w	r4, [r1, #-28]
    8a36:	f853 4c18 	ldr.w	r4, [r3, #-24]
    8a3a:	f841 4c18 	str.w	r4, [r1, #-24]
    8a3e:	f853 4c14 	ldr.w	r4, [r3, #-20]
    8a42:	f841 4c14 	str.w	r4, [r1, #-20]
    8a46:	f853 4c10 	ldr.w	r4, [r3, #-16]
    8a4a:	f841 4c10 	str.w	r4, [r1, #-16]
    8a4e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    8a52:	f841 4c0c 	str.w	r4, [r1, #-12]
    8a56:	f853 4c08 	ldr.w	r4, [r3, #-8]
    8a5a:	f841 4c08 	str.w	r4, [r1, #-8]
    8a5e:	f853 4c04 	ldr.w	r4, [r3, #-4]
    8a62:	f841 4c04 	str.w	r4, [r1, #-4]
    8a66:	1a56      	subs	r6, r2, r1
    8a68:	461d      	mov	r5, r3
    8a6a:	460c      	mov	r4, r1
    8a6c:	3340      	adds	r3, #64	; 0x40
    8a6e:	3140      	adds	r1, #64	; 0x40
    8a70:	2e3f      	cmp	r6, #63	; 0x3f
    8a72:	dcb8      	bgt.n	89e6 <memcpy+0x76>
    8a74:	462b      	mov	r3, r5
    8a76:	e00f      	b.n	8a98 <memcpy+0x128>
    8a78:	f853 1c10 	ldr.w	r1, [r3, #-16]
    8a7c:	f844 1c10 	str.w	r1, [r4, #-16]
    8a80:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    8a84:	f844 1c0c 	str.w	r1, [r4, #-12]
    8a88:	f853 1c08 	ldr.w	r1, [r3, #-8]
    8a8c:	f844 1c08 	str.w	r1, [r4, #-8]
    8a90:	f853 1c04 	ldr.w	r1, [r3, #-4]
    8a94:	f844 1c04 	str.w	r1, [r4, #-4]
    8a98:	1b16      	subs	r6, r2, r4
    8a9a:	4621      	mov	r1, r4
    8a9c:	461d      	mov	r5, r3
    8a9e:	3410      	adds	r4, #16
    8aa0:	3310      	adds	r3, #16
    8aa2:	2e0f      	cmp	r6, #15
    8aa4:	dce8      	bgt.n	8a78 <memcpy+0x108>
    8aa6:	462b      	mov	r3, r5
    8aa8:	e002      	b.n	8ab0 <memcpy+0x140>
    8aaa:	6824      	ldr	r4, [r4, #0]
    8aac:	f841 4b04 	str.w	r4, [r1], #4
    8ab0:	1a55      	subs	r5, r2, r1
    8ab2:	461c      	mov	r4, r3
    8ab4:	2d03      	cmp	r5, #3
    8ab6:	f103 0304 	add.w	r3, r3, #4
    8aba:	dcf6      	bgt.n	8aaa <memcpy+0x13a>
    8abc:	e790      	b.n	89e0 <memcpy+0x70>
    8abe:	bf00      	nop

00008ac0 <memset>:
    8ac0:	2a03      	cmp	r2, #3
    8ac2:	b2c9      	uxtb	r1, r1
    8ac4:	b470      	push	{r4, r5, r6}
    8ac6:	d808      	bhi.n	8ada <memset+0x1a>
    8ac8:	b12a      	cbz	r2, 8ad6 <memset+0x16>
    8aca:	4603      	mov	r3, r0
    8acc:	1812      	adds	r2, r2, r0
    8ace:	f803 1b01 	strb.w	r1, [r3], #1
    8ad2:	4293      	cmp	r3, r2
    8ad4:	d1fb      	bne.n	8ace <memset+0xe>
    8ad6:	bc70      	pop	{r4, r5, r6}
    8ad8:	4770      	bx	lr
    8ada:	1882      	adds	r2, r0, r2
    8adc:	4604      	mov	r4, r0
    8ade:	e001      	b.n	8ae4 <memset+0x24>
    8ae0:	f804 1b01 	strb.w	r1, [r4], #1
    8ae4:	f014 0f03 	tst.w	r4, #3
    8ae8:	d1fa      	bne.n	8ae0 <memset+0x20>
    8aea:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    8aee:	fb03 f301 	mul.w	r3, r3, r1
    8af2:	e01f      	b.n	8b34 <memset+0x74>
    8af4:	f844 3c40 	str.w	r3, [r4, #-64]
    8af8:	f844 3c3c 	str.w	r3, [r4, #-60]
    8afc:	f844 3c38 	str.w	r3, [r4, #-56]
    8b00:	f844 3c34 	str.w	r3, [r4, #-52]
    8b04:	f844 3c30 	str.w	r3, [r4, #-48]
    8b08:	f844 3c2c 	str.w	r3, [r4, #-44]
    8b0c:	f844 3c28 	str.w	r3, [r4, #-40]
    8b10:	f844 3c24 	str.w	r3, [r4, #-36]
    8b14:	f844 3c20 	str.w	r3, [r4, #-32]
    8b18:	f844 3c1c 	str.w	r3, [r4, #-28]
    8b1c:	f844 3c18 	str.w	r3, [r4, #-24]
    8b20:	f844 3c14 	str.w	r3, [r4, #-20]
    8b24:	f844 3c10 	str.w	r3, [r4, #-16]
    8b28:	f844 3c0c 	str.w	r3, [r4, #-12]
    8b2c:	f844 3c08 	str.w	r3, [r4, #-8]
    8b30:	f844 3c04 	str.w	r3, [r4, #-4]
    8b34:	1b16      	subs	r6, r2, r4
    8b36:	4625      	mov	r5, r4
    8b38:	3440      	adds	r4, #64	; 0x40
    8b3a:	2e3f      	cmp	r6, #63	; 0x3f
    8b3c:	dcda      	bgt.n	8af4 <memset+0x34>
    8b3e:	462c      	mov	r4, r5
    8b40:	e007      	b.n	8b52 <memset+0x92>
    8b42:	f844 3c10 	str.w	r3, [r4, #-16]
    8b46:	f844 3c0c 	str.w	r3, [r4, #-12]
    8b4a:	f844 3c08 	str.w	r3, [r4, #-8]
    8b4e:	f844 3c04 	str.w	r3, [r4, #-4]
    8b52:	1b16      	subs	r6, r2, r4
    8b54:	4625      	mov	r5, r4
    8b56:	3410      	adds	r4, #16
    8b58:	2e0f      	cmp	r6, #15
    8b5a:	dcf2      	bgt.n	8b42 <memset+0x82>
    8b5c:	e001      	b.n	8b62 <memset+0xa2>
    8b5e:	f845 3b04 	str.w	r3, [r5], #4
    8b62:	1b54      	subs	r4, r2, r5
    8b64:	2c03      	cmp	r4, #3
    8b66:	dcfa      	bgt.n	8b5e <memset+0x9e>
    8b68:	e001      	b.n	8b6e <memset+0xae>
    8b6a:	f805 1b01 	strb.w	r1, [r5], #1
    8b6e:	4295      	cmp	r5, r2
    8b70:	d3fb      	bcc.n	8b6a <memset+0xaa>
    8b72:	e7b0      	b.n	8ad6 <memset+0x16>

00008b74 <strcmp>:
    8b74:	ea80 0201 	eor.w	r2, r0, r1
    8b78:	f012 0f03 	tst.w	r2, #3
    8b7c:	d13a      	bne.n	8bf4 <strcmp_unaligned>
    8b7e:	f010 0203 	ands.w	r2, r0, #3
    8b82:	f020 0003 	bic.w	r0, r0, #3
    8b86:	f021 0103 	bic.w	r1, r1, #3
    8b8a:	f850 cb04 	ldr.w	ip, [r0], #4
    8b8e:	bf08      	it	eq
    8b90:	f851 3b04 	ldreq.w	r3, [r1], #4
    8b94:	d00d      	beq.n	8bb2 <strcmp+0x3e>
    8b96:	f082 0203 	eor.w	r2, r2, #3
    8b9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8b9e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    8ba2:	fa23 f202 	lsr.w	r2, r3, r2
    8ba6:	f851 3b04 	ldr.w	r3, [r1], #4
    8baa:	ea4c 0c02 	orr.w	ip, ip, r2
    8bae:	ea43 0302 	orr.w	r3, r3, r2
    8bb2:	bf00      	nop
    8bb4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    8bb8:	459c      	cmp	ip, r3
    8bba:	bf01      	itttt	eq
    8bbc:	ea22 020c 	biceq.w	r2, r2, ip
    8bc0:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
    8bc4:	f850 cb04 	ldreq.w	ip, [r0], #4
    8bc8:	f851 3b04 	ldreq.w	r3, [r1], #4
    8bcc:	d0f2      	beq.n	8bb4 <strcmp+0x40>
    8bce:	ea4f 600c 	mov.w	r0, ip, lsl #24
    8bd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    8bd6:	2801      	cmp	r0, #1
    8bd8:	bf28      	it	cs
    8bda:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    8bde:	bf08      	it	eq
    8be0:	0a1b      	lsreq	r3, r3, #8
    8be2:	d0f4      	beq.n	8bce <strcmp+0x5a>
    8be4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    8be8:	ea4f 6010 	mov.w	r0, r0, lsr #24
    8bec:	eba0 0003 	sub.w	r0, r0, r3
    8bf0:	4770      	bx	lr
    8bf2:	bf00      	nop

00008bf4 <strcmp_unaligned>:
    8bf4:	f010 0f03 	tst.w	r0, #3
    8bf8:	d00a      	beq.n	8c10 <strcmp_unaligned+0x1c>
    8bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
    8bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
    8c02:	2a01      	cmp	r2, #1
    8c04:	bf28      	it	cs
    8c06:	429a      	cmpcs	r2, r3
    8c08:	d0f4      	beq.n	8bf4 <strcmp_unaligned>
    8c0a:	eba2 0003 	sub.w	r0, r2, r3
    8c0e:	4770      	bx	lr
    8c10:	f84d 5d04 	str.w	r5, [sp, #-4]!
    8c14:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8c18:	f04f 0201 	mov.w	r2, #1
    8c1c:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    8c20:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
    8c24:	f001 0c03 	and.w	ip, r1, #3
    8c28:	f021 0103 	bic.w	r1, r1, #3
    8c2c:	f850 4b04 	ldr.w	r4, [r0], #4
    8c30:	f851 5b04 	ldr.w	r5, [r1], #4
    8c34:	f1bc 0f02 	cmp.w	ip, #2
    8c38:	d026      	beq.n	8c88 <strcmp_unaligned+0x94>
    8c3a:	d84b      	bhi.n	8cd4 <strcmp_unaligned+0xe0>
    8c3c:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
    8c40:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
    8c44:	eba4 0302 	sub.w	r3, r4, r2
    8c48:	ea23 0304 	bic.w	r3, r3, r4
    8c4c:	d10d      	bne.n	8c6a <strcmp_unaligned+0x76>
    8c4e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
    8c52:	bf08      	it	eq
    8c54:	f851 5b04 	ldreq.w	r5, [r1], #4
    8c58:	d10a      	bne.n	8c70 <strcmp_unaligned+0x7c>
    8c5a:	ea8c 0c04 	eor.w	ip, ip, r4
    8c5e:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
    8c62:	d10c      	bne.n	8c7e <strcmp_unaligned+0x8a>
    8c64:	f850 4b04 	ldr.w	r4, [r0], #4
    8c68:	e7e8      	b.n	8c3c <strcmp_unaligned+0x48>
    8c6a:	ea4f 2515 	mov.w	r5, r5, lsr #8
    8c6e:	e05c      	b.n	8d2a <strcmp_unaligned+0x136>
    8c70:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
    8c74:	d152      	bne.n	8d1c <strcmp_unaligned+0x128>
    8c76:	780d      	ldrb	r5, [r1, #0]
    8c78:	ea4f 6c14 	mov.w	ip, r4, lsr #24
    8c7c:	e055      	b.n	8d2a <strcmp_unaligned+0x136>
    8c7e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
    8c82:	f005 05ff 	and.w	r5, r5, #255	; 0xff
    8c86:	e050      	b.n	8d2a <strcmp_unaligned+0x136>
    8c88:	ea4f 4c04 	mov.w	ip, r4, lsl #16
    8c8c:	eba4 0302 	sub.w	r3, r4, r2
    8c90:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    8c94:	ea23 0304 	bic.w	r3, r3, r4
    8c98:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
    8c9c:	d117      	bne.n	8cce <strcmp_unaligned+0xda>
    8c9e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
    8ca2:	bf08      	it	eq
    8ca4:	f851 5b04 	ldreq.w	r5, [r1], #4
    8ca8:	d107      	bne.n	8cba <strcmp_unaligned+0xc6>
    8caa:	ea8c 0c04 	eor.w	ip, ip, r4
    8cae:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
    8cb2:	d108      	bne.n	8cc6 <strcmp_unaligned+0xd2>
    8cb4:	f850 4b04 	ldr.w	r4, [r0], #4
    8cb8:	e7e6      	b.n	8c88 <strcmp_unaligned+0x94>
    8cba:	041b      	lsls	r3, r3, #16
    8cbc:	d12e      	bne.n	8d1c <strcmp_unaligned+0x128>
    8cbe:	880d      	ldrh	r5, [r1, #0]
    8cc0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    8cc4:	e031      	b.n	8d2a <strcmp_unaligned+0x136>
    8cc6:	ea4f 4505 	mov.w	r5, r5, lsl #16
    8cca:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    8cce:	ea4f 4515 	mov.w	r5, r5, lsr #16
    8cd2:	e02a      	b.n	8d2a <strcmp_unaligned+0x136>
    8cd4:	f004 0cff 	and.w	ip, r4, #255	; 0xff
    8cd8:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
    8cdc:	eba4 0302 	sub.w	r3, r4, r2
    8ce0:	ea23 0304 	bic.w	r3, r3, r4
    8ce4:	d10d      	bne.n	8d02 <strcmp_unaligned+0x10e>
    8ce6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
    8cea:	bf08      	it	eq
    8cec:	f851 5b04 	ldreq.w	r5, [r1], #4
    8cf0:	d10a      	bne.n	8d08 <strcmp_unaligned+0x114>
    8cf2:	ea8c 0c04 	eor.w	ip, ip, r4
    8cf6:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
    8cfa:	d10a      	bne.n	8d12 <strcmp_unaligned+0x11e>
    8cfc:	f850 4b04 	ldr.w	r4, [r0], #4
    8d00:	e7e8      	b.n	8cd4 <strcmp_unaligned+0xe0>
    8d02:	ea4f 6515 	mov.w	r5, r5, lsr #24
    8d06:	e010      	b.n	8d2a <strcmp_unaligned+0x136>
    8d08:	f014 0fff 	tst.w	r4, #255	; 0xff
    8d0c:	d006      	beq.n	8d1c <strcmp_unaligned+0x128>
    8d0e:	f851 5b04 	ldr.w	r5, [r1], #4
    8d12:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    8d16:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    8d1a:	e006      	b.n	8d2a <strcmp_unaligned+0x136>
    8d1c:	f04f 0000 	mov.w	r0, #0
    8d20:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d24:	f85d 5b04 	ldr.w	r5, [sp], #4
    8d28:	4770      	bx	lr
    8d2a:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
    8d2e:	f005 00ff 	and.w	r0, r5, #255	; 0xff
    8d32:	2801      	cmp	r0, #1
    8d34:	bf28      	it	cs
    8d36:	4290      	cmpcs	r0, r2
    8d38:	bf04      	itt	eq
    8d3a:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
    8d3e:	0a2d      	lsreq	r5, r5, #8
    8d40:	d0f3      	beq.n	8d2a <strcmp_unaligned+0x136>
    8d42:	eba2 0000 	sub.w	r0, r2, r0
    8d46:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d4a:	f85d 5b04 	ldr.w	r5, [sp], #4
    8d4e:	4770      	bx	lr

00008d50 <strcpy>:
    8d50:	ea80 0201 	eor.w	r2, r0, r1
    8d54:	4684      	mov	ip, r0
    8d56:	f012 0f03 	tst.w	r2, #3
    8d5a:	d14f      	bne.n	8dfc <strcpy+0xac>
    8d5c:	f011 0f03 	tst.w	r1, #3
    8d60:	d132      	bne.n	8dc8 <strcpy+0x78>
    8d62:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8d66:	f011 0f04 	tst.w	r1, #4
    8d6a:	f851 3b04 	ldr.w	r3, [r1], #4
    8d6e:	d00b      	beq.n	8d88 <strcpy+0x38>
    8d70:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8d74:	439a      	bics	r2, r3
    8d76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8d7a:	bf04      	itt	eq
    8d7c:	f84c 3b04 	streq.w	r3, [ip], #4
    8d80:	f851 3b04 	ldreq.w	r3, [r1], #4
    8d84:	d116      	bne.n	8db4 <strcpy+0x64>
    8d86:	bf00      	nop
    8d88:	f851 4b04 	ldr.w	r4, [r1], #4
    8d8c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8d90:	439a      	bics	r2, r3
    8d92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8d96:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    8d9a:	d10b      	bne.n	8db4 <strcpy+0x64>
    8d9c:	f84c 3b04 	str.w	r3, [ip], #4
    8da0:	43a2      	bics	r2, r4
    8da2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8da6:	bf04      	itt	eq
    8da8:	f851 3b04 	ldreq.w	r3, [r1], #4
    8dac:	f84c 4b04 	streq.w	r4, [ip], #4
    8db0:	d0ea      	beq.n	8d88 <strcpy+0x38>
    8db2:	4623      	mov	r3, r4
    8db4:	f80c 3b01 	strb.w	r3, [ip], #1
    8db8:	f013 0fff 	tst.w	r3, #255	; 0xff
    8dbc:	ea4f 2333 	mov.w	r3, r3, ror #8
    8dc0:	d1f8      	bne.n	8db4 <strcpy+0x64>
    8dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dc6:	4770      	bx	lr
    8dc8:	f011 0f01 	tst.w	r1, #1
    8dcc:	d006      	beq.n	8ddc <strcpy+0x8c>
    8dce:	f811 2b01 	ldrb.w	r2, [r1], #1
    8dd2:	f80c 2b01 	strb.w	r2, [ip], #1
    8dd6:	2a00      	cmp	r2, #0
    8dd8:	bf08      	it	eq
    8dda:	4770      	bxeq	lr
    8ddc:	f011 0f02 	tst.w	r1, #2
    8de0:	d0bf      	beq.n	8d62 <strcpy+0x12>
    8de2:	f831 2b02 	ldrh.w	r2, [r1], #2
    8de6:	f012 0fff 	tst.w	r2, #255	; 0xff
    8dea:	bf16      	itet	ne
    8dec:	f82c 2b02 	strhne.w	r2, [ip], #2
    8df0:	f88c 2000 	strbeq.w	r2, [ip]
    8df4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    8df8:	d1b3      	bne.n	8d62 <strcpy+0x12>
    8dfa:	4770      	bx	lr
    8dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
    8e00:	f80c 2b01 	strb.w	r2, [ip], #1
    8e04:	2a00      	cmp	r2, #0
    8e06:	d1f9      	bne.n	8dfc <strcpy+0xac>
    8e08:	4770      	bx	lr
    8e0a:	bf00      	nop

00008e0c <strncpy>:
    8e0c:	ea41 0300 	orr.w	r3, r1, r0
    8e10:	f013 0f03 	tst.w	r3, #3
    8e14:	460b      	mov	r3, r1
    8e16:	b470      	push	{r4, r5, r6}
    8e18:	bf14      	ite	ne
    8e1a:	2400      	movne	r4, #0
    8e1c:	2401      	moveq	r4, #1
    8e1e:	2a03      	cmp	r2, #3
    8e20:	bf94      	ite	ls
    8e22:	2400      	movls	r4, #0
    8e24:	f004 0401 	andhi.w	r4, r4, #1
    8e28:	4605      	mov	r5, r0
    8e2a:	b9d4      	cbnz	r4, 8e62 <strncpy+0x56>
    8e2c:	b1ba      	cbz	r2, 8e5e <strncpy+0x52>
    8e2e:	780e      	ldrb	r6, [r1, #0]
    8e30:	462b      	mov	r3, r5
    8e32:	3a01      	subs	r2, #1
    8e34:	f803 6b01 	strb.w	r6, [r3], #1
    8e38:	b156      	cbz	r6, 8e50 <strncpy+0x44>
    8e3a:	1cac      	adds	r4, r5, #2
    8e3c:	b17a      	cbz	r2, 8e5e <strncpy+0x52>
    8e3e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    8e42:	4623      	mov	r3, r4
    8e44:	3a01      	subs	r2, #1
    8e46:	f804 5c01 	strb.w	r5, [r4, #-1]
    8e4a:	3401      	adds	r4, #1
    8e4c:	2d00      	cmp	r5, #0
    8e4e:	d1f5      	bne.n	8e3c <strncpy+0x30>
    8e50:	b12a      	cbz	r2, 8e5e <strncpy+0x52>
    8e52:	189a      	adds	r2, r3, r2
    8e54:	2100      	movs	r1, #0
    8e56:	f803 1b01 	strb.w	r1, [r3], #1
    8e5a:	4293      	cmp	r3, r2
    8e5c:	d1fb      	bne.n	8e56 <strncpy+0x4a>
    8e5e:	bc70      	pop	{r4, r5, r6}
    8e60:	4770      	bx	lr
    8e62:	4619      	mov	r1, r3
    8e64:	f853 4b04 	ldr.w	r4, [r3], #4
    8e68:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    8e6c:	ea26 0604 	bic.w	r6, r6, r4
    8e70:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    8e74:	d1da      	bne.n	8e2c <strncpy+0x20>
    8e76:	3a04      	subs	r2, #4
    8e78:	f845 4b04 	str.w	r4, [r5], #4
    8e7c:	2a03      	cmp	r2, #3
    8e7e:	4619      	mov	r1, r3
    8e80:	d8ef      	bhi.n	8e62 <strncpy+0x56>
    8e82:	e7d3      	b.n	8e2c <strncpy+0x20>

00008e84 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    8e84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    8e86:	e003      	b.n	8e90 <LoopCopyDataInit>

00008e88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    8e88:	4b0a      	ldr	r3, [pc, #40]	; (8eb4 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    8e8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    8e8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    8e8e:	3104      	adds	r1, #4

00008e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    8e90:	4809      	ldr	r0, [pc, #36]	; (8eb8 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    8e92:	4b0a      	ldr	r3, [pc, #40]	; (8ebc <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    8e94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    8e96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    8e98:	d3f6      	bcc.n	8e88 <CopyDataInit>
	ldr	r2, =_sbss
    8e9a:	4a09      	ldr	r2, [pc, #36]	; (8ec0 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    8e9c:	e002      	b.n	8ea4 <LoopFillZerobss>

00008e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    8e9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
    8ea0:	f842 3b04 	str.w	r3, [r2], #4

00008ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    8ea4:	4b07      	ldr	r3, [pc, #28]	; (8ec4 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    8ea6:	429a      	cmp	r2, r3
	bcc	FillZerobss
    8ea8:	d3f9      	bcc.n	8e9e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    8eaa:	f7f8 fab5 	bl	1418 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    8eae:	f7f7 fb3f 	bl	530 <main>
	bx	lr    
    8eb2:	4770      	bx	lr
    8eb4:	00008fd8 	.word	0x00008fd8
    8eb8:	20000000 	.word	0x20000000
    8ebc:	20000030 	.word	0x20000030
    8ec0:	20000030 	.word	0x20000030
    8ec4:	200045c8 	.word	0x200045c8

00008ec8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    8ec8:	e7fe      	b.n	8ec8 <ADC1_2_IRQHandler>
    8eca:	0000      	movs	r0, r0
    8ecc:	73726966 	.word	0x73726966
    8ed0:	6d614e74 	.word	0x6d614e74
    8ed4:	00000065 	.word	0x00000065
    8ed8:	7473616c 	.word	0x7473616c
    8edc:	656d614e 	.word	0x656d614e
    8ee0:	00000000 	.word	0x00000000
    8ee4:	656d6974 	.word	0x656d6974
    8ee8:	00000000 	.word	0x00000000
    8eec:	6573227b 	.word	0x6573227b
    8ef0:	726f736e 	.word	0x726f736e
    8ef4:	67223a22 	.word	0x67223a22
    8ef8:	2c227370 	.word	0x2c227370
    8efc:	6d697422 	.word	0x6d697422
    8f00:	313a2265 	.word	0x313a2265
    8f04:	38313533 	.word	0x38313533
    8f08:	32313432 	.word	0x32313432
    8f0c:	64222c30 	.word	0x64222c30
    8f10:	22617461 	.word	0x22617461
    8f14:	38345b3a 	.word	0x38345b3a
    8f18:	3635372e 	.word	0x3635372e
    8f1c:	2c303830 	.word	0x2c303830
    8f20:	30332e32 	.word	0x30332e32
    8f24:	38333032 	.word	0x38333032
    8f28:	00007d5d 	.word	0x00007d5d
    8f2c:	6c6c6548 	.word	0x6c6c6548
    8f30:	0a32206f 	.word	0x0a32206f
    8f34:	00000000 	.word	0x00000000
    8f38:	3a746f47 	.word	0x3a746f47
    8f3c:	00000000 	.word	0x00000000
    8f40:	69726553 	.word	0x69726553
    8f44:	58206c61 	.word	0x58206c61
    8f48:	2074696d 	.word	0x2074696d
    8f4c:	00727453 	.word	0x00727453
    8f50:	69726553 	.word	0x69726553
    8f54:	52206c61 	.word	0x52206c61
    8f58:	2f646165 	.word	0x2f646165
    8f5c:	74697257 	.word	0x74697257
    8f60:	00000065 	.word	0x00000065
    8f64:	65757274 	.word	0x65757274
    8f68:	00000000 	.word	0x00000000
    8f6c:	736c6166 	.word	0x736c6166
    8f70:	00000065 	.word	0x00000065
    8f74:	6c6c756e 	.word	0x6c6c756e
    8f78:	00000000 	.word	0x00000000
    8f7c:	090d0a20 	.word	0x090d0a20
    8f80:	0000000c 	.word	0x0000000c

00008f84 <blank>:
    8f84:	00008f7c 00005d7d                       |...}]..

00008f8c <endofblock>:
    8f8c:	00008f88                                ....

00008f90 <min.4866>:
    8f90:	3232392d 32373333 38363330 37373435     -922337203685477
    8fa0:	38303835 00000000                       5808....

00008fa8 <max.4867>:
    8fa8:	33323239 30323733 35383633 35373734     9223372036854775
    8fb8:	00373038                                807.

00008fbc <pair.4796>:
    8fbc:	5c5c2222 08622f2f 0a6e0c66 09740d72     ""\\//b.f.n.r.t.
    8fcc:	454c4449 00000000                       IDLE....

00008fd4 <ulKernelPriority>:
    8fd4:	0000007f                                ....
